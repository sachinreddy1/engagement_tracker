{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedConv2D } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { conv2D } from './Conv2D';\nexport function fusedConv2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  let result = conv2D({\n    inputs: {\n      x,\n      filter\n    },\n    backend,\n    attrs: {\n      strides,\n      pad,\n      dataFormat,\n      dilations,\n      dimRoundingMode\n    }\n  });\n  if (bias) {\n    const resultOld = result;\n    result = add({\n      inputs: {\n        a: result,\n        b: bias\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n  if (activation) {\n    const resultOld = result;\n    result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n  return result;\n}\nexport const fusedConv2DConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D\n};","map":{"version":3,"names":["FusedConv2D","applyActivation","add","conv2D","fusedConv2D","args","inputs","backend","attrs","x","filter","bias","preluActivationWeights","strides","pad","dataFormat","dilations","dimRoundingMode","activation","leakyreluAlpha","result","resultOld","a","b","disposeIntermediateTensorInfo","fusedConv2DConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\FusedConv2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,WAAW,QAAkF,uBAAuB;AAG5H,SAAQC,eAAe,QAAO,sBAAsB;AACpD,SAAQC,GAAG,QAAO,OAAO;AACzB,SAAQC,MAAM,QAAO,UAAU;AAE/B,OAAM,SAAUC,WAAWA,CAACC,IAI3B;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,CAAC;IAAEC,MAAM;IAAEC,IAAI;IAAEC;EAAsB,CAAC,GAAGN,MAAM;EACxD,MAAM;IACJO,OAAO;IACPC,GAAG;IACHC,UAAU;IACVC,SAAS;IACTC,eAAe;IACfC,UAAU;IACVC;EAAc,CACf,GAAGX,KAAK;EAET,IAAIY,MAAM,GAAGjB,MAAM,CAAC;IAClBG,MAAM,EAAE;MAACG,CAAC;MAAEC;IAAM,CAAC;IACnBH,OAAO;IACPC,KAAK,EAAE;MAACK,OAAO;MAAEC,GAAG;MAAEC,UAAU;MAAEC,SAAS;MAAEC;IAAe;GAC7D,CAAC;EAEF,IAAIN,IAAI,EAAE;IACR,MAAMU,SAAS,GAAGD,MAAM;IACxBA,MAAM,GAAGlB,GAAG,CAAC;MAACI,MAAM,EAAE;QAACgB,CAAC,EAAEF,MAAM;QAAEG,CAAC,EAAEZ;MAAI,CAAC;MAAEJ;IAAO,CAAC,CAAe;IACnEA,OAAO,CAACiB,6BAA6B,CAACH,SAAS,CAAC;;EAGlD,IAAIH,UAAU,EAAE;IACd,MAAMG,SAAS,GAAGD,MAAM;IACxBA,MAAM,GAAGnB,eAAe,CACpBM,OAAO,EAAEa,MAAM,EAAEF,UAAU,EAAEN,sBAAsB,EAAEO,cAAc,CAAC;IACxEZ,OAAO,CAACiB,6BAA6B,CAACH,SAAS,CAAC;;EAGlD,OAAOD,MAAM;AACf;AAEA,OAAO,MAAMK,iBAAiB,GAAiB;EAC7CC,UAAU,EAAE1B,WAAW;EACvB2B,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAExB;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}