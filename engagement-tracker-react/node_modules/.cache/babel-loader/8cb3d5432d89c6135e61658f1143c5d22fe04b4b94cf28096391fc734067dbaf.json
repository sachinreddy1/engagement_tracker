{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PackProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = false;\n    this.packedOutput = true;\n    // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n    if (rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', rank);\n      const dtype = getCoordsDataType(rank);\n      const outOfBoundsCondition = getOutOfBoundsCondition(rank, outputShape, channels);\n      const setup = getSetup(rank, outputShape[outputShape.length - 1], outputShape[outputShape.length - 2], channels);\n      const output = getOutput(outputShape, channels);\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n}\nfunction getSourceCoordsArr(rank, dims) {\n  const coords = [];\n  for (let row = 0; row <= 1; row++) {\n    for (let col = 0; col <= 1; col++) {\n      let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n      for (let d = 2; d < rank; d++) {\n        coord = `${dims[dims.length - 1 - d]},` + coord;\n      }\n      coords.push(coord);\n    }\n  }\n  return coords;\n}\nfunction getOutOfBoundsCondition(rank, shape, dims) {\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n  return cond;\n}\nfunction getSetup(rank, cols, rows, dims) {\n  if (rank === 1) {\n    return '';\n  }\n  const innerDims = dims.slice(-2);\n  return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\nfunction getOutput(shape, dims) {\n  const rank = shape.length;\n  const sourceCoords = getSourceCoordsArr(rank, dims);\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n  return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}","map":{"version":3,"names":["getChannels","getCoordsDataType","PackProgram","constructor","outputShape","variableNames","packedInputs","packedOutput","rank","length","userCode","channels","dtype","outOfBoundsCondition","getOutOfBoundsCondition","setup","getSetup","output","getOutput","getSourceCoordsArr","dims","coords","row","col","coord","d","push","shape","cond","i","cols","rows","innerDims","slice","sourceCoords"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\pack_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    if (rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', rank);\n      const dtype = getCoordsDataType(rank);\n      const outOfBoundsCondition =\n          getOutOfBoundsCondition(rank, outputShape, channels);\n      const setup = getSetup(\n          rank, outputShape[outputShape.length - 1],\n          outputShape[outputShape.length - 2], channels);\n      const output = getOutput(outputShape, channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n}\n\nfunction getSourceCoordsArr(rank: number, dims: string[]): string[] {\n  const coords = [];\n\n  for (let row = 0; row <= 1; row++) {\n    for (let col = 0; col <= 1; col++) {\n      let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n      for (let d = 2; d < rank; d++) {\n        coord = `${dims[dims.length - 1 - d]},` + coord;\n      }\n\n      coords.push(coord);\n    }\n  }\n  return coords;\n}\n\nfunction getOutOfBoundsCondition(\n    rank: number, shape: number[], dims: string[]): string {\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\nfunction getSetup(\n    rank: number, cols: number, rows: number, dims: string[]): string {\n  if (rank === 1) {\n    return '';\n  }\n\n  const innerDims = dims.slice(-2);\n\n  return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\n\nfunction getOutput(shape: number[], dims: string[]): string {\n  const rank = shape.length;\n  const sourceCoords = getSourceCoordsArr(rank, dims);\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}