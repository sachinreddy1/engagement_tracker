{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Softmax, util } from '@tensorflow/tfjs-core';\nimport { exp } from './Exp';\nimport { max } from './Max';\nimport { div } from './RealDiv';\nimport { reshape } from './Reshape';\nimport { sub } from './Sub';\nimport { sum } from './Sum';\nexport function softmax(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    dim\n  } = attrs;\n  const logitsRank = logits.shape.length;\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error('Softmax along a non-last dimension is not yet supported. ' + \"Logits was rank \".concat(logitsRank, \" and dim was \").concat($dim));\n  }\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {\n      x: logits\n    },\n    backend,\n    attrs: {\n      reductionIndices: axes,\n      keepDims: false\n    }\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n  const maxLogitReshaped = reshape({\n    inputs: {\n      x: maxLogit\n    },\n    backend,\n    attrs: {\n      shape: expandedShape\n    }\n  });\n  const a = sub({\n    inputs: {\n      a: logits,\n      b: maxLogitReshaped\n    },\n    backend\n  });\n  const b = exp({\n    inputs: {\n      x: a\n    },\n    backend\n  });\n  const sumExp = sum({\n    inputs: {\n      x: b\n    },\n    backend,\n    attrs: {\n      axis: axes,\n      keepDims: false\n    }\n  });\n  const sumReshaped = reshape({\n    inputs: {\n      x: sumExp\n    },\n    backend,\n    attrs: {\n      shape: expandedShape\n    }\n  });\n  const result = div({\n    inputs: {\n      a: b,\n      b: sumReshaped\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n  return result;\n}\nexport const softmaxConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax\n};","map":{"version":3,"names":["backend_util","Softmax","util","exp","max","div","reshape","sub","sum","softmax","args","inputs","backend","attrs","logits","dim","logitsRank","shape","length","$dim","Error","concat","axes","parseAxisParam","maxLogit","x","reductionIndices","keepDims","expandedShape","expandShapeToKeepDim","maxLogitReshaped","a","b","sumExp","axis","sumReshaped","result","disposeIntermediateTensorInfo","softmaxConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\Softmax.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}