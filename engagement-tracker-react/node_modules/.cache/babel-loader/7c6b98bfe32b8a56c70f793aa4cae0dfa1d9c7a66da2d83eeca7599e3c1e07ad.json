{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { inferShape } from './tensor_util_env';\nimport { arraysEqual, encodeString, flatten, isString, isTypedArray } from './util';\nconst TEST_EPSILON_FLOAT32 = 1e-3;\nexport const TEST_EPSILON_FLOAT16 = 1e-1;\nexport function expectArraysClose(actual, expected, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, epsilon));\n}\nexport function testEpsilon() {\n  return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 : TEST_EPSILON_FLOAT16;\n}\nfunction expectArraysPredicate(actual, expected, predicate) {\n  let checkClassType = true;\n  if (isTypedArray(actual) || isTypedArray(expected)) {\n    checkClassType = false;\n  }\n  if (isTypedArray(actual) && isTypedArray(expected)) {\n    checkClassType = true;\n  }\n  if (checkClassType) {\n    const aType = actual.constructor.name;\n    const bType = expected.constructor.name;\n    if (aType !== bType) {\n      throw new Error(\"Arrays are of different type. Actual: \".concat(aType, \". \") + \"Expected: \".concat(bType));\n    }\n  }\n  if (Array.isArray(actual) && Array.isArray(expected)) {\n    const actualShape = inferShape(actual);\n    const expectedShape = inferShape(expected);\n    if (!arraysEqual(actualShape, expectedShape)) {\n      throw new Error(\"Arrays have different shapes. \" + \"Actual: [\".concat(actualShape, \"]. Expected: [\").concat(expectedShape, \"]\"));\n    }\n  }\n  const actualFlat = isTypedArray(actual) ? actual : flatten(actual);\n  const expectedFlat = isTypedArray(expected) ? expected : flatten(expected);\n  if (actualFlat.length !== expectedFlat.length) {\n    throw new Error(\"Arrays have different lengths actual: \".concat(actualFlat.length, \" vs \") + \"expected: \".concat(expectedFlat.length, \".\\n\") + \"Actual:   \".concat(actualFlat, \".\\n\") + \"Expected: \".concat(expectedFlat, \".\"));\n  }\n  for (let i = 0; i < expectedFlat.length; ++i) {\n    const a = actualFlat[i];\n    const e = expectedFlat[i];\n    if (!predicate(a, e)) {\n      throw new Error(\"Arrays differ: actual[\".concat(i, \"] = \").concat(a, \", expected[\").concat(i, \"] = \").concat(e, \".\\n\") + \"Actual:   \".concat(actualFlat, \".\\n\") + \"Expected: \".concat(expectedFlat, \".\"));\n    }\n  }\n}\nexport function expectPromiseToFail(fn, done) {\n  fn().then(() => done.fail(), () => done());\n}\nexport function expectArraysEqual(actual, expected) {\n  const exp = typeof expected === 'string' || typeof expected === 'number' || typeof expected === 'boolean' ? [expected] : expected;\n  if (isString(actual) || isString(actual[0]) || isString(expected) || isString(expected[0])) {\n    // tslint:disable-next-line: triple-equals\n    return expectArraysPredicate(actual, exp, (a, b) => a == b);\n  }\n  return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, 0));\n}\nexport function expectNumbersClose(a, e, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  if (!areClose(a, e, epsilon)) {\n    throw new Error(\"Numbers differ: actual === \".concat(a, \", expected === \").concat(e));\n  }\n}\nfunction areClose(a, e, epsilon) {\n  if (!isFinite(a) && !isFinite(e)) {\n    return true;\n  }\n  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n    return false;\n  }\n  return true;\n}\nexport function expectValuesInRange(actual, low, high) {\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i] < low || actual[i] > high) {\n      throw new Error(\"Value out of range:\".concat(actual[i], \" low: \").concat(low, \", high: \").concat(high));\n    }\n  }\n}\nexport function expectArrayBuffersEqual(actual, expected) {\n  // Safari & Jasmine don't like comparing ArrayBuffers directly. Wrapping in\n  // a Float32Array solves this issue.\n  expect(new Float32Array(actual)).toEqual(new Float32Array(expected));\n}\n/** Encodes strings into utf-8 bytes. */\nexport function encodeStrings(a) {\n  for (let i = 0; i < a.length; i++) {\n    const val = a[i];\n    if (Array.isArray(val)) {\n      encodeStrings(val);\n    } else {\n      a[i] = encodeString(val);\n    }\n  }\n  return a;\n}","map":{"version":3,"names":["ENGINE","inferShape","arraysEqual","encodeString","flatten","isString","isTypedArray","TEST_EPSILON_FLOAT32","TEST_EPSILON_FLOAT16","expectArraysClose","actual","expected","epsilon","testEpsilon","expectArraysPredicate","a","b","areClose","backend","floatPrecision","predicate","checkClassType","aType","constructor","name","bType","Error","concat","Array","isArray","actualShape","expectedShape","actualFlat","expectedFlat","length","i","e","expectPromiseToFail","fn","done","then","fail","expectArraysEqual","exp","expectNumbersClose","isFinite","isNaN","Math","abs","expectValuesInRange","low","high","expectArrayBuffersEqual","expect","Float32Array","toEqual","encodeStrings","val"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-core\\src\\test_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from './engine';\nimport {inferShape} from './tensor_util_env';\nimport {RecursiveArray, TensorLike, TypedArray} from './types';\nimport {arraysEqual, encodeString, flatten, isString, isTypedArray} from './util';\n\nconst TEST_EPSILON_FLOAT32 = 1e-3;\nexport const TEST_EPSILON_FLOAT16 = 1e-1;\n\nexport function expectArraysClose(\n    actual: TypedArray|number|RecursiveArray<number>,\n    expected: TypedArray|number|RecursiveArray<number>, epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  return expectArraysPredicate(\n      actual, expected, (a, b) => areClose(a as number, b as number, epsilon));\n}\n\nexport function testEpsilon() {\n  return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 :\n                                                  TEST_EPSILON_FLOAT16;\n}\n\nfunction expectArraysPredicate(\n    actual: TensorLike, expected: TensorLike,\n    predicate: (a: {}, b: {}) => boolean) {\n  let checkClassType = true;\n  if (isTypedArray(actual) || isTypedArray(expected)) {\n    checkClassType = false;\n  }\n  if (isTypedArray(actual) && isTypedArray(expected)) {\n    checkClassType = true;\n  }\n  if (checkClassType) {\n    const aType = actual.constructor.name;\n    const bType = expected.constructor.name;\n\n    if (aType !== bType) {\n      throw new Error(\n          `Arrays are of different type. Actual: ${aType}. ` +\n          `Expected: ${bType}`);\n    }\n  }\n\n  if (Array.isArray(actual) && Array.isArray(expected)) {\n    const actualShape = inferShape(actual);\n    const expectedShape = inferShape(expected);\n    if (!arraysEqual(actualShape, expectedShape)) {\n      throw new Error(\n          `Arrays have different shapes. ` +\n          `Actual: [${actualShape}]. Expected: [${expectedShape}]`);\n    }\n  }\n\n  const actualFlat =\n      isTypedArray(actual) ? actual : flatten(actual as RecursiveArray<number>);\n  const expectedFlat = isTypedArray(expected) ?\n      expected :\n      flatten(expected as RecursiveArray<number>);\n\n  if (actualFlat.length !== expectedFlat.length) {\n    throw new Error(\n        `Arrays have different lengths actual: ${actualFlat.length} vs ` +\n        `expected: ${expectedFlat.length}.\\n` +\n        `Actual:   ${actualFlat}.\\n` +\n        `Expected: ${expectedFlat}.`);\n  }\n  for (let i = 0; i < expectedFlat.length; ++i) {\n    const a = actualFlat[i];\n    const e = expectedFlat[i];\n\n    if (!predicate(a, e)) {\n      throw new Error(\n          `Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\\n` +\n          `Actual:   ${actualFlat}.\\n` +\n          `Expected: ${expectedFlat}.`);\n    }\n  }\n}\n\nexport interface DoneFn {\n  (): void;\n  fail: (message?: Error|string) => void;\n}\n\nexport function expectPromiseToFail(fn: () => Promise<{}>, done: DoneFn): void {\n  fn().then(() => done.fail(), () => done());\n}\n\nexport function expectArraysEqual(actual: TensorLike, expected: TensorLike) {\n  const exp = typeof expected === 'string' || typeof expected === 'number' ||\n          typeof expected === 'boolean' ?\n      [expected] as number[] :\n      expected as number[];\n  if (isString(actual) || isString((actual as string[])[0]) ||\n      isString(expected) || isString((expected as string[])[0])) {\n    // tslint:disable-next-line: triple-equals\n    return expectArraysPredicate(actual, exp, (a, b) => a == b);\n  }\n  return expectArraysPredicate(\n      actual, expected, (a, b) => areClose(a as number, b as number, 0));\n}\n\nexport function expectNumbersClose(a: number, e: number, epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  if (!areClose(a, e, epsilon)) {\n    throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);\n  }\n}\n\nfunction areClose(a: number, e: number, epsilon: number): boolean {\n  if (!isFinite(a) && !isFinite(e)) {\n    return true;\n  }\n  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n    return false;\n  }\n  return true;\n}\n\nexport function expectValuesInRange(\n    actual: TypedArray|number[], low: number, high: number) {\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i] < low || actual[i] > high) {\n      throw new Error(\n          `Value out of range:${actual[i]} low: ${low}, high: ${high}`);\n    }\n  }\n}\n\nexport function expectArrayBuffersEqual(\n    actual: ArrayBuffer, expected: ArrayBuffer) {\n  // Safari & Jasmine don't like comparing ArrayBuffers directly. Wrapping in\n  // a Float32Array solves this issue.\n  expect(new Float32Array(actual)).toEqual(new Float32Array(expected));\n}\n\n/** Encodes strings into utf-8 bytes. */\nexport function encodeStrings(a: RecursiveArray<{}>):\n    RecursiveArray<Uint8Array> {\n  for (let i = 0; i < (a as Array<{}>).length; i++) {\n    const val = a[i];\n    if (Array.isArray(val)) {\n      encodeStrings(val);\n    } else {\n      a[i] = encodeString(val as string);\n    }\n  }\n  return a as RecursiveArray<Uint8Array>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}