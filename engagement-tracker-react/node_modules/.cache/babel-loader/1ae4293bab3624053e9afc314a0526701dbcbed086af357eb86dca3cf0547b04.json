{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from './tensor_utils';\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\nexport class TensorList {\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(tensors, elementShape, elementDtype) {\n    let maxNumElements = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    this.tensors = tensors;\n    this.elementShape = elementShape;\n    this.elementDtype = elementDtype;\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(tensor.dtype));\n        }\n        assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n  copy() {\n    return new TensorList([...this.tensors], this.elementShape, this.elementDtype);\n  }\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n  clearAndClose(keepIds) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n  size() {\n    return this.tensors.length;\n  }\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n  stack(elementShape, elementDtype) {\n    let numElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(this.elementDtype));\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(\"Operation expected a list with \".concat(numElements, \" elements but got a list with \").concat(this.tensors.length, \" elements.\"));\n    }\n    assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    return tidy(() => {\n      const reshapedTensors = this.tensors.map(tensor => reshape(tensor, elementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n  popBack(elementShape, elementDtype) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(this.elementDtype));\n    }\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n    const tensor = this.tensors.pop();\n    assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n    return reshape(tensor, elementShape);\n  }\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n  pushBack(tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(\"Invalid data types; op elements \".concat(tensor.dtype, \", but list elements \").concat(this.elementDtype));\n    }\n    assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n    if (this.maxNumElements === this.size()) {\n      throw new Error(\"Trying to push element into a full list.\");\n    }\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n  resize(size) {\n    if (size < 0) {\n      throw new Error(\"TensorListResize expects size to be non-negative. Got: \".concat(size));\n    }\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(\"TensorListResize input size \".concat(size, \" is greater maxNumElement \").concat(this.maxNumElements, \".\"));\n    }\n    this.tensors.length = size;\n  }\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n  getItem(elementIndex, elementShape, elementDtype) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(this.elementDtype));\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(\"Trying to access element \".concat(elementIndex, \" in a list with \").concat(this.tensors.length, \" elements.\"));\n    }\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(\"element at index \".concat(elementIndex, \" is null.\"));\n    }\n    assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n    return this.tensors[elementIndex];\n  }\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n  setItem(elementIndex, tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(\"Invalid data types; op elements \".concat(tensor.dtype, \", but list elements \").concat(this.elementDtype));\n    }\n    if (elementIndex < 0 || this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(\"Trying to set element \".concat(elementIndex, \" in a list with max \").concat(this.maxNumElements, \" elements.\"));\n    }\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n    this.tensors[elementIndex] = tensor;\n  }\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  gather(indices, elementDtype, elementShape) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(\"Invalid data types; op elements \".concat(elementDtype, \", but list elements \").concat(this.elementDtype));\n    }\n    assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n    indices = indices.slice(0, this.size());\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n    return tidy(() => {\n      const tensors = indices.map(i => reshape(this.tensors[i], elementShape));\n      return stack(tensors, 0);\n    });\n  }\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  concat(elementDtype, elementShape) {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(\"TensorList dtype is \".concat(this.elementDtype, \" but concat requested dtype \").concat(elementDtype));\n    }\n    assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, elementShape));\n      return concat(tensors, 0);\n    });\n  }\n}\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(tensor, elementShape, elementDtype) {\n  const dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(\"Tensor must be at least a vector, but saw shape: \".concat(tensor.shape));\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(\"Invalid data types; op elements \".concat(tensor.dtype, \", but list elements \").concat(elementDtype));\n  }\n  const outputShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(outputShape, elementShape, 'TensorList shape mismatch: ');\n  const tensorList = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\nexport function reserve(elementShape, elementDtype, numElements) {\n  return new TensorList([], elementShape, elementDtype, numElements);\n}\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(tensor, indices, elementShape, numElements) {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(\"Expected len(indices) == tensor.shape[0], but saw: \".concat(indices.length, \" vs. \").concat(tensor.shape[0]));\n  }\n  const maxIndex = Math.max(...indices);\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\"Max index must be < array size (\".concat(maxIndex, \"  vs. \").concat(numElements, \")\"));\n  }\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(tensor, length, elementShape) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(\"Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        \".concat(totalLength, \", and tensor's shape is: \").concat(tensor.shape));\n  }\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(slice(tensor, indices, sizes), elementShape);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}","map":{"version":3,"names":["concat","keep","reshape","scalar","slice","stack","tensor","tidy","unstack","assertShapesMatchAllowUndefinedSize","TensorList","constructor","tensors","elementShape","elementDtype","maxNumElements","arguments","length","undefined","forEach","dtype","Error","shape","idTensor","id","copy","clearAndClose","keepIds","has","dispose","size","numElements","reshapedTensors","map","popBack","pop","pushBack","push","resize","getItem","elementIndex","setItem","gather","indices","i","t","fromTensor","outputShape","tensorList","reserve","scatter","maxIndex","Math","max","list","value","index","split","totalLength","cumulativeLengths","len","elementPerRow","previousLength","sizes"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-converter\\src\\executor\\tensor_list.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport class TensorList {\n  readonly idTensor: Tensor;\n  maxNumElements: number;\n\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(\n      readonly tensors: Tensor[], readonly elementShape: number[],\n      readonly elementDtype: DataType, maxNumElements = -1) {\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${\n              elementDtype}, but list elements ${tensor.dtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(\n            elementShape, tensor.shape, 'TensorList shape mismatch: ');\n\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n  copy(): TensorList {\n    return new TensorList(\n        [...this.tensors], this.elementShape, this.elementDtype);\n  }\n\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n  size() {\n    return this.tensors.length;\n  }\n\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n  stack(elementShape: number[], elementDtype: DataType, numElements = -1):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${\n          numElements} elements but got a list with ${\n          this.tensors.length} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(\n        elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    return tidy(() => {\n      const reshapedTensors =\n          this.tensors.map(tensor => reshape(tensor, elementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n  popBack(elementShape: number[], elementDtype: DataType): Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n\n    const tensor = this.tensors.pop();\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, elementShape, 'TensorList shape mismatch: ');\n    return reshape(tensor, elementShape);\n  }\n\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n  pushBack(tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n  resize(size: number) {\n    if (size < 0) {\n      throw new Error(\n          `TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${\n          size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n    this.tensors.length = size;\n  }\n\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n  getItem(elementIndex: number, elementShape: number[], elementDtype: DataType):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${\n          elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.tensors[elementIndex].shape, elementShape,\n        'TensorList shape mismatch: ');\n\n    return this.tensors[elementIndex];\n  }\n\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n  setItem(elementIndex: number, tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 ||\n        this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${\n          elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n    this.tensors[elementIndex] = tensor;\n  }\n\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  gather(indices: number[], elementDtype: DataType, elementShape: number[]):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n    indices = indices.slice(0, this.size());\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    return tidy(() => {\n      const tensors = indices.map(i => reshape(this.tensors[i], elementShape));\n      return stack(tensors, 0);\n    });\n  }\n\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  concat(elementDtype: DataType, elementShape: number[]): Tensor {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${\n          this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, elementShape));\n      return concat(tensors, 0);\n    });\n  }\n}\n\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(\n    tensor: Tensor, elementShape: number[], elementDtype: DataType) {\n  const dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(\n        `Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${\n        tensor.dtype}, but list elements ${elementDtype}`);\n  }\n  const outputShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(\n      outputShape, elementShape, 'TensorList shape mismatch: ');\n\n  const tensorList: Tensor[] = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\nexport function reserve(\n    elementShape: number[], elementDtype: DataType, numElements: number) {\n  return new TensorList([], elementShape, elementDtype, numElements);\n}\n\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(\n    tensor: Tensor, indices: number[], elementShape: number[],\n    numElements?: number): TensorList {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n        indices.length} vs. ${tensor.shape[0]}`);\n  }\n\n  const maxIndex = Math.max(...indices);\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\n        `Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(\n    tensor: Tensor, length: number[], elementShape: number[]) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors: Tensor[] = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(slice(tensor, indices, sizes), elementShape);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}