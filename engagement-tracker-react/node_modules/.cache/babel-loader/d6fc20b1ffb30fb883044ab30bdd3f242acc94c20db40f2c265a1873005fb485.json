{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport class DepthwiseConvPacked2DProgram {\n  constructor(convInfo) {\n    let addBias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let activation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let hasPreluActivation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let hasLeakyReluAlpha = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    this.variableNames = ['x', 'W'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = convInfo.outShape;\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n    let mainLoop = \"int xR; int xC; int xCOffset;\";\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += \"\\n          vec4 xTexelR\".concat(r, \"C\").concat(c * 2, \" = vec4(0.);\\n          vec4 wR\").concat(r, \"C\").concat(c, \" = vec4(0.);\\n          vec4 xR\").concat(r, \"C\").concat(c, \" = vec4(0.);\");\n      }\n    }\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    for (let r = 0; r < filterHeight; r++) {\n      for (let texelC = 0; texelC < texelsAcross; texelC++) {\n        const c = texelC * 2;\n        mainLoop += \"\\n          xR = xRCorner + \".concat(r * dilationHeight, \";\\n          xC = xCCorner + \").concat(c * dilationWidth, \";\\n        \");\n        if (strideWidth === 1) {\n          if (c < filterWidth) {\n            // If padding is odd, the outer texels have to be composed.\n            if (padLeft % 2 === 1) {\n              // TODO: Ensure vec4 previous does not result in redundant sample,\n              // and avoid setting xTexelRC's that exceed the boundary in the\n              // first place rather than resetting them to vec4(0)).\n              // To compute xCOffset:\n              // - If padding is odd, we must add 1 to ensure we ask for an\n              // even-numbered row.\n              // - We subtract 2 to access the previous texel.\n              mainLoop += \"\\n                xCOffset = xC + 1;\\n                if(xR >= 0 && xR < \".concat(xNumRows, \" && xCOffset >= 0 && xCOffset < \").concat(xNumCols, \") {\\n                  xTexelR\").concat(r, \"C\").concat(c, \" = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \").concat(xNumCols, \") {\\n                    xTexelR\").concat(r, \"C\").concat(c, \".zw = vec2(0.);\\n                  }\\n                } else {\\n                  xTexelR\").concat(r, \"C\").concat(c, \" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + 1 - 2;\\n                if(xR >= 0 && xR < \").concat(xNumRows, \" && xCOffset >= 0 && xCOffset < \").concat(xNumCols, \") {\\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \").concat(xNumCols, \") {\\n                    previous.zw = vec2(0.);\\n                  }\\n\\n                  xR\").concat(r, \"C\").concat(c, \" = vec4(previous.zw, xTexelR\").concat(r, \"C\").concat(c, \".xy);\\n                } else {\\n                  xR\").concat(r, \"C\").concat(c, \" = vec4(0, 0, xTexelR\").concat(r, \"C\").concat(c, \".xy);\\n                }\\n              \");\n            } else {\n              // Padding is even, so xRC corresponds to a single texel.\n              mainLoop += \"\\n                if(xR >= 0 && xR < \".concat(xNumRows, \" && xC >= 0 && xC < \").concat(xNumCols, \") {\\n                  xTexelR\").concat(r, \"C\").concat(c, \" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\").concat(r, \"C\").concat(c, \" = vec4(0.);\\n                }\\n\\n                xR\").concat(r, \"C\").concat(c, \" = xTexelR\").concat(r, \"C\").concat(c, \";\\n              \");\n            }\n            if (c + 1 < filterWidth) {\n              // If dilation is even, the second entry should match the first\n              // (either both are composed or both are single samples). But if\n              // dilation is odd, then the second entry should be the opposite\n              // of the first (if the first is composed, the second is a single\n              // sample, and vice versa.)\n              const nextTexelOffset = padLeft % 2 === 0 ? util.nearestLargerEven(dilationWidth) : dilationWidth;\n              if (dilationWidth % 2 === 0 && padLeft % 2 === 1 || dilationWidth % 2 !== 0 && padLeft % 2 !== 1) {\n                mainLoop += \"\\n                  xCOffset = xC + \".concat(padLeft % 2, \" + \").concat(nextTexelOffset, \";\\n\\n                  if(xR >= 0 && xR < \").concat(xNumRows, \" &&\\n                    xCOffset >= 0 && xCOffset < \").concat(xNumCols, \") {\\n                    xTexelR\").concat(r, \"C\").concat(c + 2, \" = getX(batch, xR, xCOffset, d1);\\n                  }\\n                \");\n                // If dilation > 1 then the xRC's will not be able to share any\n                // values, so each xRC will require two unique calls to getX.\n                if (dilationWidth > 1) {\n                  mainLoop += \"\\n                    xCOffset -= 2;\\n                    if(xR >= 0 && xR < \".concat(xNumRows, \" &&\\n                      xCOffset >= 0 && xCOffset < \").concat(xNumCols, \") {\\n                      xTexelR\").concat(r, \"C\").concat(c, \" = getX(batch, xR, xCOffset, d1);\\n                    } else {\\n                      xTexelR\").concat(r, \"C\").concat(c, \" = vec4(0.);\\n                    }\\n                  \");\n                }\n                mainLoop += \"\\n                  xR\".concat(r, \"C\").concat(c + 1, \" = vec4(\\n                    xTexelR\").concat(r, \"C\").concat(c, \".zw, xTexelR\").concat(r, \"C\").concat(c + 2, \".xy);\\n                \");\n              } else {\n                mainLoop += \"\\n                  xCOffset = xC + \".concat(nextTexelOffset, \";\\n\\n                  if(xR >= 0 && xR < \").concat(xNumRows, \" &&\\n                    xCOffset >= 0 && xCOffset < \").concat(xNumCols, \") {\\n                    xTexelR\").concat(r, \"C\").concat(c + 2, \" = getX(batch, xR, xCOffset, d1);\\n                  }\\n\\n                  xR\").concat(r, \"C\").concat(c + 1, \" = xTexelR\").concat(r, \"C\").concat(c + 2, \";\\n                \");\n              }\n            }\n          }\n        } else {\n          // stride > 1\n          if (c < filterWidth) {\n            mainLoop += \"\\n              if(xR >= 0 && xR < \".concat(xNumRows, \") {\\n            \");\n            // Depending on whether padLeft is even or odd, we want either the\n            // xy or zw channels from X texels for xR${r}C${c}. If padLeft is\n            // even, xR${r}C${c + 1} is simply the zw channels of texels we've\n            // already sampled. But if padLeft is odd, xR${r}C{$c + 1}.zw will\n            // need to come from the xy channels of a new texel, hence the `vec4\n            // final` initialized below.\n            if (padLeft % 2 === 1) {\n              mainLoop += \"\\n                xCOffset = xC + 1 - \".concat(strideWidth, \";\\n                if(xCOffset >= 0 && xCOffset < \").concat(xNumCols, \") {\\n                  xTexelR\").concat(r, \"C\").concat(c, \" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\").concat(r, \"C\").concat(c, \" = vec4(0.);\\n                }\\n\\n                if(xC + 1 >= 0 && xC + 1 < \").concat(xNumCols, \") {\\n                  xTexelR\").concat(r, \"C\").concat(c + 2, \" = getX(batch, xR, xC + 1, d1);\\n                } else {\\n                  xTexelR\").concat(r, \"C\").concat(c + 2, \" = vec4(0.);\\n                }\\n\\n                xR\").concat(r, \"C\").concat(c, \" = vec4(\\n                  xTexelR\").concat(r, \"C\").concat(c, \".zw, xTexelR\").concat(r, \"C\").concat(c + 2, \".zw);\\n              \");\n              if (c + 1 < filterWidth) {\n                mainLoop += \"\\n                  vec4 final = vec4(0.);\\n                  xCOffset = xC + 1 + \".concat(strideWidth, \";\\n                  if(xCOffset >= 0 && xCOffset < \").concat(xNumCols, \") {\\n                    final = getX(batch, xR, xCOffset, d1);\\n                  }\\n                  xR\").concat(r, \"C\").concat(c + 1, \" = vec4(xTexelR\").concat(r, \"C\").concat(c + 2, \".xy, final.xy);\\n                \");\n              }\n            } else {\n              mainLoop += \"\\n                if(xC >= 0 && xC < \".concat(xNumCols, \") {\\n                  xTexelR\").concat(r, \"C\").concat(c, \" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\").concat(r, \"C\").concat(c, \" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + \").concat(strideWidth, \";\\n                if(xCOffset >= 0 && xCOffset < \").concat(xNumCols, \") {\\n                  xTexelR\").concat(r, \"C\").concat(c + 2, \" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\").concat(r, \"C\").concat(c + 2, \" = vec4(0.);\\n                }\\n\\n                xR\").concat(r, \"C\").concat(c, \" = vec4(\\n                  xTexelR\").concat(r, \"C\").concat(c, \".xy, xTexelR\").concat(r, \"C\").concat(c + 2, \".xy);\\n              \");\n              if (c + 1 < filterWidth) {\n                mainLoop += \"\\n                  xR\".concat(r, \"C\").concat(c + 1, \" = vec4(\\n                    xTexelR\").concat(r, \"C\").concat(c, \".zw, xTexelR\").concat(r, \"C\").concat(c + 2, \".zw);\\n                \");\n              }\n            }\n            mainLoop += \"}\";\n          }\n        }\n        if (c < filterWidth) {\n          mainLoop += \"\\n            vec4 wTexelR\".concat(r, \"C\").concat(c, \" = getW(\").concat(r, \", \").concat(c, \", d1, q);\\n            wR\").concat(r, \"C\").concat(c, \" = vec4(wTexelR\").concat(r, \"C\").concat(c, \".xz, wTexelR\").concat(r, \"C\").concat(c, \".xz);\\n          \");\n          if (c + 1 < filterWidth) {\n            mainLoop += \"\\n              vec4 wTexelR\".concat(r, \"C\").concat(c + 1, \" = getW(\").concat(r, \", \").concat(c + 1, \", d1, q);\\n              wR\").concat(r, \"C\").concat(c + 1, \" =\\n                vec4(wTexelR\").concat(r, \"C\").concat(c + 1, \".xz, wTexelR\").concat(r, \"C\").concat(c + 1, \".xz);\");\n          }\n        }\n      }\n    }\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += \"dotProd += xR\".concat(r, \"C\").concat(c, \" * wR\").concat(r, \"C\").concat(c, \";\");\n      }\n    }\n    let activationSnippet = '',\n      applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = \"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \".concat(activation, \"\\n        }\");\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = \"vec4 activation(vec4 a) {\\n          vec4 b = getLeakyreluAlphaAtOutCoords();\\n          \".concat(activation, \"\\n        }\");\n      } else {\n        activationSnippet = \"vec4 activation(vec4 x) {\\n          \".concat(activation, \"\\n        }\");\n      }\n      applyActivationSnippet = \"result = activation(result);\";\n    }\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n    this.userCode = \"\\n      \".concat(activationSnippet, \"\\n\\n      const ivec2 strides = ivec2(\").concat(strideHeight, \", \").concat(strideWidth, \");\\n      const ivec2 pads = ivec2(\").concat(padTop, \", \").concat(padLeft, \");\\n\\n      void main() {\\n\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2;\\n        int q = 0;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        vec4 dotProd = vec4(0.);\\n\\n        \").concat(mainLoop, \"\\n\\n        vec4 result = dotProd;\\n        \").concat(addBiasSnippet, \"\\n        \").concat(applyActivationSnippet, \"\\n        setOutput(result);\\n      }\\n    \");\n  }\n}","map":{"version":3,"names":["util","DepthwiseConvPacked2DProgram","constructor","convInfo","addBias","arguments","length","undefined","activation","hasPreluActivation","hasLeakyReluAlpha","variableNames","packedInputs","packedOutput","outputShape","outShape","xNumRows","inHeight","xNumCols","inWidth","padTop","padInfo","top","padLeft","left","strideHeight","strideWidth","dilationHeight","dilationWidth","filterHeight","filterWidth","texelsAcross","mainLoop","r","c","concat","texelC","nextTexelOffset","nearestLargerEven","activationSnippet","applyActivationSnippet","addBiasSnippet","push","userCode"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\conv_packed_gpu_depthwise.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n\n    const xNumRows = convInfo.inHeight;\n    const xNumCols = convInfo.inWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `int xR; int xC; int xCOffset;`;\n\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `\n          vec4 xTexelR${r}C${c * 2} = vec4(0.);\n          vec4 wR${r}C${c} = vec4(0.);\n          vec4 xR${r}C${c} = vec4(0.);`;\n      }\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    for (let r = 0; r < filterHeight; r++) {\n      for (let texelC = 0; texelC < texelsAcross; texelC++) {\n        const c = texelC * 2;\n\n        mainLoop += `\n          xR = xRCorner + ${r * dilationHeight};\n          xC = xCCorner + ${c * dilationWidth};\n        `;\n\n        if (strideWidth === 1) {\n          if (c < filterWidth) {\n            // If padding is odd, the outer texels have to be composed.\n            if (padLeft % 2 === 1) {\n              // TODO: Ensure vec4 previous does not result in redundant sample,\n              // and avoid setting xTexelRC's that exceed the boundary in the\n              // first place rather than resetting them to vec4(0)).\n\n              // To compute xCOffset:\n              // - If padding is odd, we must add 1 to ensure we ask for an\n              // even-numbered row.\n              // - We subtract 2 to access the previous texel.\n\n              mainLoop += `\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${\n                  xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${xNumCols}) {\n                    xTexelR${r}C${c}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${xNumRows} && xCOffset >= 0 && xCOffset < ${\n                  xNumCols}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${xNumCols}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${r}C${c} = vec4(previous.zw, xTexelR${r}C${c}.xy);\n                } else {\n                  xR${r}C${c} = vec4(0, 0, xTexelR${r}C${c}.xy);\n                }\n              `;\n            } else {\n              // Padding is even, so xRC corresponds to a single texel.\n              mainLoop += `\n                if(xR >= 0 && xR < ${xNumRows} && xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xR${r}C${c} = xTexelR${r}C${c};\n              `;\n            }\n\n            if (c + 1 < filterWidth) {\n              // If dilation is even, the second entry should match the first\n              // (either both are composed or both are single samples). But if\n              // dilation is odd, then the second entry should be the opposite\n              // of the first (if the first is composed, the second is a single\n              // sample, and vice versa.)\n\n              const nextTexelOffset = padLeft % 2 === 0 ?\n                  util.nearestLargerEven(dilationWidth) :\n                  dilationWidth;\n\n              if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                  (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n                mainLoop += `\n                  xCOffset = xC + ${padLeft % 2} + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `;\n\n                // If dilation > 1 then the xRC's will not be able to share any\n                // values, so each xRC will require two unique calls to getX.\n                if (dilationWidth > 1) {\n                  mainLoop += `\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${xNumRows} &&\n                      xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                      xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${r}C${c} = vec4(0.);\n                    }\n                  `;\n                }\n\n                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.xy);\n                `;\n              } else {\n                mainLoop += `\n                  xCOffset = xC + ${nextTexelOffset};\n\n                  if(xR >= 0 && xR < ${xNumRows} &&\n                    xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${r}C${c + 1} = xTexelR${r}C${c + 2};\n                `;\n              }\n            }\n          }\n        } else {  // stride > 1\n          if (c < filterWidth) {\n            mainLoop += `\n              if(xR >= 0 && xR < ${xNumRows}) {\n            `;\n\n            // Depending on whether padLeft is even or odd, we want either the\n            // xy or zw channels from X texels for xR${r}C${c}. If padLeft is\n            // even, xR${r}C${c + 1} is simply the zw channels of texels we've\n            // already sampled. But if padLeft is odd, xR${r}C{$c + 1}.zw will\n            // need to come from the xy channels of a new texel, hence the `vec4\n            // final` initialized below.\n            if (padLeft % 2 === 1) {\n              mainLoop += `\n                xCOffset = xC + 1 - ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${strideWidth};\n                  if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${r}C${c + 1} = vec4(xTexelR${r}C${c + 2}.xy, final.xy);\n                `;\n              }\n            } else {\n              mainLoop += `\n                if(xC >= 0 && xC < ${xNumCols}) {\n                  xTexelR${r}C${c} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${r}C${c} = vec4(0.);\n                }\n\n                xCOffset = xC + ${strideWidth};\n                if(xCOffset >= 0 && xCOffset < ${xNumCols}) {\n                  xTexelR${r}C${c + 2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${r}C${c + 2} = vec4(0.);\n                }\n\n                xR${r}C${c} = vec4(\n                  xTexelR${r}C${c}.xy, xTexelR${r}C${c + 2}.xy);\n              `;\n\n              if (c + 1 < filterWidth) {\n                mainLoop += `\n                  xR${r}C${c + 1} = vec4(\n                    xTexelR${r}C${c}.zw, xTexelR${r}C${c + 2}.zw);\n                `;\n              }\n            }\n\n            mainLoop += `}`;\n          }\n        }\n\n        if (c < filterWidth) {\n          mainLoop += `\n            vec4 wTexelR${r}C${c} = getW(${r}, ${c}, d1, q);\n            wR${r}C${c} = vec4(wTexelR${r}C${c}.xz, wTexelR${r}C${c}.xz);\n          `;\n\n          if (c + 1 < filterWidth) {\n            mainLoop += `\n              vec4 wTexelR${r}C${c + 1} = getW(${r}, ${c + 1}, d1, q);\n              wR${r}C${c + 1} =\n                vec4(wTexelR${r}C${c + 1}.xz, wTexelR${r}C${c + 1}.xz);`;\n          }\n        }\n      }\n    }\n\n    for (let r = 0; r < filterHeight; r++) {\n      for (let c = 0; c < filterWidth; c++) {\n        mainLoop += `dotProd += xR${r}C${c} * wR${r}C${c};`;\n      }\n    }\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${mainLoop}\n\n        vec4 result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}