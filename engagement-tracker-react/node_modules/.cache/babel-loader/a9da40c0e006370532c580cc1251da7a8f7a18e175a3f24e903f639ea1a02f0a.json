{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { deprecationWarn } from '../globals';\nimport { MaxPool3D } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the 3D max pooling.\n *\n * ```js\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\n * const result = tf.maxPool3d(x, 2, 1, 'valid');\n * result.print();\n * ```\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     `[batch, depth, height, width, inChannels]`.\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     If `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideDepth == strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations Deprecated, this field will be gone in v3.0.0.\n *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction maxPool3d_(x) {\n  let filterSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [1, 1, 1];\n  let strides = arguments.length > 2 ? arguments[2] : undefined;\n  let pad = arguments.length > 3 ? arguments[3] : undefined;\n  let dimRoundingMode = arguments.length > 4 ? arguments[4] : undefined;\n  let dataFormat = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'NDHWC';\n  let dilations = arguments.length > 6 ? arguments[6] : undefined;\n  if (dilations == null) {\n    dilations = [1, 1, 1];\n  } else {\n    deprecationWarn('dilations is deprecated, this field will be gone in ' + 'v3.0.0.');\n  }\n  const $x = convertToTensor(x, 'x', 'maxPool3d');\n  let x5D = $x;\n  let reshapedTo5D = false;\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n  util.assert(x5D.rank === 5, () => \"Error in maxPool3d: x must be rank 5 but got rank \".concat(x5D.rank, \".\"));\n  util.assert(dataFormat === 'NDHWC', () => \"Error in maxPool3d: Only NDHWC is currently supported, \" + \"but got dataFormat of \".concat(dataFormat));\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool3d: Either strides or dilations must be 1. ' + \"Got strides \".concat(strides, \" and dilations '\").concat(dilations, \"'\"));\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), () => \"Error in maxPool3d: pad must be an integer when using, \" + \"dimRoundingMode \".concat(dimRoundingMode, \" but got pad \").concat(pad, \".\"));\n  }\n  const inputs = {\n    x: x5D\n  };\n  const attrs = {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode,\n    dataFormat,\n    dilations\n  };\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(MaxPool3D, inputs, attrs);\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n  return res;\n}\nexport const maxPool3d = op({\n  maxPool3d_\n});","map":{"version":3,"names":["ENGINE","deprecationWarn","MaxPool3D","convertToTensor","util","conv_util","op","reshape","maxPool3d_","x","filterSize","arguments","length","undefined","strides","pad","dimRoundingMode","dataFormat","dilations","$x","x5D","reshapedTo5D","rank","shape","assert","concat","eitherStridesOrDilationsAreOne","isInt","inputs","attrs","res","runKernel","maxPool3d"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\max_pool_3d.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {deprecationWarn} from '../globals';\nimport {MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the 3D max pooling.\n *\n * ```js\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\n * const result = tf.maxPool3d(x, 2, 1, 'valid');\n * result.print();\n * ```\n *\n * @param x The input tensor, of rank 5 or rank 4 of shape\n *     `[batch, depth, height, width, inChannels]`.\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     If `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideDepth == strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations Deprecated, this field will be gone in v3.0.0.\n *     The dilation rates: `[dilationDepth, dilationHeight, dilationWidth]`\n *     in which we sample input values across the depth, height and width\n *     dimensions in dilated pooling.\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\n *     then `dilationDepth == dilationHeight == dilationWidth`.\n *     If it is greater than 1, then all values of `strides` must be 1.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction maxPool3d_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike, filterSize: [number, number, number]|number = [1, 1, 1],\n    strides: [number, number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC',\n    dilations?: [number, number, number]|number): T {\n  if (dilations == null) {\n    dilations = [1, 1, 1];\n  } else {\n    deprecationWarn(\n        'dilations is deprecated, this field will be gone in ' +\n        'v3.0.0.');\n  }\n\n  const $x = convertToTensor(x, 'x', 'maxPool3d');\n\n  let x5D = $x as Tensor5D;\n  let reshapedTo5D = false;\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in maxPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\n  util.assert(\n      dataFormat === 'NDHWC',\n      () => `Error in maxPool3d: Only NDHWC is currently supported, ` +\n          `but got dataFormat of ${dataFormat}`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool3d: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in maxPool3d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const inputs: MaxPool3DInputs = {x: x5D};\n\n  const attrs: MaxPool3DAttrs =\n      {filterSize, strides, pad, dimRoundingMode, dataFormat, dilations};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  MaxPool3D, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo5D) {\n    return reshape(\n               res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]) as\n        T;\n  }\n\n  return res;\n}\n\nexport const maxPool3d = op({maxPool3d_});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}