{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ArgMinMaxPackedProgram {\n  constructor(shape, windowSize, op, firstPass) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    util.assert(shape.length > 2, () => \"Packed arg\".concat(op.charAt(0).toUpperCase() + op.slice(1), \" supports only inputs with rank above 2.\"));\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = \"\\n        \".concat(sourceLocDType, \" sourceLocR = \").concat(sourceLocDType, \"(\").concat(coords.join(), \", 0);\\n        ++\").concat(coords[rank - 1], \";\\n        \").concat(sourceLocDType, \" sourceLocG = \").concat(sourceLocDType, \"(\").concat(coords.join(), \", 0);\\n        ++\").concat(coords[rank - 2], \";\\n        \").concat(sourceLocDType, \" sourceLocA = \").concat(sourceLocDType, \"(\").concat(coords.join(), \", 0);\\n        --\").concat(coords[rank - 1], \";\\n        \").concat(sourceLocDType, \" sourceLocB = \").concat(sourceLocDType, \"(\").concat(coords.join(), \", 0);\\n        --\").concat(coords[rank - 2], \";\");\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = \"\\n        \".concat(dtype, \" sourceLocR = coords;\\n        ++\").concat(coords[rank - 1], \";\\n        \").concat(dtype, \" sourceLocG = coords;\\n        ++\").concat(coords[rank - 2], \";\\n        \").concat(dtype, \" sourceLocA = coords;\\n        --\").concat(coords[rank - 1], \";\\n        \").concat(dtype, \" sourceLocB = coords;\\n        --\").concat(coords[rank - 2], \";\");\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n    const compOp = op === 'max' ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : \"\\n          inIdx = round(vec4(getBestIndicesAChannel(\".concat(srcRCoords.join(), \"),\\n                             getBestIndicesAChannel(\").concat(srcGCoords.join(), \"),\\n                             getBestIndicesAChannel(\").concat(srcBCoords.join(), \"),\\n                             getBestIndicesAChannel(\").concat(srcACoords.join(), \")));\");\n    const fetchValue = \"vec4(\\n            getAChannel(\".concat(srcRCoords.join(), \"),\\n            hasNextCol ? getAChannel(\").concat(srcGCoords.join(), \") : 0.,\\n            hasNextRow ? getAChannel(\").concat(srcBCoords.join(), \") : 0.,\\n            hasNextRow && hasNextCol ? getAChannel(\").concat(srcACoords.join(), \") : 0.)\");\n    const getBestIndicesAChannelSnippet = firstPass ? '' : \"\\n      float getBestIndicesAChannel(\".concat(intChannels.join(), \") {\\n        return getChannel(getBestIndicesA(\").concat(channels.join(), \"),\\n                                          vec2(\").concat(channels.slice(-2).join(), \"));\\n      }\");\n    this.userCode = \"\\n      float getAChannel(\".concat(intChannels.join(), \") {\\n        return getChannel(getA(\").concat(channels.join(), \"),\\n                               vec2(\").concat(channels.slice(-2).join(), \"));\\n      }\\n      \").concat(getBestIndicesAChannelSnippet, \"\\n      void main() {\\n        \").concat(dtype, \" coords = getOutputCoords();\\n        bool hasNextCol = \").concat(coords[rank - 1], \" < \").concat(outShape[rank - 1] - 1, \";\\n        bool hasNextRow = \").concat(coords[rank - 2], \" < \").concat(outShape[rank - 2] - 1, \";\\n        \").concat(sourceLocSetup, \"\\n        ivec4 srcIdx = ivec4(sourceLocR\").concat(inChannel, \", sourceLocG\").concat(inChannel, \",\\n          sourceLocB\").concat(inChannel, \", sourceLocA\").concat(inChannel, \") * \").concat(windowSize, \";\\n        ivec4 inIdx = srcIdx;\\n        vec4 bestIndex = vec4(inIdx);\\n        vec4 bestValue = \").concat(fetchValue, \";\\n\\n        for (int i = 0; i < \").concat(windowSize, \"; i++) {\\n          inIdx = srcIdx;\\n          \").concat(fetchCandidateIdx, \"\\n          vec4 candidate = \").concat(fetchValue, \";\\n          bvec4 nan = isnan(candidate);\\n          bvec4 replace = bvec4(\\n            vec4(\").concat(compOp, \"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\\n\\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\\n                           replace.y  ? candidate.y : bestValue.y,\\n                           replace.z  ? candidate.z : bestValue.z,\\n                           replace.w  ? candidate.w : bestValue.w);\\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\\n          srcIdx++;\\n        }\\n        setOutput(bestIndex);\\n      }\\n    \");\n  }\n}","map":{"version":3,"names":["util","getChannels","getCoordsDataType","ArgMinMaxPackedProgram","constructor","shape","windowSize","op","firstPass","variableNames","packedInputs","packedOutput","assert","length","concat","charAt","toUpperCase","slice","inSize","outSize","Math","ceil","outputShape","push","outShape","rank","dtype","coords","sourceLocSetup","sourceRank","sourceLocDType","join","channels","inChannel","intChannels","map","x","srcRCoords","srcGCoords","srcBCoords","srcACoords","compOp","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","userCode"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\argminmax_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}