{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport * as tensorflow from '../data/compiled_api';\nimport { getRegisteredOp } from './custom_op/register';\nimport { getNodeNameAndIndex } from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nexport class OperationMapper {\n  // Singleton instance for the mapper\n  static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n  // Loads the op mapping from the JSON file.\n  constructor() {\n    const ops = [arithmetic, basicMath, control, convolution, creation, dynamic, evaluation, logical, image, graph, matrices, normalization, reduction, sliceJoin, spectral, transformation, hashTable];\n    const mappersJson = [].concat(...ops.map(op => op.json));\n    this.opMappers = mappersJson.reduce((map, mapper) => {\n      map[mapper.tfOpName] = mapper;\n      return map;\n    }, {});\n  }\n  // Converts the model inference graph from Tensorflow GraphDef to local\n  // representation for TensorFlow.js API\n  transformGraph(graph, signature = {}) {\n    const tfNodes = graph.node;\n    const placeholders = [];\n    const weights = [];\n    const initNodes = [];\n    const nodes = tfNodes.reduce((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      } else if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      } else if (node.input == null || node.input.length === 0) {\n        initNodes.push(map[node.name]);\n      }\n      return map;\n    }, {});\n    let inputs = [];\n    const outputs = [];\n    let inputNodeNameToKey = {};\n    let outputNodeNameToKey = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n    let functions = {};\n    if (graph.library != null && graph.library.function != null) {\n      functions = graph.library.function.reduce((functions, func) => {\n        functions[func.signature.name] = this.mapFunction(func);\n        return functions;\n      }, {});\n    }\n    const result = {\n      nodes,\n      inputs,\n      outputs,\n      weights,\n      placeholders,\n      signature,\n      functions\n    };\n    if (initNodes.length > 0) {\n      result.initNodes = initNodes;\n    }\n    return result;\n  }\n  mapSignatureEntries(entries) {\n    return Object.keys(entries || {}).reduce((prev, curr) => {\n      prev[entries[curr].name] = curr;\n      return prev;\n    }, {});\n  }\n  mapNode(node) {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper = getRegisteredOp(node.op) || this.opMappers[node.op] || {};\n    if (node.attr == null) {\n      node.attr = {};\n    }\n    const newNode = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames: (node.input || []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr\n    };\n    if (mapper.inputs != null) {\n      newNode.inputParams = mapper.inputs.reduce((map, param) => {\n        map[param.name] = {\n          type: param.type,\n          inputIndexStart: param.start,\n          inputIndexEnd: param.end\n        };\n        return map;\n      }, {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams = mapper.attrs.reduce((map, param) => {\n        const type = param.type;\n        let value = undefined;\n        switch (param.type) {\n          case 'string':\n            value = getStringParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getStringParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'string[]':\n            value = getStringArrayParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getStringArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'number':\n            value = getNumberParam(node.attr, param.tfName, param.defaultValue || 0);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getNumberParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'number[]':\n            value = getNumericArrayParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getNumericArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'bool':\n            value = getBoolParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getBoolParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'bool[]':\n            value = getBoolArrayParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getBoolArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'shape':\n            value = getTensorShapeParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getTensorShapeParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'shape[]':\n            value = getTensorShapeArrayParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getTensorShapeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'dtype':\n            value = getDtypeParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getDtypeParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'dtype[]':\n            value = getDtypeArrayParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getDtypeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'func':\n            value = getFuncParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getFuncParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'tensor':\n          case 'tensors':\n            break;\n          default:\n            throw new Error(`Unsupported param type: ${param.type} for op: ${node.op}`);\n        }\n        map[param.name] = {\n          value,\n          type\n        };\n        return map;\n      }, {});\n    }\n    return newNode;\n  }\n  // map the TFunctionDef to TFJS graph object\n  mapFunction(functionDef) {\n    const tfNodes = functionDef.nodeDef;\n    const placeholders = [];\n    const weights = [];\n    let nodes = {};\n    if (tfNodes != null) {\n      nodes = tfNodes.reduce((map, node) => {\n        map[node.name] = this.mapNode(node);\n        if (node.op === 'Const') {\n          weights.push(map[node.name]);\n        }\n        return map;\n      }, {});\n    }\n    const inputs = [];\n    const outputs = [];\n    functionDef.signature.inputArg.forEach(arg => {\n      const [nodeName] = getNodeNameAndIndex(arg.name);\n      const node = {\n        name: nodeName,\n        op: 'Placeholder',\n        inputs: [],\n        inputNames: [],\n        category: 'graph',\n        inputParams: {},\n        attrParams: {\n          dtype: {\n            value: parseDtypeParam(arg.type),\n            type: 'dtype'\n          }\n        },\n        children: []\n      };\n      node.signatureKey = arg.name;\n      inputs.push(node);\n      nodes[nodeName] = node;\n    });\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n    const returnNodeMap = functionDef.ret;\n    functionDef.signature.outputArg.forEach(output => {\n      const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n      const node = nodes[nodeName];\n      if (node != null) {\n        node.defaultOutput = index;\n        outputs.push(node);\n      }\n    });\n    const signature = this.mapArgsToSignature(functionDef);\n    return {\n      nodes,\n      inputs,\n      outputs,\n      weights,\n      placeholders,\n      signature\n    };\n  }\n  mapArgsToSignature(functionDef) {\n    return {\n      methodName: functionDef.signature.name,\n      inputs: functionDef.signature.inputArg.reduce((map, arg) => {\n        map[arg.name] = this.mapArgToTensorInfo(arg);\n        return map;\n      }, {}),\n      outputs: functionDef.signature.outputArg.reduce((map, arg) => {\n        map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n        return map;\n      }, {})\n    };\n  }\n  mapArgToTensorInfo(arg, nameMap) {\n    let name = arg.name;\n    if (nameMap != null) {\n      name = nameMap[name];\n    }\n    return {\n      name,\n      dtype: arg.type\n    };\n  }\n}\nexport function decodeBase64(text) {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error('Unable to decode base64 in this environment. ' + 'Missing built-in atob() or Buffer()');\n  }\n}\nexport function parseStringParam(s, keepCase) {\n  const value = Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\nexport function getStringParam(attrs, name, def, keepCase = false) {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\nexport function getBoolParam(attrs, name, def) {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\nexport function getNumberParam(attrs, name, def) {\n  const param = attrs[name] || {};\n  const value = param['i'] != null ? param['i'] : param['f'] != null ? param['f'] : def;\n  return typeof value === 'number' ? value : parseInt(value, 10);\n}\nexport function parseDtypeParam(value) {\n  if (typeof value === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\nexport function getFuncParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.func) {\n    return param.func.name;\n  }\n  return def;\n}\nexport function getDtypeParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\nexport function getDtypeArrayParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\nexport function parseTensorShapeParam(shape) {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(dim => typeof dim.size === 'number' ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\nexport function getTensorShapeParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\nexport function getNumericArrayParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f : param.list.i) || []).map(v => typeof v === 'number' ? v : parseInt(v, 10));\n  }\n  return def;\n}\nexport function getStringArrayParam(attrs, name, def, keepCase = false) {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map(v => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\nexport function getTensorShapeArrayParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map(v => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\nexport function getBoolArrayParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}","map":{"version":3,"names":["env","tensorflow","getRegisteredOp","getNodeNameAndIndex","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","graph","hashTable","image","logical","matrices","normalization","reduction","sliceJoin","spectral","transformation","OperationMapper","Instance","_instance","constructor","ops","mappersJson","concat","map","op","json","opMappers","reduce","mapper","tfOpName","transformGraph","signature","tfNodes","node","placeholders","weights","initNodes","nodes","name","mapNode","startsWith","push","input","length","inputs","outputs","inputNodeNameToKey","outputNodeNameToKey","mapSignatureEntries","allNodes","Object","keys","forEach","key","inputNames","nodeName","children","signatureKey","functions","library","function","func","mapFunction","result","entries","prev","curr","attr","newNode","category","substr","inputParams","attrParams","rawAttrs","param","type","inputIndexStart","start","inputIndexEnd","end","attrs","value","undefined","getStringParam","tfName","defaultValue","tfDeprecatedName","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","getFuncParam","Error","functionDef","nodeDef","inputArg","arg","dtype","parseDtypeParam","returnNodeMap","ret","outputArg","output","index","defaultOutput","mapArgsToSignature","methodName","mapArgToTensorInfo","nameMap","decodeBase64","text","global","atob","Buffer","toString","parseStringParam","s","keepCase","Array","isArray","String","fromCharCode","apply","toLowerCase","def","b","parseInt","DataType","DT_FLOAT","DT_INT32","DT_INT64","DT_INT8","DT_UINT8","DT_BOOL","DT_DOUBLE","DT_STRING","list","v","parseTensorShapeParam","shape","unknownRank","dim","size","f","i"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\operation_mapper.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\n\nimport {getRegisteredOp} from './custom_op/register';\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, logical, image, graph, matrices, normalization, reduction,\n      sliceJoin, spectral, transformation, hashTable\n    ];\n    const mappersJson: OpMapper[] = [].concat(...ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model inference graph from Tensorflow GraphDef to local\n  // representation for TensorFlow.js API\n  transformGraph(\n      graph: tensorflow.IGraphDef,\n      signature: tensorflow.ISignatureDef = {}): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const initNodes: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      } else if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      } else if (node.input == null || node.input.length === 0) {\n        initNodes.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    let inputs: Node[] = [];\n    const outputs: Node[] = [];\n    let inputNodeNameToKey: {[key: string]: string} = {};\n    let outputNodeNameToKey: {[key: string]: string} = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    let functions = {};\n    if (graph.library != null && graph.library.function != null) {\n      functions = graph.library.function.reduce((functions, func) => {\n        functions[func.signature.name] = this.mapFunction(func);\n        return functions;\n      }, {} as {[key: string]: Graph});\n    }\n\n    const result: Graph =\n        {nodes, inputs, outputs, weights, placeholders, signature, functions};\n\n    if (initNodes.length > 0) {\n      result.initNodes = initNodes;\n    }\n\n    return result;\n  }\n\n  private mapSignatureEntries(entries: {[k: string]: tensorflow.ITensorInfo}) {\n    return Object.keys(entries || {})\n        .reduce<{[key: string]: string}>((prev, curr) => {\n          prev[entries[curr].name] = curr;\n          return prev;\n        }, {});\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'func':\n                value = getFuncParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getFuncParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n\n  // map the TFunctionDef to TFJS graph object\n  private mapFunction(functionDef: tensorflow.IFunctionDef): Graph {\n    const tfNodes = functionDef.nodeDef;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    let nodes: {[key: string]: Node} = {};\n    if (tfNodes != null) {\n      nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n        map[node.name] = this.mapNode(node);\n        if (node.op === 'Const') {\n          weights.push(map[node.name]);\n        }\n        return map;\n      }, {});\n    }\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n\n    functionDef.signature.inputArg.forEach(arg => {\n      const [nodeName, ] = getNodeNameAndIndex(arg.name);\n      const node: Node = {\n        name: nodeName,\n        op: 'Placeholder',\n        inputs: [],\n        inputNames: [],\n        category: 'graph',\n        inputParams: {},\n        attrParams: {dtype: {value: parseDtypeParam(arg.type), type: 'dtype'}},\n        children: []\n      };\n      node.signatureKey = arg.name;\n      inputs.push(node);\n      nodes[nodeName] = node;\n    });\n\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    const returnNodeMap = functionDef.ret;\n\n    functionDef.signature.outputArg.forEach(output => {\n      const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n      const node = nodes[nodeName];\n      if (node != null) {\n        node.defaultOutput = index;\n        outputs.push(node);\n      }\n    });\n\n    const signature = this.mapArgsToSignature(functionDef);\n    return {nodes, inputs, outputs, weights, placeholders, signature};\n  }\n\n  private mapArgsToSignature(functionDef: tensorflow.IFunctionDef):\n      tensorflow.ISignatureDef {\n    return {\n      methodName: functionDef.signature.name,\n      inputs: functionDef.signature.inputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n      outputs: functionDef.signature.outputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n    };\n  }\n\n  private mapArgToTensorInfo(\n      arg: tensorflow.OpDef.IArgDef,\n      nameMap?: {[key: string]: string}): tensorflow.ITensorInfo {\n    let name = arg.name;\n    if (nameMap != null) {\n      name = nameMap[name];\n    }\n    return {name, dtype: arg.type};\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getFuncParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: string): string {\n  const param = attrs[name];\n  if (param && param.func) {\n    return param.func.name;\n  }\n  return def;\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkBA,GAAG,QAAO,uBAAuB;AAEnD,OAAO,KAAKC,UAAU,MAAM,sBAAsB;AAElD,SAAQC,eAAe,QAAO,sBAAsB;AACpD,SAAQC,mBAAmB,QAAO,mBAAmB;AACrD,OAAO,KAAKC,UAAU,MAAM,sBAAsB;AAClD,OAAO,KAAKC,SAAS,MAAM,sBAAsB;AACjD,OAAO,KAAKC,OAAO,MAAM,mBAAmB;AAC5C,OAAO,KAAKC,WAAW,MAAM,uBAAuB;AACpD,OAAO,KAAKC,QAAQ,MAAM,oBAAoB;AAC9C,OAAO,KAAKC,OAAO,MAAM,mBAAmB;AAC5C,OAAO,KAAKC,UAAU,MAAM,sBAAsB;AAClD,OAAO,KAAKC,KAAK,MAAM,iBAAiB;AACxC,OAAO,KAAKC,SAAS,MAAM,sBAAsB;AACjD,OAAO,KAAKC,KAAK,MAAM,iBAAiB;AACxC,OAAO,KAAKC,OAAO,MAAM,mBAAmB;AAC5C,OAAO,KAAKC,QAAQ,MAAM,oBAAoB;AAC9C,OAAO,KAAKC,aAAa,MAAM,yBAAyB;AACxD,OAAO,KAAKC,SAAS,MAAM,qBAAqB;AAChD,OAAO,KAAKC,SAAS,MAAM,sBAAsB;AACjD,OAAO,KAAKC,QAAQ,MAAM,oBAAoB;AAC9C,OAAO,KAAKC,cAAc,MAAM,0BAA0B;AAG1D,OAAM,MAAOC,eAAe;EAK1B;EACO,WAAWC,QAAQA,CAAA;IACxB,OAAO,IAAI,CAACC,SAAS,KAAK,IAAI,CAACA,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;EACxD;EAEA;EACAC,YAAA;IACE,MAAMC,GAAG,GAAG,CACVrB,UAAU,EAAEC,SAAS,EAAEC,OAAO,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,OAAO,EAC9DC,UAAU,EAAEI,OAAO,EAAED,KAAK,EAAEF,KAAK,EAAEI,QAAQ,EAAEC,aAAa,EAAEC,SAAS,EACrEC,SAAS,EAAEC,QAAQ,EAAEC,cAAc,EAAER,SAAS,CAC/C;IACD,MAAMc,WAAW,GAAe,EAAE,CAACC,MAAM,CAAC,GAAGF,GAAG,CAACG,GAAG,CAACC,EAAE,IAAIA,EAAE,CAACC,IAAI,CAAC,CAAC;IAEpE,IAAI,CAACC,SAAS,GAAGL,WAAW,CAACM,MAAM,CAC/B,CAACJ,GAAG,EAAEK,MAAgB,KAAI;MACxBL,GAAG,CAACK,MAAM,CAACC,QAAQ,CAAC,GAAGD,MAAM;MAC7B,OAAOL,GAAG;IACZ,CAAC,EACD,EAAE,CAAC;EACT;EAEA;EACA;EACAO,cAAcA,CACVxB,KAA2B,EAC3ByB,SAAA,GAAsC,EAAE;IAC1C,MAAMC,OAAO,GAAG1B,KAAK,CAAC2B,IAAI;IAC1B,MAAMC,YAAY,GAAW,EAAE;IAC/B,MAAMC,OAAO,GAAW,EAAE;IAC1B,MAAMC,SAAS,GAAW,EAAE;IAC5B,MAAMC,KAAK,GAAGL,OAAO,CAACL,MAAM,CAAwB,CAACJ,GAAG,EAAEU,IAAI,KAAI;MAChEV,GAAG,CAACU,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,CAACN,IAAI,CAAC;MACnC,IAAIA,IAAI,CAACT,EAAE,CAACgB,UAAU,CAAC,aAAa,CAAC,EAAE;QACrCN,YAAY,CAACO,IAAI,CAAClB,GAAG,CAACU,IAAI,CAACK,IAAI,CAAC,CAAC;OAClC,MAAM,IAAIL,IAAI,CAACT,EAAE,KAAK,OAAO,EAAE;QAC9BW,OAAO,CAACM,IAAI,CAAClB,GAAG,CAACU,IAAI,CAACK,IAAI,CAAC,CAAC;OAC7B,MAAM,IAAIL,IAAI,CAACS,KAAK,IAAI,IAAI,IAAIT,IAAI,CAACS,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;QACxDP,SAAS,CAACK,IAAI,CAAClB,GAAG,CAACU,IAAI,CAACK,IAAI,CAAC,CAAC;;MAEhC,OAAOf,GAAG;IACZ,CAAC,EAAE,EAAE,CAAC;IAEN,IAAIqB,MAAM,GAAW,EAAE;IACvB,MAAMC,OAAO,GAAW,EAAE;IAC1B,IAAIC,kBAAkB,GAA4B,EAAE;IACpD,IAAIC,mBAAmB,GAA4B,EAAE;IACrD,IAAIhB,SAAS,IAAI,IAAI,EAAE;MACrBe,kBAAkB,GAAG,IAAI,CAACE,mBAAmB,CAACjB,SAAS,CAACa,MAAM,CAAC;MAC/DG,mBAAmB,GAAG,IAAI,CAACC,mBAAmB,CAACjB,SAAS,CAACc,OAAO,CAAC;;IAEnE,MAAMI,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACd,KAAK,CAAC;IACnCY,QAAQ,CAACG,OAAO,CAACC,GAAG,IAAG;MACrB,MAAMpB,IAAI,GAAGI,KAAK,CAACgB,GAAG,CAAC;MACvBpB,IAAI,CAACqB,UAAU,CAACF,OAAO,CAACd,IAAI,IAAG;QAC7B,MAAM,CAACiB,QAAQ,CAAG,GAAGzD,mBAAmB,CAACwC,IAAI,CAAC;QAC9CL,IAAI,CAACW,MAAM,CAACH,IAAI,CAACJ,KAAK,CAACkB,QAAQ,CAAC,CAAC;QACjClB,KAAK,CAACkB,QAAQ,CAAC,CAACC,QAAQ,CAACf,IAAI,CAACR,IAAI,CAAC;MACrC,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF;IACA;IACA,IAAIiB,MAAM,CAACC,IAAI,CAACJ,mBAAmB,CAAC,CAACJ,MAAM,KAAK,CAAC,EAAE;MACjDM,QAAQ,CAACG,OAAO,CAACC,GAAG,IAAG;QACrB,MAAMpB,IAAI,GAAGI,KAAK,CAACgB,GAAG,CAAC;QACvB,IAAIpB,IAAI,CAACuB,QAAQ,CAACb,MAAM,KAAK,CAAC,EAAE;UAC9BE,OAAO,CAACJ,IAAI,CAACR,IAAI,CAAC;;MAEtB,CAAC,CAAC;KACH,MAAM;MACLiB,MAAM,CAACC,IAAI,CAACJ,mBAAmB,CAAC,CAACK,OAAO,CAACd,IAAI,IAAG;QAC9C,MAAM,CAACiB,QAAQ,CAAG,GAAGzD,mBAAmB,CAACwC,IAAI,CAAC;QAC9C,MAAML,IAAI,GAAGI,KAAK,CAACkB,QAAQ,CAAC;QAC5B,IAAItB,IAAI,IAAI,IAAI,EAAE;UAChBA,IAAI,CAACwB,YAAY,GAAGV,mBAAmB,CAACT,IAAI,CAAC;UAC7CO,OAAO,CAACJ,IAAI,CAACR,IAAI,CAAC;;MAEtB,CAAC,CAAC;;IAGJ,IAAIiB,MAAM,CAACC,IAAI,CAACL,kBAAkB,CAAC,CAACH,MAAM,GAAG,CAAC,EAAE;MAC9CO,MAAM,CAACC,IAAI,CAACL,kBAAkB,CAAC,CAACM,OAAO,CAACd,IAAI,IAAG;QAC7C,MAAM,CAACiB,QAAQ,CAAG,GAAGzD,mBAAmB,CAACwC,IAAI,CAAC;QAC9C,MAAML,IAAI,GAAGI,KAAK,CAACkB,QAAQ,CAAC;QAC5B,IAAItB,IAAI,EAAE;UACRA,IAAI,CAACwB,YAAY,GAAGX,kBAAkB,CAACR,IAAI,CAAC;UAC5CM,MAAM,CAACH,IAAI,CAACR,IAAI,CAAC;;MAErB,CAAC,CAAC;KACH,MAAM;MACLW,MAAM,GAAGV,YAAY;;IAGvB,IAAIwB,SAAS,GAAG,EAAE;IAClB,IAAIpD,KAAK,CAACqD,OAAO,IAAI,IAAI,IAAIrD,KAAK,CAACqD,OAAO,CAACC,QAAQ,IAAI,IAAI,EAAE;MAC3DF,SAAS,GAAGpD,KAAK,CAACqD,OAAO,CAACC,QAAQ,CAACjC,MAAM,CAAC,CAAC+B,SAAS,EAAEG,IAAI,KAAI;QAC5DH,SAAS,CAACG,IAAI,CAAC9B,SAAS,CAACO,IAAI,CAAC,GAAG,IAAI,CAACwB,WAAW,CAACD,IAAI,CAAC;QACvD,OAAOH,SAAS;MAClB,CAAC,EAAE,EAA4B,CAAC;;IAGlC,MAAMK,MAAM,GACR;MAAC1B,KAAK;MAAEO,MAAM;MAAEC,OAAO;MAAEV,OAAO;MAAED,YAAY;MAAEH,SAAS;MAAE2B;IAAS,CAAC;IAEzE,IAAItB,SAAS,CAACO,MAAM,GAAG,CAAC,EAAE;MACxBoB,MAAM,CAAC3B,SAAS,GAAGA,SAAS;;IAG9B,OAAO2B,MAAM;EACf;EAEQf,mBAAmBA,CAACgB,OAA8C;IACxE,OAAOd,MAAM,CAACC,IAAI,CAACa,OAAO,IAAI,EAAE,CAAC,CAC5BrC,MAAM,CAA0B,CAACsC,IAAI,EAAEC,IAAI,KAAI;MAC9CD,IAAI,CAACD,OAAO,CAACE,IAAI,CAAC,CAAC5B,IAAI,CAAC,GAAG4B,IAAI;MAC/B,OAAOD,IAAI;IACb,CAAC,EAAE,EAAE,CAAC;EACZ;EAEQ1B,OAAOA,CAACN,IAAyB;IACvC;IACA;IACA,MAAML,MAAM,GACR/B,eAAe,CAACoC,IAAI,CAACT,EAAE,CAAC,IAAI,IAAI,CAACE,SAAS,CAACO,IAAI,CAACT,EAAE,CAAC,IAAI,EAAc;IACzE,IAAIS,IAAI,CAACkC,IAAI,IAAI,IAAI,EAAE;MACrBlC,IAAI,CAACkC,IAAI,GAAG,EAAE;;IAGhB,MAAMC,OAAO,GAAS;MACpB9B,IAAI,EAAEL,IAAI,CAACK,IAAI;MACfd,EAAE,EAAES,IAAI,CAACT,EAAE;MACX6C,QAAQ,EAAEzC,MAAM,CAACyC,QAAQ;MACzBf,UAAU,EACN,CAACrB,IAAI,CAACS,KAAK,IACV,EAAE,EAAEnB,GAAG,CAACmB,KAAK,IAAIA,KAAK,CAACF,UAAU,CAAC,GAAG,CAAC,GAAGE,KAAK,CAAC4B,MAAM,CAAC,CAAC,CAAC,GAAG5B,KAAK,CAAC;MACtEE,MAAM,EAAE,EAAE;MACVY,QAAQ,EAAE,EAAE;MACZe,WAAW,EAAE,EAAE;MACfC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAExC,IAAI,CAACkC;KAChB;IAED,IAAIvC,MAAM,CAACgB,MAAM,IAAI,IAAI,EAAE;MACzBwB,OAAO,CAACG,WAAW,GACf3C,MAAM,CAACgB,MAAM,CAACjB,MAAM,CAChB,CAACJ,GAAG,EAAEmD,KAAK,KAAI;QACbnD,GAAG,CAACmD,KAAK,CAACpC,IAAI,CAAC,GAAG;UAChBqC,IAAI,EAAED,KAAK,CAACC,IAAI;UAChBC,eAAe,EAAEF,KAAK,CAACG,KAAK;UAC5BC,aAAa,EAAEJ,KAAK,CAACK;SACtB;QACD,OAAOxD,GAAG;MACZ,CAAC,EACD,EAAE,CAAC;;IAEb,IAAIK,MAAM,CAACoD,KAAK,IAAI,IAAI,EAAE;MACxBZ,OAAO,CAACI,UAAU,GACd5C,MAAM,CAACoD,KAAK,CAACrD,MAAM,CAA8B,CAACJ,GAAG,EAAEmD,KAAK,KAAI;QAC9D,MAAMC,IAAI,GAAGD,KAAK,CAACC,IAAI;QACvB,IAAIM,KAAK,GAAGC,SAAS;QACrB,QAAQR,KAAK,CAACC,IAAI;UAChB,KAAK,QAAQ;YACXM,KAAK,GAAGE,cAAc,CAClBlD,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACU,MAAM,EAAEV,KAAK,CAACW,YAAsB,CAAC;YAE1D,IAAIJ,KAAK,KAAKC,SAAS,IAAI,CAAC,CAACR,KAAK,CAACY,gBAAgB,EAAE;cACnDL,KAAK,GAAGE,cAAc,CAClBlD,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACY,gBAAgB,EACjCZ,KAAK,CAACW,YAAsB,CAAC;;YAEnC;UACF,KAAK,UAAU;YACbJ,KAAK,GAAGM,mBAAmB,CACvBtD,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACU,MAAM,EAAEV,KAAK,CAACW,YAAwB,CAAC;YAE5D,IAAIJ,KAAK,KAAKC,SAAS,IAAI,CAAC,CAACR,KAAK,CAACY,gBAAgB,EAAE;cACnDL,KAAK,GAAGM,mBAAmB,CACvBtD,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACY,gBAAgB,EACjCZ,KAAK,CAACW,YAAwB,CAAC;;YAErC;UACF,KAAK,QAAQ;YACXJ,KAAK,GAAGO,cAAc,CAClBvD,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACU,MAAM,EACtBV,KAAK,CAACW,YAAY,IAAI,CAAY,CAAC;YACxC,IAAIJ,KAAK,KAAKC,SAAS,IAAI,CAAC,CAACR,KAAK,CAACY,gBAAgB,EAAE;cACnDL,KAAK,GAAGO,cAAc,CAClBvD,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACY,gBAAgB,EACjCZ,KAAK,CAACW,YAAsB,CAAC;;YAEnC;UACF,KAAK,UAAU;YACbJ,KAAK,GAAGQ,oBAAoB,CACxBxD,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACU,MAAM,EAAEV,KAAK,CAACW,YAAwB,CAAC;YAC5D,IAAIJ,KAAK,KAAKC,SAAS,IAAI,CAAC,CAACR,KAAK,CAACY,gBAAgB,EAAE;cACnDL,KAAK,GAAGQ,oBAAoB,CACxBxD,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACY,gBAAgB,EACjCZ,KAAK,CAACW,YAAwB,CAAC;;YAErC;UACF,KAAK,MAAM;YACTJ,KAAK,GAAGS,YAAY,CAChBzD,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACU,MAAM,EAAEV,KAAK,CAACW,YAAuB,CAAC;YAC3D,IAAIJ,KAAK,KAAKC,SAAS,IAAI,CAAC,CAACR,KAAK,CAACY,gBAAgB,EAAE;cACnDL,KAAK,GAAGS,YAAY,CAChBzD,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACY,gBAAgB,EACjCZ,KAAK,CAACW,YAAuB,CAAC;;YAEpC;UACF,KAAK,QAAQ;YACXJ,KAAK,GAAGU,iBAAiB,CACrB1D,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACU,MAAM,EAAEV,KAAK,CAACW,YAAyB,CAAC;YAC7D,IAAIJ,KAAK,KAAKC,SAAS,IAAI,CAAC,CAACR,KAAK,CAACY,gBAAgB,EAAE;cACnDL,KAAK,GAAGU,iBAAiB,CACrB1D,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACY,gBAAgB,EACjCZ,KAAK,CAACW,YAAyB,CAAC;;YAEtC;UACF,KAAK,OAAO;YACVJ,KAAK,GAAGW,mBAAmB,CACvB3D,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACU,MAAM,EAAEV,KAAK,CAACW,YAAwB,CAAC;YAC5D,IAAIJ,KAAK,KAAKC,SAAS,IAAI,CAAC,CAACR,KAAK,CAACY,gBAAgB,EAAE;cACnDL,KAAK,GAAGW,mBAAmB,CACvB3D,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACY,gBAAgB,EACjCZ,KAAK,CAACW,YAAwB,CAAC;;YAErC;UACF,KAAK,SAAS;YACZJ,KAAK,GAAGY,wBAAwB,CAC5B5D,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACU,MAAM,EAAEV,KAAK,CAACW,YAA0B,CAAC;YAC9D,IAAIJ,KAAK,KAAKC,SAAS,IAAI,CAAC,CAACR,KAAK,CAACY,gBAAgB,EAAE;cACnDL,KAAK,GAAGY,wBAAwB,CAC5B5D,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACY,gBAAgB,EACjCZ,KAAK,CAACW,YAA0B,CAAC;;YAEvC;UACF,KAAK,OAAO;YACVJ,KAAK,GAAGa,aAAa,CACjB7D,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACU,MAAM,EAAEV,KAAK,CAACW,YAAwB,CAAC;YAC5D,IAAIJ,KAAK,KAAKC,SAAS,IAAI,CAAC,CAACR,KAAK,CAACY,gBAAgB,EAAE;cACnDL,KAAK,GAAGa,aAAa,CACjB7D,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACY,gBAAgB,EACjCZ,KAAK,CAACW,YAAwB,CAAC;;YAErC;UACF,KAAK,SAAS;YACZJ,KAAK,GAAGc,kBAAkB,CACtB9D,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACU,MAAM,EAAEV,KAAK,CAACW,YAA0B,CAAC;YAC9D,IAAIJ,KAAK,KAAKC,SAAS,IAAI,CAAC,CAACR,KAAK,CAACY,gBAAgB,EAAE;cACnDL,KAAK,GAAGc,kBAAkB,CACtB9D,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACY,gBAAgB,EACjCZ,KAAK,CAACW,YAA0B,CAAC;;YAEvC;UACF,KAAK,MAAM;YACTJ,KAAK,GAAGe,YAAY,CAChB/D,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACU,MAAM,EAAEV,KAAK,CAACW,YAAsB,CAAC;YAC1D,IAAIJ,KAAK,KAAKC,SAAS,IAAI,CAAC,CAACR,KAAK,CAACY,gBAAgB,EAAE;cACnDL,KAAK,GAAGe,YAAY,CAChB/D,IAAI,CAACkC,IAAI,EAAEO,KAAK,CAACY,gBAAgB,EACjCZ,KAAK,CAACW,YAAsB,CAAC;;YAEnC;UACF,KAAK,QAAQ;UACb,KAAK,SAAS;YACZ;UACF;YACE,MAAM,IAAIY,KAAK,CACX,2BAA2BvB,KAAK,CAACC,IAAI,YAAY1C,IAAI,CAACT,EAAE,EAAE,CAAC;;QAEnED,GAAG,CAACmD,KAAK,CAACpC,IAAI,CAAC,GAAG;UAAC2C,KAAK;UAAEN;QAAI,CAAC;QAC/B,OAAOpD,GAAG;MACZ,CAAC,EAAE,EAAE,CAAC;;IAEZ,OAAO6C,OAAO;EAChB;EAEA;EACQN,WAAWA,CAACoC,WAAoC;IACtD,MAAMlE,OAAO,GAAGkE,WAAW,CAACC,OAAO;IACnC,MAAMjE,YAAY,GAAW,EAAE;IAC/B,MAAMC,OAAO,GAAW,EAAE;IAC1B,IAAIE,KAAK,GAA0B,EAAE;IACrC,IAAIL,OAAO,IAAI,IAAI,EAAE;MACnBK,KAAK,GAAGL,OAAO,CAACL,MAAM,CAAwB,CAACJ,GAAG,EAAEU,IAAI,KAAI;QAC1DV,GAAG,CAACU,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,CAACN,IAAI,CAAC;QACnC,IAAIA,IAAI,CAACT,EAAE,KAAK,OAAO,EAAE;UACvBW,OAAO,CAACM,IAAI,CAAClB,GAAG,CAACU,IAAI,CAACK,IAAI,CAAC,CAAC;;QAE9B,OAAOf,GAAG;MACZ,CAAC,EAAE,EAAE,CAAC;;IAER,MAAMqB,MAAM,GAAW,EAAE;IACzB,MAAMC,OAAO,GAAW,EAAE;IAE1BqD,WAAW,CAACnE,SAAS,CAACqE,QAAQ,CAAChD,OAAO,CAACiD,GAAG,IAAG;MAC3C,MAAM,CAAC9C,QAAQ,CAAG,GAAGzD,mBAAmB,CAACuG,GAAG,CAAC/D,IAAI,CAAC;MAClD,MAAML,IAAI,GAAS;QACjBK,IAAI,EAAEiB,QAAQ;QACd/B,EAAE,EAAE,aAAa;QACjBoB,MAAM,EAAE,EAAE;QACVU,UAAU,EAAE,EAAE;QACde,QAAQ,EAAE,OAAO;QACjBE,WAAW,EAAE,EAAE;QACfC,UAAU,EAAE;UAAC8B,KAAK,EAAE;YAACrB,KAAK,EAAEsB,eAAe,CAACF,GAAG,CAAC1B,IAAI,CAAC;YAAEA,IAAI,EAAE;UAAO;QAAC,CAAC;QACtEnB,QAAQ,EAAE;OACX;MACDvB,IAAI,CAACwB,YAAY,GAAG4C,GAAG,CAAC/D,IAAI;MAC5BM,MAAM,CAACH,IAAI,CAACR,IAAI,CAAC;MACjBI,KAAK,CAACkB,QAAQ,CAAC,GAAGtB,IAAI;IACxB,CAAC,CAAC;IAEF,MAAMgB,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACd,KAAK,CAAC;IACnCY,QAAQ,CAACG,OAAO,CAACC,GAAG,IAAG;MACrB,MAAMpB,IAAI,GAAGI,KAAK,CAACgB,GAAG,CAAC;MACvBpB,IAAI,CAACqB,UAAU,CAACF,OAAO,CAACd,IAAI,IAAG;QAC7B,MAAM,CAACiB,QAAQ,CAAG,GAAGzD,mBAAmB,CAACwC,IAAI,CAAC;QAC9CL,IAAI,CAACW,MAAM,CAACH,IAAI,CAACJ,KAAK,CAACkB,QAAQ,CAAC,CAAC;QACjClB,KAAK,CAACkB,QAAQ,CAAC,CAACC,QAAQ,CAACf,IAAI,CAACR,IAAI,CAAC;MACrC,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,MAAMuE,aAAa,GAAGN,WAAW,CAACO,GAAG;IAErCP,WAAW,CAACnE,SAAS,CAAC2E,SAAS,CAACtD,OAAO,CAACuD,MAAM,IAAG;MAC/C,MAAM,CAACpD,QAAQ,EAAEqD,KAAK,CAAC,GAAG9G,mBAAmB,CAAC0G,aAAa,CAACG,MAAM,CAACrE,IAAI,CAAC,CAAC;MACzE,MAAML,IAAI,GAAGI,KAAK,CAACkB,QAAQ,CAAC;MAC5B,IAAItB,IAAI,IAAI,IAAI,EAAE;QAChBA,IAAI,CAAC4E,aAAa,GAAGD,KAAK;QAC1B/D,OAAO,CAACJ,IAAI,CAACR,IAAI,CAAC;;IAEtB,CAAC,CAAC;IAEF,MAAMF,SAAS,GAAG,IAAI,CAAC+E,kBAAkB,CAACZ,WAAW,CAAC;IACtD,OAAO;MAAC7D,KAAK;MAAEO,MAAM;MAAEC,OAAO;MAAEV,OAAO;MAAED,YAAY;MAAEH;IAAS,CAAC;EACnE;EAEQ+E,kBAAkBA,CAACZ,WAAoC;IAE7D,OAAO;MACLa,UAAU,EAAEb,WAAW,CAACnE,SAAS,CAACO,IAAI;MACtCM,MAAM,EAAEsD,WAAW,CAACnE,SAAS,CAACqE,QAAQ,CAACzE,MAAM,CACzC,CAACJ,GAAG,EAAE8E,GAAG,KAAI;QACX9E,GAAG,CAAC8E,GAAG,CAAC/D,IAAI,CAAC,GAAG,IAAI,CAAC0E,kBAAkB,CAACX,GAAG,CAAC;QAC5C,OAAO9E,GAAG;MACZ,CAAC,EACD,EAA6C,CAAC;MAClDsB,OAAO,EAAEqD,WAAW,CAACnE,SAAS,CAAC2E,SAAS,CAAC/E,MAAM,CAC3C,CAACJ,GAAG,EAAE8E,GAAG,KAAI;QACX9E,GAAG,CAAC8E,GAAG,CAAC/D,IAAI,CAAC,GAAG,IAAI,CAAC0E,kBAAkB,CAACX,GAAG,EAAEH,WAAW,CAACO,GAAG,CAAC;QAC7D,OAAOlF,GAAG;MACZ,CAAC,EACD,EAA6C;KAClD;EACH;EAEQyF,kBAAkBA,CACtBX,GAA6B,EAC7BY,OAAiC;IACnC,IAAI3E,IAAI,GAAG+D,GAAG,CAAC/D,IAAI;IACnB,IAAI2E,OAAO,IAAI,IAAI,EAAE;MACnB3E,IAAI,GAAG2E,OAAO,CAAC3E,IAAI,CAAC;;IAEtB,OAAO;MAACA,IAAI;MAAEgE,KAAK,EAAED,GAAG,CAAC1B;IAAI,CAAC;EAChC;;AAGF,OAAM,SAAUuC,YAAYA,CAACC,IAAY;EACvC,MAAMC,MAAM,GAAGzH,GAAG,EAAE,CAACyH,MAAM;EAC3B,IAAI,OAAOA,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IACtC,OAAOD,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC;GACzB,MAAM,IAAI,OAAOG,MAAM,KAAK,WAAW,EAAE;IACxC,OAAO,IAAIA,MAAM,CAACH,IAAI,EAAE,QAAQ,CAAC,CAACI,QAAQ,EAAE;GAC7C,MAAM;IACL,MAAM,IAAItB,KAAK,CACX,+CAA+C,GAC/C,qCAAqC,CAAC;;AAE9C;AAEA,OAAM,SAAUuB,gBAAgBA,CAACC,CAAY,EAAEC,QAAiB;EAC9D,MAAMzC,KAAK,GACP0C,KAAK,CAACC,OAAO,CAACH,CAAC,CAAC,GAAGI,MAAM,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAEN,CAAC,CAAC,GAAGP,YAAY,CAACO,CAAC,CAAC;EAC3E,OAAOC,QAAQ,GAAGzC,KAAK,GAAGA,KAAK,CAAC+C,WAAW,EAAE;AAC/C;AAEA,OAAM,SAAU7C,cAAcA,CAC1BH,KAA6C,EAAE1C,IAAY,EAAE2F,GAAW,EACxEP,QAAQ,GAAG,KAAK;EAClB,MAAMhD,KAAK,GAAGM,KAAK,CAAC1C,IAAI,CAAC;EACzB,IAAIoC,KAAK,IAAI,IAAI,EAAE;IACjB,OAAO8C,gBAAgB,CAAC9C,KAAK,CAAC+C,CAAC,EAAEC,QAAQ,CAAC;;EAE5C,OAAOO,GAAG;AACZ;AAEA,OAAM,SAAUvC,YAAYA,CACxBV,KAA6C,EAAE1C,IAAY,EAC3D2F,GAAY;EACd,MAAMvD,KAAK,GAAGM,KAAK,CAAC1C,IAAI,CAAC;EACzB,OAAOoC,KAAK,GAAGA,KAAK,CAACwD,CAAC,GAAGD,GAAG;AAC9B;AAEA,OAAM,SAAUzC,cAAcA,CAC1BR,KAA6C,EAAE1C,IAAY,EAC3D2F,GAAW;EACb,MAAMvD,KAAK,GAAGM,KAAK,CAAC1C,IAAI,CAAC,IAAI,EAAE;EAC/B,MAAM2C,KAAK,GACPP,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,GAAGA,KAAK,CAAC,GAAG,CAAC,GAAIA,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,GAAGA,KAAK,CAAC,GAAG,CAAC,GAAGuD,GAAI;EAC7E,OAAQ,OAAOhD,KAAK,KAAK,QAAQ,GAAIA,KAAK,GAAGkD,QAAQ,CAAClD,KAAK,EAAE,EAAE,CAAC;AAClE;AAEA,OAAM,SAAUsB,eAAeA,CAACtB,KAAiC;EAC/D,IAAI,OAAQA,KAAM,KAAK,QAAQ,EAAE;IAC/B;IACAA,KAAK,GAAGrF,UAAU,CAACwI,QAAQ,CAACnD,KAAY,CAAC;;EAE3C,QAAQA,KAAK;IACX,KAAKrF,UAAU,CAACwI,QAAQ,CAACC,QAAQ;MAC/B,OAAO,SAAS;IAClB,KAAKzI,UAAU,CAACwI,QAAQ,CAACE,QAAQ;IACjC,KAAK1I,UAAU,CAACwI,QAAQ,CAACG,QAAQ;IACjC,KAAK3I,UAAU,CAACwI,QAAQ,CAACI,OAAO;IAChC,KAAK5I,UAAU,CAACwI,QAAQ,CAACK,QAAQ;MAC/B,OAAO,OAAO;IAChB,KAAK7I,UAAU,CAACwI,QAAQ,CAACM,OAAO;MAC9B,OAAO,MAAM;IACf,KAAK9I,UAAU,CAACwI,QAAQ,CAACO,SAAS;MAChC,OAAO,SAAS;IAClB,KAAK/I,UAAU,CAACwI,QAAQ,CAACQ,SAAS;MAChC,OAAO,QAAQ;IACjB;MACE;MACA;MACA,OAAO,IAAI;;AAEjB;AAEA,OAAM,SAAU5C,YAAYA,CACxBhB,KAA6C,EAAE1C,IAAY,EAC3D2F,GAAW;EACb,MAAMvD,KAAK,GAAGM,KAAK,CAAC1C,IAAI,CAAC;EACzB,IAAIoC,KAAK,IAAIA,KAAK,CAACb,IAAI,EAAE;IACvB,OAAOa,KAAK,CAACb,IAAI,CAACvB,IAAI;;EAExB,OAAO2F,GAAG;AACZ;AAEA,OAAM,SAAUnC,aAAaA,CACzBd,KAA6C,EAAE1C,IAAY,EAC3D2F,GAAa;EACf,MAAMvD,KAAK,GAAGM,KAAK,CAAC1C,IAAI,CAAC;EACzB,IAAIoC,KAAK,IAAIA,KAAK,CAACC,IAAI,EAAE;IACvB,OAAO4B,eAAe,CAAC7B,KAAK,CAACC,IAAI,CAAC;;EAEpC,OAAOsD,GAAG;AACZ;AAEA,OAAM,SAAUlC,kBAAkBA,CAC9Bf,KAA6C,EAAE1C,IAAY,EAC3D2F,GAAe;EACjB,MAAMvD,KAAK,GAAGM,KAAK,CAAC1C,IAAI,CAAC;EACzB,IAAIoC,KAAK,IAAIA,KAAK,CAACmE,IAAI,IAAInE,KAAK,CAACmE,IAAI,CAAClE,IAAI,EAAE;IAC1C,OAAOD,KAAK,CAACmE,IAAI,CAAClE,IAAI,CAACpD,GAAG,CAACuH,CAAC,IAAIvC,eAAe,CAACuC,CAAC,CAAC,CAAC;;EAErD,OAAOb,GAAG;AACZ;AAEA,OAAM,SAAUc,qBAAqBA,CAACC,KAA8B;EAElE,IAAIA,KAAK,CAACC,WAAW,EAAE;IACrB,OAAO/D,SAAS;;EAElB,IAAI8D,KAAK,CAACE,GAAG,IAAI,IAAI,EAAE;IACrB,OAAOF,KAAK,CAACE,GAAG,CAAC3H,GAAG,CAChB2H,GAAG,IACE,OAAOA,GAAG,CAACC,IAAI,KAAK,QAAQ,GAAID,GAAG,CAACC,IAAI,GAAGhB,QAAQ,CAACe,GAAG,CAACC,IAAI,EAAE,EAAE,CAAC,CAAC;;EAE7E,OAAO,EAAE;AACX;AAEA,OAAM,SAAUvD,mBAAmBA,CAC/BZ,KAA6C,EAAE1C,IAAY,EAC3D2F,GAAc;EAChB,MAAMvD,KAAK,GAAGM,KAAK,CAAC1C,IAAI,CAAC;EACzB,IAAIoC,KAAK,IAAIA,KAAK,CAACsE,KAAK,EAAE;IACxB,OAAOD,qBAAqB,CAACrE,KAAK,CAACsE,KAAK,CAAC;;EAE3C,OAAOf,GAAG;AACZ;AAEA,OAAM,SAAUxC,oBAAoBA,CAChCT,KAA6C,EAAE1C,IAAY,EAC3D2F,GAAa;EACf,MAAMvD,KAAK,GAAGM,KAAK,CAAC1C,IAAI,CAAC;EACzB,IAAIoC,KAAK,EAAE;IACT,OAAO,CAAC,CAACA,KAAK,CAACmE,IAAI,CAACO,CAAC,IAAI1E,KAAK,CAACmE,IAAI,CAACO,CAAC,CAACzG,MAAM,GAAG+B,KAAK,CAACmE,IAAI,CAACO,CAAC,GACZ1E,KAAK,CAACmE,IAAI,CAACQ,CAAC,KACnD,EAAE,EACL9H,GAAG,CAACuH,CAAC,IAAK,OAAOA,CAAC,KAAK,QAAQ,GAAIA,CAAC,GAAGX,QAAQ,CAACW,CAAC,EAAE,EAAE,CAAC,CAAC;;EAE9D,OAAOb,GAAG;AACZ;AAEA,OAAM,SAAU1C,mBAAmBA,CAC/BP,KAA6C,EAAE1C,IAAY,EAAE2F,GAAa,EAC1EP,QAAQ,GAAG,KAAK;EAClB,MAAMhD,KAAK,GAAGM,KAAK,CAAC1C,IAAI,CAAC;EACzB,IAAIoC,KAAK,IAAIA,KAAK,CAACmE,IAAI,IAAInE,KAAK,CAACmE,IAAI,CAACpB,CAAC,EAAE;IACvC,OAAO/C,KAAK,CAACmE,IAAI,CAACpB,CAAC,CAAClG,GAAG,CAAEuH,CAAC,IAAI;MAC5B,OAAOtB,gBAAgB,CAACsB,CAAC,EAAEpB,QAAQ,CAAC;IACtC,CAAC,CAAC;;EAEJ,OAAOO,GAAG;AACZ;AAEA,OAAM,SAAUpC,wBAAwBA,CACpCb,KAA6C,EAAE1C,IAAY,EAC3D2F,GAAe;EACjB,MAAMvD,KAAK,GAAGM,KAAK,CAAC1C,IAAI,CAAC;EACzB,IAAIoC,KAAK,IAAIA,KAAK,CAACmE,IAAI,IAAInE,KAAK,CAACmE,IAAI,CAACG,KAAK,EAAE;IAC3C,OAAOtE,KAAK,CAACmE,IAAI,CAACG,KAAK,CAACzH,GAAG,CAAEuH,CAAC,IAAI;MAChC,OAAOC,qBAAqB,CAACD,CAAC,CAAC;IACjC,CAAC,CAAC;;EAEJ,OAAOb,GAAG;AACZ;AAEA,OAAM,SAAUtC,iBAAiBA,CAC7BX,KAA6C,EAAE1C,IAAY,EAC3D2F,GAAc;EAChB,MAAMvD,KAAK,GAAGM,KAAK,CAAC1C,IAAI,CAAC;EACzB,IAAIoC,KAAK,IAAIA,KAAK,CAACmE,IAAI,IAAInE,KAAK,CAACmE,IAAI,CAACX,CAAC,EAAE;IACvC,OAAOxD,KAAK,CAACmE,IAAI,CAACX,CAAC;;EAErB,OAAOD,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}