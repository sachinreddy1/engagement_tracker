{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram {\n  constructor(xShape, paddings, mode) {\n    this.variableNames = ['x'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = \"\".concat(coords[rank - 1], \" < \").concat(this.outputShape[rank - 1]);\n    const innerDims = rank === 1 ? 'source' : \"vec2(\".concat(source.slice(-2).join(), \")\");\n    const offset = mode === 'reflect' ? 0 : 1;\n    let mainLoop = '';\n    if (rank === 1) {\n      const padSetup = \"\\n        \".concat(dtype, \" source = rc;\\n        if (source < start) {\\n          source = start * 2 - source - \").concat(offset, \";\\n        } else if (source >= end) {\\n          source = (end - 1) * 2 - source + \").concat(offset, \";\\n        }\\n        source -= start;\\n      \");\n      mainLoop = \"\\n        \".concat(dtype, \" rc = outputLoc;\\n        \").concat(padSetup, \"\\n        result[0] = getChannel(getX(\").concat(source.join(), \"), \").concat(innerDims, \");\\n        \").concat(coords[rank - 1], \" += 1;\\n        if(\").concat(cLimit, \") {\\n          \").concat(padSetup, \"\\n          result[1] = getChannel(getX(\").concat(source.join(), \"), \").concat(innerDims, \");\\n        }\\n      \");\n    } else {\n      const padSetup = \"\\n        \".concat(dtype, \" source = rc;\\n        \").concat(dtype, \" lt = \").concat(dtype, \"(lessThan(source, start));\\n        \").concat(dtype, \" gte = \").concat(dtype, \"(greaterThanEqual(source, end));\\n        \").concat(dtype, \" orig = 1 - (lt + gte);\\n        source = orig * source +\\n                lt * (start * 2 - source - \").concat(offset, \") +\\n                gte * ((end - 1) * 2 - source + \").concat(offset, \");\\n        source -= start;\\n      \");\n      mainLoop = \"\\n        \".concat(dtype, \" rc = outputLoc;\\n        \").concat(padSetup, \"\\n        result[0] = getChannel(getX(\").concat(source.join(), \"), \").concat(innerDims, \");\\n        \").concat(coords[rank - 1], \" += 1;\\n        if(\").concat(cLimit, \") {\\n          \").concat(padSetup, \"\\n          result[1] = getChannel(getX(\").concat(source.join(), \"), \").concat(innerDims, \");\\n        }\\n        rc = outputLoc;\\n        \").concat(coords[rank - 2], \" += 1;\\n        if(\").concat(coords[rank - 2], \" < \").concat(this.outputShape[rank - 2], \") {\\n          \").concat(padSetup, \"\\n          result[2] = getChannel(getX(\").concat(source.join(), \"), \").concat(innerDims, \");\\n          \").concat(coords[rank - 1], \" += 1;\\n          if(\").concat(cLimit, \") {\\n            \").concat(padSetup, \"\\n            result[3] = getChannel(getX(\").concat(source.join(), \"), \").concat(innerDims, \");\\n          }\\n        }\\n      \");\n    }\n    this.userCode = \"\\n      const \".concat(dtype, \" start = \").concat(dtype, \"(\").concat(start, \");\\n      const \").concat(dtype, \" end = \").concat(dtype, \"(\").concat(end, \");\\n\\n      void main() {\\n        \").concat(dtype, \" outputLoc = getOutputCoords();\\n        vec4 result = vec4(0.);\\n        \").concat(mainLoop, \"\\n        setOutput(result);\\n      }\\n    \");\n  }\n}","map":{"version":3,"names":["getChannels","getCoordsDataType","MirrorPadPackedProgram","constructor","xShape","paddings","mode","variableNames","packedInputs","packedOutput","outputShape","map","p","i","rank","length","dtype","start","join","end","coords","source","cLimit","concat","innerDims","slice","offset","mainLoop","padSetup","userCode"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\mirror_pad_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    let mainLoop = '';\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}