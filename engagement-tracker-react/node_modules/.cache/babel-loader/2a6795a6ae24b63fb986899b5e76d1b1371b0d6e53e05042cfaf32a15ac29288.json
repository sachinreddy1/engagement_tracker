{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FlipLeftRight, util } from '@tensorflow/tfjs-core';\nexport const flipLeftRightConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      image\n    } = inputs;\n    const cpuBackend = backend;\n    const output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n    const imageVals = cpuBackend.data.get(image.dataId).values;\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n            const x = coords[2];\n            const coordX = Math.round(imageWidth - x);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx = batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {\n      dataId,\n      shape: image.shape,\n      dtype: image.dtype\n    };\n  }\n};","map":{"version":3,"names":["FlipLeftRight","util","flipLeftRightConfig","kernelName","backendName","kernelFunc","inputs","attrs","backend","image","cpuBackend","output","getTypedArrayFromDType","dtype","sizeFromShape","shape","batch","imageHeight","imageWidth","numChannels","imageVals","data","get","dataId","values","batchIdx","batchOffset","row","rowOffset","col","colOffset","channel","coords","x","coordX","Math","round","outIdx","outputValue","rotatedColOffset","imageIdx","write"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\FlipLeftRight.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n\n            const coordX = Math.round(imageWidth - x);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,aAAa,EAAuBC,IAAI,QAAO,uBAAuB;AAI9E,OAAO,MAAMC,mBAAmB,GAAiB;EAC/CC,UAAU,EAAEH,aAAa;EACzBI,WAAW,EAAE,KAAK;EAClBC,UAAU,EAAEA,CAAC;IAACC,MAAM;IAAEC,KAAK;IAAEC;EAAO,CAAC,KAAI;IACvC,MAAM;MAACC;IAAK,CAAC,GAAGH,MAA6B;IAC7C,MAAMI,UAAU,GAAGF,OAAyB;IAE5C,MAAMG,MAAM,GAAGV,IAAI,CAACW,sBAAsB,CACtCH,KAAK,CAACI,KAAwB,EAAEZ,IAAI,CAACa,aAAa,CAACL,KAAK,CAACM,KAAK,CAAC,CAAC;IACpE,MAAM,CAACC,KAAK,EAAEC,WAAW,EAAEC,UAAU,EAAEC,WAAW,CAAC,GAAGV,KAAK,CAACM,KAAK;IAEjE,MAAMK,SAAS,GAAGV,UAAU,CAACW,IAAI,CAACC,GAAG,CAACb,KAAK,CAACc,MAAM,CAAC,CAACC,MAAoB;IAExE,KAAK,IAAIC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGT,KAAK,EAAES,QAAQ,EAAE,EAAE;MACnD,MAAMC,WAAW,GAAGD,QAAQ,GAAGP,UAAU,GAAGD,WAAW,GAAGE,WAAW;MAErE,KAAK,IAAIQ,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGV,WAAW,EAAEU,GAAG,EAAE,EAAE;QAC1C,MAAMC,SAAS,GAAGD,GAAG,IAAIT,UAAU,GAAGC,WAAW,CAAC;QAElD,KAAK,IAAIU,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGX,UAAU,EAAEW,GAAG,EAAE,EAAE;UACzC,MAAMC,SAAS,GAAGD,GAAG,GAAGV,WAAW;UAEnC,KAAK,IAAIY,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAGZ,WAAW,EAAEY,OAAO,EAAE,EAAE;YACtD,MAAMC,MAAM,GAAG,CAAChB,KAAK,EAAEW,GAAG,EAAEE,GAAG,EAAEE,OAAO,CAAC;YAEzC,MAAME,CAAC,GAAGD,MAAM,CAAC,CAAC,CAAC;YAEnB,MAAME,MAAM,GAAGC,IAAI,CAACC,KAAK,CAAClB,UAAU,GAAGe,CAAC,CAAC;YACzC,MAAMI,MAAM,GAAGX,WAAW,GAAGE,SAAS,GAAGE,SAAS,GAAGC,OAAO;YAE5D,IAAIO,WAAW,GAAGlB,SAAS,CAACiB,MAAM,CAAC;YACnC;YACA,IAAIH,MAAM,IAAI,CAAC,IAAIA,MAAM,GAAGhB,UAAU,EAAE;cACtC;cACA,MAAMqB,gBAAgB,GAAGL,MAAM,GAAGf,WAAW;cAC7C,MAAMqB,QAAQ,GACVd,WAAW,GAAGE,SAAS,GAAGW,gBAAgB,GAAGR,OAAO;cACxDO,WAAW,GAAGlB,SAAS,CAACoB,QAAQ,CAAC;;YAEnC7B,MAAM,CAAC0B,MAAM,CAAC,GAAGC,WAAW;;;;;IAMpC,MAAMf,MAAM,GAAGb,UAAU,CAAC+B,KAAK,CAAC9B,MAAM,EAAEF,KAAK,CAACM,KAAK,EAAEN,KAAK,CAACI,KAAK,CAAC;IACjE,OAAO;MAACU,MAAM;MAAER,KAAK,EAAEN,KAAK,CAACM,KAAK;MAAEF,KAAK,EAAEJ,KAAK,CAACI;IAAK,CAAC;EACzD;CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}