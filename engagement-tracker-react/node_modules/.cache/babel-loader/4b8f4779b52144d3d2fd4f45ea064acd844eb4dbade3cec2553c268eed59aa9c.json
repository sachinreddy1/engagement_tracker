{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative, env, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nexport function depthwiseConv2dNative(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dimRoundingMode\n  } = attrs;\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + \"1. Got strides \".concat(strides, \" and dilations '\").concat($dilations, \"'\"));\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n  let program;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\nexport const depthwiseConv2dNativeConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative\n};","map":{"version":3,"names":["backend_util","DepthwiseConv2dNative","env","util","DepthwiseConv2DProgram","DepthwiseConvPacked2DProgram","depthwiseConv2dNative","args","inputs","backend","attrs","x","filter","strides","pad","dilations","dimRoundingMode","$dilations","assert","eitherStridesOrDilationsAreOne","concat","convInfo","computeConv2DInfo","shape","program","getBool","strideWidth","outChannels","inChannels","runWebGLProgram","depthwiseConv2dNativeConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\DepthwiseConv2dNative.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, env, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,qBAAqB,EAA2DC,GAAG,EAA4BC,IAAI,QAAO,uBAAuB;AAGvK,SAAQC,sBAAsB,QAAO,uBAAuB;AAC5D,SAAQC,4BAA4B,QAAO,8BAA8B;AAEzE,OAAM,SAAUC,qBAAqBA,CAACC,IAIrC;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,CAAC;IAAEC;EAAM,CAAC,GAAGJ,MAAM;EAC1B,MAAM;IAACK,OAAO;IAAEC,GAAG;IAAEC,SAAS;IAAEC;EAAe,CAAC,GAAGN,KAAK;EAExD,IAAIO,UAAU,GAAGF,SAAS;EAC1B,IAAIE,UAAU,IAAI,IAAI,EAAE;IACtBA,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;;EAGrBd,IAAI,CAACe,MAAM,CACPlB,YAAY,CAACmB,8BAA8B,CAACN,OAAO,EAAEI,UAAU,CAAC,EAChE,MAAM,gEAAgE,qBAAAG,MAAA,CAChDP,OAAO,sBAAAO,MAAA,CAAmBH,UAAU,MAAG,CAAC;EAElE,MAAMI,QAAQ,GAAGrB,YAAY,CAACsB,iBAAiB,CAC3CX,CAAC,CAACY,KAAyC,EAC3CX,MAAM,CAACW,KAAyC,EAAEV,OAAO,EAAEI,UAAU,EACrEH,GAAG,EAAEE,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC;EAE/C,IAAIQ,OAA4D;EAChE,IAAItB,GAAG,EAAE,CAACuB,OAAO,CAAC,0BAA0B,CAAC,IAAIJ,QAAQ,CAACK,WAAW,IAAI,CAAC,IACtEL,QAAQ,CAACM,WAAW,GAAGN,QAAQ,CAACO,UAAU,KAAK,CAAC,EAAE;IACpDJ,OAAO,GAAG,IAAInB,4BAA4B,CAACgB,QAAQ,CAAC;GACrD,MAAM;IACLG,OAAO,GAAG,IAAIpB,sBAAsB,CAACiB,QAAQ,CAAC;;EAGhD,OAAOZ,OAAO,CAACoB,eAAe,CAACL,OAAO,EAAE,CAACb,CAAC,EAAEC,MAAM,CAAC,EAAE,SAAS,CAAC;AACjE;AAEA,OAAO,MAAMkB,2BAA2B,GAAiB;EACvDC,UAAU,EAAE9B,qBAAqB;EACjC+B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE3B;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}