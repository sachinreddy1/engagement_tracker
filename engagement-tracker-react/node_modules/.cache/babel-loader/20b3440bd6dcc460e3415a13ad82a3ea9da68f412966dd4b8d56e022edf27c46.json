{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { cast } from '../ops/cast';\nimport { scalar } from '../ops/scalar';\nimport { zeros } from '../ops/zeros';\nimport { decodeString, encodeString, hasEncodingLoss } from '../util';\n// Utilities needed by backend consumers of tf-core.\nexport * from '../ops/axis_util';\nexport * from '../ops/broadcast_util';\nexport * from '../ops/concat_util';\nexport * from '../ops/conv_util';\nexport * from '../ops/fused_util';\nexport * from '../ops/reduce_util';\nimport * as slice_util from '../ops/slice_util';\nexport { slice_util };\nexport { upcastType } from '../types';\nexport * from '../ops/rotate_util';\nexport * from '../ops/array_ops_util';\nexport * from '../ops/gather_nd_util';\nexport * from '../ops/scatter_nd_util';\nexport * from '../ops/selu_util';\nexport * from '../ops/fused_util';\nexport * from '../ops/erf_util';\nexport * from '../log';\nexport * from '../backends/complex_util';\nexport * from '../ops/split_util';\nimport * as segment_util from '../ops/segment_util';\nexport { segment_util };\nexport function castTensor(x, dtype, backend) {\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return x.clone();\n    }\n    const zerosTensor = zeros(x.shape);\n    const floatX = cast(x, 'float32');\n    const result = backend.complex(floatX, zerosTensor);\n    zerosTensor.dispose();\n    floatX.dispose();\n    return result;\n  }\n  if (!hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    return ENGINE.makeTensorFromDataId(x.dataId, x.shape, dtype);\n  }\n  if (x.dtype === 'complex64') {\n    const real = backend.real(x);\n    const result = cast(real, dtype);\n    real.dispose();\n    return result;\n  }\n  if (dtype === 'int32') {\n    return backend.int(x);\n  } else if (dtype === 'bool') {\n    const zero = scalar(0, x.dtype);\n    const result = backend.notEqual(x, zero);\n    zero.dispose();\n    return result;\n  } else {\n    throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n  }\n}\nexport function reshapeTensor(x, shape) {\n  return ENGINE.makeTensorFromDataId(x.dataId, shape, x.dtype);\n}\nexport function fromUint8ToStringArray(vals) {\n  try {\n    // Decode the bytes into string.\n    return vals.map(val => decodeString(val));\n  } catch (err) {\n    throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${err}`);\n  }\n}\nexport function fromStringArrayToUint8(strings) {\n  return strings.map(s => encodeString(s));\n}","map":{"version":3,"names":["ENGINE","cast","scalar","zeros","decodeString","encodeString","hasEncodingLoss","slice_util","upcastType","segment_util","castTensor","x","dtype","backend","clone","zerosTensor","shape","floatX","result","complex","dispose","makeTensorFromDataId","dataId","real","int","zero","notEqual","Error","reshapeTensor","fromUint8ToStringArray","vals","map","val","err","fromStringArrayToUint8","strings","s"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-core\\src\\backends\\backend_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {cast} from '../ops/cast';\nimport {scalar} from '../ops/scalar';\nimport {zeros} from '../ops/zeros';\nimport {Tensor} from '../tensor';\nimport {Rank} from '../types';\nimport {DataType, ShapeMap} from '../types';\nimport {decodeString, encodeString, hasEncodingLoss} from '../util';\n\nimport {KernelBackend} from './backend';\n\n// Utilities needed by backend consumers of tf-core.\nexport * from '../ops/axis_util';\nexport * from '../ops/broadcast_util';\nexport * from '../ops/concat_util';\nexport * from '../ops/conv_util';\nexport * from '../ops/fused_util';\nexport * from '../ops/fused_types';\nexport * from '../ops/reduce_util';\n\nimport * as slice_util from '../ops/slice_util';\nexport {slice_util};\n\nexport {BackendValues, TypedArray, upcastType, PixelData} from '../types';\nexport {MemoryInfo, TimingInfo} from '../engine';\nexport * from '../ops/rotate_util';\nexport * from '../ops/array_ops_util';\nexport * from '../ops/gather_nd_util';\nexport * from '../ops/scatter_nd_util';\nexport * from '../ops/selu_util';\nexport * from '../ops/fused_util';\nexport * from '../ops/erf_util';\nexport * from '../log';\nexport * from '../backends/complex_util';\nexport * from '../ops/split_util';\n\nimport * as segment_util from '../ops/segment_util';\nexport {segment_util};\n\nexport function castTensor<T extends Tensor>(\n    x: T, dtype: DataType, backend: KernelBackend): T {\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return x.clone();\n    }\n    const zerosTensor = zeros(x.shape);\n    const floatX = cast(x, 'float32');\n    const result = backend.complex(floatX, zerosTensor);\n    zerosTensor.dispose();\n    floatX.dispose();\n    return result as T;\n  }\n\n  if (!hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    return ENGINE.makeTensorFromDataId(x.dataId, x.shape, dtype) as T;\n  }\n  if (x.dtype === 'complex64') {\n    const real = backend.real(x);\n    const result = cast(real, dtype);\n    real.dispose();\n    return result;\n  }\n  if (dtype === 'int32') {\n    return backend.int(x);\n  } else if (dtype === 'bool') {\n    const zero = scalar(0, x.dtype);\n    const result = backend.notEqual(x, zero) as T;\n    zero.dispose();\n    return result;\n  } else {\n    throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n  }\n}\n\nexport function reshapeTensor<T extends Tensor, R extends Rank>(\n    x: T, shape: ShapeMap[R]): Tensor<R> {\n  return ENGINE.makeTensorFromDataId(x.dataId, shape, x.dtype) as Tensor<R>;\n}\n\nexport function fromUint8ToStringArray(vals: Uint8Array[]) {\n  try {\n    // Decode the bytes into string.\n    return vals.map(val => decodeString(val));\n  } catch (err) {\n    throw new Error(\n        `Failed to decode encoded string bytes into utf-8, error: ${err}`);\n  }\n}\n\nexport function fromStringArrayToUint8(strings: string[]) {\n  return strings.map(s => encodeString(s));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}