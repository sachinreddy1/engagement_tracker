{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\nfunction defer(f) {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\nexport class BrowserDownloads {\n  constructor(fileNamePrefix) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error('browserDownloads() cannot proceed because the current environment ' + 'is not a browser.');\n    }\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n    this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n  async save(modelArtifacts) {\n    if (typeof document === 'undefined') {\n      throw new Error('Browser downloads are not supported in ' + 'this environment since `document` is not present');\n    }\n    const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], {\n      type: 'application/octet-stream'\n    }));\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserDownloads.save() does not support saving model topology ' + 'in binary formats yet.');\n    } else {\n      const weightsManifest = [{\n        paths: ['./' + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelTopologyAndWeightManifest = {\n        modelTopology: modelArtifacts.modelTopology,\n        format: modelArtifacts.format,\n        generatedBy: modelArtifacts.generatedBy,\n        convertedBy: modelArtifacts.convertedBy,\n        weightsManifest\n      };\n      if (modelArtifacts.signature != null) {\n        modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n      }\n      if (modelArtifacts.userDefinedMetadata != null) {\n        modelTopologyAndWeightManifest.userDefinedMetadata = modelArtifacts.userDefinedMetadata;\n      }\n      if (modelArtifacts.modelInitializer != null) {\n        modelTopologyAndWeightManifest.modelInitializer = modelArtifacts.modelInitializer;\n      }\n      const modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n        type: 'application/json'\n      }));\n      // If anchor elements are not provided, create them without attaching them\n      // to parents, so that the downloaded file names can be controlled.\n      const jsonAnchor = this.jsonAnchor == null ? document.createElement('a') : this.jsonAnchor;\n      jsonAnchor.download = this.modelTopologyFileName;\n      jsonAnchor.href = modelTopologyAndWeightManifestURL;\n      // Trigger downloads by evoking a click event on the download anchors.\n      // When multiple downloads are started synchronously, Firefox will only\n      // save the last one.\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ? document.createElement('a') : this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n      }\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)\n      };\n    }\n  }\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\nclass BrowserFiles {\n  constructor(files) {\n    if (files == null || files.length < 1) {\n      throw new Error(`When calling browserFiles, at least 1 file is required, ` + `but received ${files}`);\n    }\n    this.files = files;\n  }\n  async load() {\n    const jsonFile = this.files[0];\n    const weightFiles = this.files.slice(1);\n    return new Promise((resolve, reject) => {\n      const jsonReader = new FileReader();\n      jsonReader.onload = event => {\n        // tslint:disable-next-line:no-any\n        const modelJSON = JSON.parse(event.target.result);\n        const modelTopology = modelJSON.modelTopology;\n        if (modelTopology == null) {\n          reject(new Error(`modelTopology field is missing from file ${jsonFile.name}`));\n          return;\n        }\n        if (weightFiles.length === 0) {\n          resolve({\n            modelTopology\n          });\n        }\n        const weightsManifest = modelJSON.weightsManifest;\n        if (weightsManifest == null) {\n          reject(new Error(`weightManifest field is missing from file ${jsonFile.name}`));\n          return;\n        }\n        let pathToFile;\n        try {\n          pathToFile = this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n        } catch (err) {\n          reject(err);\n          return;\n        }\n        const weightSpecs = [];\n        const paths = [];\n        const perFileBuffers = [];\n        weightsManifest.forEach(weightsGroup => {\n          weightsGroup.paths.forEach(path => {\n            paths.push(path);\n            perFileBuffers.push(null);\n          });\n          weightSpecs.push(...weightsGroup.weights);\n        });\n        weightsManifest.forEach(weightsGroup => {\n          weightsGroup.paths.forEach(path => {\n            const weightFileReader = new FileReader();\n            weightFileReader.onload = event => {\n              // tslint:disable-next-line:no-any\n              const weightData = event.target.result;\n              const index = paths.indexOf(path);\n              perFileBuffers[index] = weightData;\n              if (perFileBuffers.indexOf(null) === -1) {\n                const result = {\n                  modelTopology,\n                  weightSpecs,\n                  weightData: concatenateArrayBuffers(perFileBuffers),\n                  format: modelJSON.format,\n                  generatedBy: modelJSON.generatedBy,\n                  convertedBy: modelJSON.convertedBy\n                };\n                if (modelJSON.signature != null) {\n                  result.signature = modelJSON.signature;\n                }\n                if (modelJSON.userDefinedMetadata != null) {\n                  result.userDefinedMetadata = modelJSON.userDefinedMetadata;\n                }\n                if (modelJSON.modelInitializer != null) {\n                  result.modelInitializer = modelJSON.modelInitializer;\n                }\n                resolve(result);\n              }\n            };\n            weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n            weightFileReader.readAsArrayBuffer(pathToFile[path]);\n          });\n        });\n      };\n      jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` + `from file '${jsonFile.name}'. BrowserFiles supports loading ` + `Keras-style tf.Model artifacts only.`);\n      jsonReader.readAsText(jsonFile);\n    });\n  }\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n  checkManifestAndWeightFiles(manifest, files) {\n    const basenames = [];\n    const fileNames = files.map(file => basename(file.name));\n    const pathToFile = {};\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(`Duplicate file basename found in weights manifest: ` + `'${pathBasename}'`);\n        }\n        basenames.push(pathBasename);\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n    if (basenames.length !== files.length) {\n      throw new Error(`Mismatch in the number of files in weights manifest ` + `(${basenames.length}) and the number of weight files provided ` + `(${files.length}).`);\n    }\n    return pathToFile;\n  }\n}\nexport const browserDownloadsRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model') {\n  return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files) {\n  return new BrowserFiles(files);\n}","map":{"version":3,"names":["env","basename","concatenateArrayBuffers","getModelArtifactsInfoForJSON","IORouterRegistry","DEFAULT_FILE_NAME_PREFIX","DEFAULT_JSON_EXTENSION_NAME","DEFAULT_WEIGHT_DATA_EXTENSION_NAME","defer","f","Promise","resolve","setTimeout","then","BrowserDownloads","constructor","fileNamePrefix","getBool","Error","startsWith","URL_SCHEME","slice","length","modelTopologyFileName","weightDataFileName","save","modelArtifacts","document","weightsURL","window","URL","createObjectURL","Blob","weightData","type","modelTopology","ArrayBuffer","weightsManifest","paths","weights","weightSpecs","modelTopologyAndWeightManifest","format","generatedBy","convertedBy","signature","userDefinedMetadata","modelInitializer","modelTopologyAndWeightManifestURL","JSON","stringify","jsonAnchor","createElement","download","href","dispatchEvent","MouseEvent","weightDataAnchor","modelArtifactsInfo","BrowserFiles","files","load","jsonFile","weightFiles","reject","jsonReader","FileReader","onload","event","modelJSON","parse","target","result","name","pathToFile","checkManifestAndWeightFiles","err","perFileBuffers","forEach","weightsGroup","path","push","weightFileReader","index","indexOf","onerror","error","readAsArrayBuffer","readAsText","manifest","basenames","fileNames","map","file","group","pathBasename","browserDownloadsRouter","url","Array","isArray","browserDownloads","registerSaveRouter","browserFiles"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-core\\src\\io\\browser_files.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\n\nimport '../flags';\nimport {env} from '../environment';\n\nimport {basename, concatenateArrayBuffers, getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelJSON, SaveResult, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer<T>(f: () => T): Promise<T> {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\n\nexport class BrowserDownloads implements IOHandler {\n  private readonly modelTopologyFileName: string;\n  private readonly weightDataFileName: string;\n  private readonly jsonAnchor: HTMLAnchorElement;\n  private readonly weightDataAnchor: HTMLAnchorElement;\n\n  static readonly URL_SCHEME = 'downloads://';\n\n  constructor(fileNamePrefix?: string) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error(\n          'browserDownloads() cannot proceed because the current environment ' +\n          'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName =\n        fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (typeof (document) === 'undefined') {\n      throw new Error(\n          'Browser downloads are not supported in ' +\n          'this environment since `document` is not present');\n    }\n    const weightsURL = window.URL.createObjectURL(new Blob(\n        [modelArtifacts.weightData], {type: 'application/octet-stream'}));\n\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserDownloads.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const weightsManifest: WeightsManifestConfig = [{\n        paths: ['./' + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelTopologyAndWeightManifest: ModelJSON = {\n        modelTopology: modelArtifacts.modelTopology,\n        format: modelArtifacts.format,\n        generatedBy: modelArtifacts.generatedBy,\n        convertedBy: modelArtifacts.convertedBy,\n        weightsManifest\n      };\n      if (modelArtifacts.signature != null) {\n        modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n      }\n      if (modelArtifacts.userDefinedMetadata != null) {\n        modelTopologyAndWeightManifest.userDefinedMetadata =\n            modelArtifacts.userDefinedMetadata;\n      }\n      if (modelArtifacts.modelInitializer != null) {\n        modelTopologyAndWeightManifest.modelInitializer =\n            modelArtifacts.modelInitializer;\n      }\n      const modelTopologyAndWeightManifestURL =\n          window.URL.createObjectURL(new Blob(\n              [JSON.stringify(modelTopologyAndWeightManifest)],\n              {type: 'application/json'}));\n\n      // If anchor elements are not provided, create them without attaching them\n      // to parents, so that the downloaded file names can be controlled.\n      const jsonAnchor = this.jsonAnchor == null ? document.createElement('a') :\n                                                   this.jsonAnchor;\n      jsonAnchor.download = this.modelTopologyFileName;\n      jsonAnchor.href = modelTopologyAndWeightManifestURL;\n      // Trigger downloads by evoking a click event on the download anchors.\n      // When multiple downloads are started synchronously, Firefox will only\n      // save the last one.\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ?\n            document.createElement('a') :\n            this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(\n            () => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n      }\n\n      return {modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)};\n    }\n  }\n}\n\nclass BrowserFiles implements IOHandler {\n  private readonly files: File[];\n\n  constructor(files: File[]) {\n    if (files == null || files.length < 1) {\n      throw new Error(\n          `When calling browserFiles, at least 1 file is required, ` +\n          `but received ${files}`);\n    }\n    this.files = files;\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    const jsonFile = this.files[0];\n    const weightFiles = this.files.slice(1);\n\n    return new Promise<ModelArtifacts>((resolve, reject) => {\n      const jsonReader = new FileReader();\n      jsonReader.onload = (event: Event) => {\n        // tslint:disable-next-line:no-any\n        const modelJSON = JSON.parse((event.target as any).result) as ModelJSON;\n        const modelTopology = modelJSON.modelTopology;\n        if (modelTopology == null) {\n          reject(new Error(\n              `modelTopology field is missing from file ${jsonFile.name}`));\n          return;\n        }\n\n        if (weightFiles.length === 0) {\n          resolve({modelTopology});\n        }\n\n        const weightsManifest = modelJSON.weightsManifest;\n        if (weightsManifest == null) {\n          reject(new Error(\n              `weightManifest field is missing from file ${jsonFile.name}`));\n          return;\n        }\n\n        let pathToFile: {[path: string]: File};\n        try {\n          pathToFile =\n              this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n        } catch (err) {\n          reject(err);\n          return;\n        }\n\n        const weightSpecs: WeightsManifestEntry[] = [];\n        const paths: string[] = [];\n        const perFileBuffers: ArrayBuffer[] = [];\n        weightsManifest.forEach(weightsGroup => {\n          weightsGroup.paths.forEach(path => {\n            paths.push(path);\n            perFileBuffers.push(null);\n          });\n          weightSpecs.push(...weightsGroup.weights);\n        });\n\n        weightsManifest.forEach(weightsGroup => {\n          weightsGroup.paths.forEach(path => {\n            const weightFileReader = new FileReader();\n            weightFileReader.onload = (event: Event) => {\n              // tslint:disable-next-line:no-any\n              const weightData = (event.target as any).result as ArrayBuffer;\n              const index = paths.indexOf(path);\n              perFileBuffers[index] = weightData;\n              if (perFileBuffers.indexOf(null) === -1) {\n                const result: ModelArtifacts = {\n                  modelTopology,\n                  weightSpecs,\n                  weightData: concatenateArrayBuffers(perFileBuffers),\n                  format: modelJSON.format,\n                  generatedBy: modelJSON.generatedBy,\n                  convertedBy: modelJSON.convertedBy\n                };\n                if (modelJSON.signature != null) {\n                  result.signature = modelJSON.signature;\n                }\n                if (modelJSON.userDefinedMetadata != null) {\n                  result.userDefinedMetadata = modelJSON.userDefinedMetadata;\n                }\n                if (modelJSON.modelInitializer != null) {\n                  result.modelInitializer = modelJSON.modelInitializer;\n                }\n                resolve(result);\n              }\n            };\n            weightFileReader.onerror = error =>\n                reject(`Failed to weights data from file of path '${path}'.`);\n            weightFileReader.readAsArrayBuffer(pathToFile[path]);\n          });\n        });\n      };\n      jsonReader.onerror = error => reject(\n          `Failed to read model topology and weights manifest JSON ` +\n          `from file '${jsonFile.name}'. BrowserFiles supports loading ` +\n          `Keras-style tf.Model artifacts only.`);\n      jsonReader.readAsText(jsonFile);\n    });\n  }\n\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n  private checkManifestAndWeightFiles(\n      manifest: WeightsManifestConfig, files: File[]): {[path: string]: File} {\n    const basenames: string[] = [];\n    const fileNames = files.map(file => basename(file.name));\n    const pathToFile: {[path: string]: File} = {};\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(\n              `Duplicate file basename found in weights manifest: ` +\n              `'${pathBasename}'`);\n        }\n        basenames.push(pathBasename);\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(\n              `Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n\n    if (basenames.length !== files.length) {\n      throw new Error(\n          `Mismatch in the number of files in weights manifest ` +\n          `(${basenames.length}) and the number of weight files provided ` +\n          `(${files.length}).`);\n    }\n    return pathToFile;\n  }\n}\n\nexport const browserDownloadsRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model'): IOHandler {\n  return new BrowserDownloads(fileNamePrefix);\n}\n\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files: File[]): IOHandler {\n  return new BrowserFiles(files);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}