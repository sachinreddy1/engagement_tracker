{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Interfaces and methods for training models using tf.Tensor objects.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { Tensor, tensor1d, util } from '@tensorflow/tfjs-core';\nimport { expandDims, gather, sliceAlongFirstAxis } from '../backend/tfjs_backend';\nimport { configureCallbacks, standardizeCallbacks } from '../base_callbacks';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { disposeTensorsInLogs } from '../logs';\nimport { range } from '../utils/math_utils';\nexport function checkBatchSize(batchSize) {\n  tfc.util.assert(batchSize > 0 && Number.isInteger(batchSize), () => \"batchSize is required to be a positive integer, but got \".concat(batchSize));\n}\n/**\n * Slice a Tensor or an Array of Tensors, by start and stop indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArraysByIndices()` together.\n *\n * @param arrays: the input.\n * @param start: the starting index (inclusive).\n * @param stop: the stopping index (exclusive).\n * @returns The result of the slicing. If `arrays` is an `Array` of\n *   `tf.Tensor`s, the slicing will be applied to all elements of the `Array`\n *   in the same way.\n */\nexport function sliceArrays(arrays, start, stop) {\n  if (arrays == null) {\n    return [null];\n  } else if (Array.isArray(arrays)) {\n    return arrays.map(array => sliceAlongFirstAxis(array, start, stop - start));\n  } else {\n    // Tensor.\n    return sliceAlongFirstAxis(arrays, start, stop - start);\n  }\n}\n/**\n * Slice a Tensor or an Array of Tensors, by random-order indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArrays()` together.\n *\n * @param arrays The input `tf.Tensor` or `Array` of `tf.Tensor`s to slice.\n *   If an `Array` of `tf.Tensor`s, all `tf.Tensor`s will be sliced in the\n *   same fashion.\n * @param indices The indices to use for slicing along the first (batch)\n *   dimension.\n * @returns Result(s) of the slicing.\n */\nexport function sliceArraysByIndices(arrays, indices) {\n  return tfc.tidy(() => {\n    if (arrays == null) {\n      return null;\n    } else if (Array.isArray(arrays)) {\n      return arrays.map(array => sliceArraysByIndices(array, indices));\n    } else {\n      // TODO(cais): indices should be a pre-constructed Tensor1D to avoid\n      //   tensor1d() calls.\n      return gather(arrays, indices.dtype === 'int32' ? indices : indices.toInt());\n    }\n  });\n}\n/**\n * Returns a list of batch indices (tuples of indices).\n * @param size: Integer, total size of the data to slice into batches.\n * @param batchSize: Integer, batch size.\n * @returns An Array of [batchStart, batchEnd] tuples. batchStart is\n *   inclusive; batchEnd is exclusive. I.e., each batch consists of indices x\n *   that satisfy batchStart <= x < batchEnd.\n */\nexport function makeBatches(size, batchSize) {\n  const output = [];\n  let batchStart = 0;\n  let batchEnd = null;\n  while (batchStart < size) {\n    batchEnd = batchStart + batchSize;\n    if (batchEnd >= size) {\n      batchEnd = size;\n    }\n    output.push([batchStart, batchEnd]);\n    batchStart = batchEnd;\n  }\n  return output;\n}\n/**\n * Abstract fit function for `f(ins)`.\n * @param f A Function returning a list of tensors. For training, this\n *   function is expected to perform the updates to the variables.\n * @param ins List of tensors to be fed to `f`.\n * @param outLabels List of strings, display names of the outputs of `f`.\n * @param batchSize Integer batch size or `== null` if unknown. Default : 32.\n * @param epochs Number of times to iterate over the data. Default : 1.\n * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.\n * @param callbacks List of callbacks to be called during training.\n * @param valF Function to call for validation.\n * @param valIns List of tensors to be fed to `valF`.\n * @param shuffle Whether to shuffle the data at the beginning of every\n * epoch. Default : true.\n * @param callbackMetrics List of strings, the display names of the metrics\n *   passed to the callbacks. They should be the concatenation of the\n *   display names of the outputs of `f` and the list of display names\n *   of the outputs of `valF`.\n * @param initialEpoch Epoch at which to start training (useful for\n *   resuming a previous training run). Default : 0.\n * @param stepsPerEpoch Total number of steps (batches on samples) before\n *   declaring one epoch finished and starting the next epoch. Ignored with\n *   the default value of `undefined` or `null`.\n * @param validationSteps Number of steps to run validation for (only if\n *   doing validation from data tensors). Not applicable for tfjs-layers.\n * @returns A `History` object.\n */\nasync function fitLoop(\n// Type `model` as `any` here to avoid circular dependency w/ training.ts.\n// tslint:disable-next-line:no-any\nmodel, f, ins, outLabels, batchSize, epochs, verbose, callbacks, valF, valIns, shuffle, callbackMetrics, initialEpoch, stepsPerEpoch, validationSteps) {\n  if (batchSize == null) {\n    batchSize = 32;\n  }\n  if (epochs == null) {\n    epochs = 1;\n  }\n  if (shuffle == null) {\n    shuffle = true;\n  }\n  if (initialEpoch == null) {\n    initialEpoch = 0;\n  }\n  // TODO(cais): Change const to let below when implementing validation.\n  let doValidation = false;\n  if (valF != null && valIns != null) {\n    doValidation = true;\n    // TODO(cais): verbose message.\n  }\n  if (validationSteps != null) {\n    doValidation = true;\n    if (stepsPerEpoch == null) {\n      throw new ValueError('Can only use `validationSteps` when doing step-wise training, ' + 'i.e., `stepsPerEpoch` must be set.');\n    }\n  }\n  const numTrainSamples = model.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');\n  let indexArray;\n  if (numTrainSamples != null) {\n    indexArray = range(0, numTrainSamples);\n  }\n  if (verbose == null) {\n    verbose = 1;\n  }\n  const {\n    callbackList,\n    history\n  } = configureCallbacks(callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics);\n  callbackList.setModel(model);\n  model.history = history;\n  await callbackList.onTrainBegin();\n  model.stopTraining_ = false;\n  // TODO(cais): Take care of callbacks.validation_data as in PyKeras.\n  // TODO(cais): Pre-convert feeds for performance as in PyKeras.\n  for (let epoch = initialEpoch; epoch < epochs; ++epoch) {\n    await callbackList.onEpochBegin(epoch);\n    const epochLogs = {};\n    if (stepsPerEpoch != null) {\n      throw new NotImplementedError('stepsPerEpoch mode is not implemented yet.');\n    } else {\n      if (shuffle === 'batch') {\n        throw new NotImplementedError('batch shuffling is not implemneted yet');\n      } else if (shuffle) {\n        util.shuffle(indexArray);\n      }\n      // Convert the potentially shuffled indices to Tensor1D, to avoid the\n      // cost of repeated creation of Array1Ds later on.\n      const epochIndexArray1D = tensor1d(indexArray);\n      const batches = makeBatches(numTrainSamples, batchSize);\n      for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n        const batchLogs = {};\n        await callbackList.onBatchBegin(batchIndex, batchLogs);\n        tfc.tidy(() => {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          const batchIds = sliceAlongFirstAxis(epochIndexArray1D, batchStart, batchEnd - batchStart);\n          batchLogs['batch'] = batchIndex;\n          batchLogs['size'] = batchEnd - batchStart;\n          // TODO(cais): In ins, train flag can be a number, instead of an\n          //   Tensor? Do we need to handle this in tfjs-layers?\n          const insBatch = sliceArraysByIndices(ins, batchIds);\n          const outs = f(insBatch);\n          for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            const out = outs[i];\n            batchLogs[label] = out;\n            tfc.keep(out);\n            // TODO(cais): Use scope() to avoid ownership.\n          }\n          if (batchIndex === batches.length - 1) {\n            // Last batch.\n            if (doValidation) {\n              const valOuts = model.testLoop(valF, valIns, batchSize);\n              // Porting Notes: In tfjs-layers, valOuts is always an Array.\n              for (let i = 0; i < outLabels.length; ++i) {\n                const label = outLabels[i];\n                const out = valOuts[i];\n                tfc.keep(out);\n                // TODO(cais): Use scope() to avoid ownership.\n                epochLogs['val_' + label] = out;\n              }\n            }\n          }\n        });\n        await callbackList.onBatchEnd(batchIndex, batchLogs);\n        disposeTensorsInLogs(batchLogs);\n        if (model.stopTraining_) {\n          break;\n        }\n        // TODO(cais): return outs as list of Tensor.\n      }\n      epochIndexArray1D.dispose();\n    }\n    // TODO(cais): Run validation at the end of the epoch.\n    await callbackList.onEpochEnd(epoch, epochLogs);\n    if (model.stopTraining_) {\n      break;\n    }\n  }\n  await callbackList.onTrainEnd();\n  await model.history.syncData();\n  return model.history;\n}\nexport async function fitTensors(\n// Type `model` as `any` here to avoid circular dependency w/ training.ts.\n// tslint:disable-next-line:no-any\nmodel, x, y) {\n  let args = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (model.isTraining) {\n    throw new Error('Cannot start training because another fit() call is ongoing.');\n  }\n  model.isTraining = true;\n  let inputs;\n  let targets;\n  let inputValX;\n  let inputValY;\n  let valX;\n  let valY;\n  let sampleWeights;\n  try {\n    const batchSize = args.batchSize == null ? 32 : args.batchSize;\n    checkBatchSize(batchSize);\n    // Validate user data.\n    // TODO(cais): Support sampleWeight.\n    const checkBatchAxis = false;\n    const standardizedOuts = await model.standardizeUserData(x, y, args.sampleWeight, args.classWeight, checkBatchAxis, batchSize);\n    inputs = standardizedOuts[0];\n    targets = standardizedOuts[1];\n    sampleWeights = standardizedOuts[2];\n    // Prepare validation data.\n    let doValidation = false;\n    let valIns;\n    if (args.validationData != null && args.validationData.length > 0) {\n      doValidation = true;\n      if (args.validationData.length === 2) {\n        // config.validationData consists of valX and valY.\n        inputValX = args.validationData[0];\n        inputValY = args.validationData[1];\n      } else if (args.validationData.length === 3) {\n        throw new NotImplementedError('validationData including sample weights is not supported yet.');\n      } else {\n        throw new ValueError(\"When passing validation data, it must contain 2 (valX, valY) \" + \"or 3 (valX, valY, valSampleWeight) items; \" + \"\".concat(args.validationData, \" is invalid.\"));\n      }\n      const checkBatchAxis = true;\n      const valStandardized = await model.standardizeUserData(inputValX, inputValY, null, /** Unused sample weights. */null, /** Unused class weights. */checkBatchAxis, batchSize);\n      valX = valStandardized[0];\n      valY = valStandardized[1];\n      valIns = valX.concat(valY);\n      // TODO(cais): Add useLearningPhase data properly.\n    } else if (args.validationSplit != null && args.validationSplit > 0 && args.validationSplit < 1) {\n      doValidation = true;\n      // Porting Note: In tfjs-layers, inputs[0] is always a Tensor.\n      const splitAt = Math.floor(inputs[0].shape[0] * (1 - args.validationSplit));\n      const originalBatchSize = inputs[0].shape[0];\n      valX = sliceArrays(inputs, splitAt, originalBatchSize);\n      inputs = sliceArrays(inputs, 0, splitAt);\n      valY = sliceArrays(targets, splitAt, originalBatchSize);\n      targets = sliceArrays(targets, 0, splitAt);\n      // TODO(cais): Once sampleWeights becomes available, slice it to get\n      //   valSampleWeights.\n      valIns = valX.concat(valY);\n      // TODO(cais): Add useLearningPhase data properly.\n    } else if (args.validationSteps != null) {\n      doValidation = true;\n      // TODO(cais): Add useLearningPhase.\n    }\n    const ins = inputs.concat(targets).concat(sampleWeights);\n    model.checkTrainableWeightsConsistency();\n    // TODO(cais): Handle use_learning_phase and learning_phase?\n    // Porting Note: Here we see a key deviation of tfjs-layers from\n    // Keras.\n    //  Due to the imperative nature of tfjs-layers' backend (tfjs-core),\n    //  we do not construct symbolic computation graphs to embody the\n    //  training process. Instead, we define a function that performs the\n    //  training action. In PyKeras, the data (inputs and targets) are fed\n    //  through graph placeholders. In tfjs-layers, the data are fed as\n    //  function arguments. Since the function are defined below in the\n    //  scope, we don't have equivalents of PyKeras's\n    //  `_make_train_funciton`.\n    const trainFunction = model.makeTrainFunction();\n    const outLabels = model.getDedupedMetricsNames();\n    let valFunction;\n    let callbackMetrics;\n    if (doValidation) {\n      model.makeTestFunction();\n      valFunction = model.testFunction;\n      callbackMetrics = outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n    } else {\n      valFunction = null;\n      valIns = [];\n      callbackMetrics = outLabels.slice();\n    }\n    const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n    const out = await fitLoop(model, trainFunction, ins, outLabels, batchSize, args.epochs, args.verbose, callbacks, valFunction, valIns, args.shuffle, callbackMetrics, args.initialEpoch, null, null);\n    return out;\n  } finally {\n    model.isTraining = false;\n    // Memory clean up.\n    disposeNewTensors(inputs, x);\n    disposeNewTensors(targets, y);\n    disposeNewTensors(valX, inputValX);\n    disposeNewTensors(valY, inputValY);\n    if (sampleWeights != null) {\n      tfc.dispose(sampleWeights);\n    }\n  }\n  // TODO(cais): Add value to outLabels.\n}\n/**\n * Ensure tensors all have a rank of at least 2.\n *\n * If a tensor has a rank of 1, it is dimension-expanded to rank 2.\n * If any tensor has a rank of 0 (i.e., is a scalar), an error will be thrown.\n */\nexport function ensureTensorsRank2OrHigher(tensors) {\n  const outs = [];\n  if (tensors instanceof Tensor) {\n    tensors = [tensors];\n  }\n  // Make Tensors at least 2D.\n  for (let i = 0; i < tensors.length; ++i) {\n    const tensor = tensors[i];\n    if (tensor.rank === 1) {\n      outs.push(expandDims(tensor, 1));\n    } else if (tensor.rank === 0) {\n      throw new Error('Expected tensor to be at least 1D, but received a 0D tensor ' + '(scalar).');\n    } else {\n      outs.push(tensor);\n    }\n  }\n  return outs;\n}\n/**\n * Compare a set of tensors with a reference (old) set, discard the ones\n * in the new set that are not present in the reference set.\n *\n * This method is used for memory clenaup during calls such as\n * LayersModel.fit().\n *\n * @param tensors New set which may contain Tensors not present in\n *   `refTensors`.\n * @param refTensors Reference Tensor set.\n */\n// TODO(cais, kangyizhang): Deduplicate with tfjs-data.\nexport function disposeNewTensors(tensors, refTensors) {\n  if (tensors == null) {\n    return;\n  }\n  const oldTensorIds = [];\n  if (refTensors instanceof Tensor) {\n    oldTensorIds.push(refTensors.id);\n  } else if (Array.isArray(refTensors)) {\n    refTensors.forEach(t => oldTensorIds.push(t.id));\n  } else if (refTensors != null) {\n    // `oldTensors` is a map from string name to Tensor.\n    for (const name in refTensors) {\n      const oldTensor = refTensors[name];\n      oldTensorIds.push(oldTensor.id);\n    }\n  }\n  const tensorsToDispose = [];\n  if (tensors instanceof Tensor) {\n    if (oldTensorIds.indexOf(tensors.id) === -1) {\n      tensorsToDispose.push(tensors);\n    }\n  } else if (Array.isArray(tensors)) {\n    tensors.forEach(t => {\n      if (oldTensorIds.indexOf(t.id) === -1) {\n        tensorsToDispose.push(t);\n      }\n    });\n  } else if (tensors != null) {\n    // `oldTensors` is a map from string name to Tensor.\n    for (const name in tensors) {\n      const tensor = tensors[name];\n      if (oldTensorIds.indexOf(tensor.id) === -1) {\n        tensorsToDispose.push(tensor);\n      }\n    }\n  }\n  tensorsToDispose.forEach(t => {\n    if (!t.isDisposed) {\n      t.dispose();\n    }\n  });\n}","map":{"version":3,"names":["tfc","Tensor","tensor1d","util","expandDims","gather","sliceAlongFirstAxis","configureCallbacks","standardizeCallbacks","NotImplementedError","ValueError","disposeTensorsInLogs","range","checkBatchSize","batchSize","assert","Number","isInteger","concat","sliceArrays","arrays","start","stop","Array","isArray","map","array","sliceArraysByIndices","indices","tidy","dtype","toInt","makeBatches","size","output","batchStart","batchEnd","push","fitLoop","model","f","ins","outLabels","epochs","verbose","callbacks","valF","valIns","shuffle","callbackMetrics","initialEpoch","stepsPerEpoch","validationSteps","doValidation","numTrainSamples","checkNumSamples","indexArray","callbackList","history","setModel","onTrainBegin","stopTraining_","epoch","onEpochBegin","epochLogs","epochIndexArray1D","batches","batchIndex","length","batchLogs","onBatchBegin","batchIds","insBatch","outs","i","label","out","keep","valOuts","testLoop","onBatchEnd","dispose","onEpochEnd","onTrainEnd","syncData","fitTensors","x","y","args","arguments","undefined","isTraining","Error","inputs","targets","inputValX","inputValY","valX","valY","sampleWeights","checkBatchAxis","standardizedOuts","standardizeUserData","sampleWeight","classWeight","validationData","valStandardized","validationSplit","splitAt","Math","floor","shape","originalBatchSize","checkTrainableWeightsConsistency","trainFunction","makeTrainFunction","getDedupedMetricsNames","valFunction","makeTestFunction","testFunction","slice","n","yieldEvery","disposeNewTensors","ensureTensorsRank2OrHigher","tensors","tensor","rank","refTensors","oldTensorIds","id","forEach","t","name","oldTensor","tensorsToDispose","indexOf","isDisposed"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-layers\\src\\engine\\training_tensors.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Interfaces and methods for training models using tf.Tensor objects.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {Scalar, Tensor, Tensor1D, tensor1d, util} from '@tensorflow/tfjs-core';\n\nimport {expandDims, gather, sliceAlongFirstAxis} from '../backend/tfjs_backend';\nimport {BaseCallback, configureCallbacks, CustomCallbackArgs, History, ModelLoggingVerbosity, standardizeCallbacks, YieldEveryOptions} from '../base_callbacks';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {disposeTensorsInLogs, UnresolvedLogs} from '../logs';\nimport {range} from '../utils/math_utils';\nimport {ClassWeight, ClassWeightMap} from './training_utils';\n\n/**\n * Interface configuration model training based on data as `tf.Tensor`s.\n */\nexport interface ModelFitArgs {\n  /**\n   * Number of samples per gradient update. If unspecified, it\n   * will default to 32.\n   */\n  batchSize?: number;\n\n  /**\n   * Integer number of times to iterate over the training data arrays.\n   */\n  epochs?: number;\n\n  /**\n   * Verbosity level.\n   *\n   * Expected to be 0, 1, or 2. Default: 1.\n   *\n   * 0 - No printed message during fit() call.\n   * 1 - In Node.js (tfjs-node), prints the progress bar, together with\n   *     real-time updates of loss and metric values and training speed.\n   *     In the browser: no action. This is the default.\n   * 2 - Not implemented yet.\n   */\n  verbose?: ModelLoggingVerbosity;\n\n  /**\n   * List of callbacks to be called during training.\n   * Can have one or more of the following callbacks:\n   *   - `onTrainBegin(logs)`: called when training starts.\n   *   - `onTrainEnd(logs)`: called when training ends.\n   *   - `onEpochBegin(epoch, logs)`: called at the start of every epoch.\n   *   - `onEpochEnd(epoch, logs)`: called at the end of every epoch.\n   *   - `onBatchBegin(batch, logs)`: called at the start of every batch.\n   *   - `onBatchEnd(batch, logs)`: called at the end of every batch.\n   *   - `onYield(epoch, batch, logs)`: called every `yieldEvery` milliseconds\n   *      with the current epoch, batch and logs. The logs are the same\n   *      as in `onBatchEnd()`. Note that `onYield` can skip batches or\n   *      epochs. See also docs for `yieldEvery` below.\n   */\n  callbacks?: BaseCallback[]|CustomCallbackArgs|CustomCallbackArgs[];\n\n  /**\n   * Float between 0 and 1: fraction of the training data\n   * to be used as validation data. The model will set apart this fraction of\n   * the training data, will not train on it, and will evaluate the loss and\n   * any model metrics on this data at the end of each epoch.\n   * The validation data is selected from the last samples in the `x` and `y`\n   * data provided, before shuffling.\n   */\n  validationSplit?: number;\n\n  /**\n   * Data on which to evaluate the loss and any model\n   * metrics at the end of each epoch. The model will not be trained on this\n   * data. This could be a tuple [xVal, yVal] or a tuple [xVal, yVal,\n   * valSampleWeights]. The model will not be trained on this data.\n   * `validationData` will override `validationSplit`.\n   */\n  validationData?: [\n    Tensor|Tensor[], Tensor|Tensor[]\n  ]|[Tensor | Tensor[], Tensor|Tensor[], Tensor|Tensor[]];\n\n  /**\n   * Whether to shuffle the training data before each epoch. Has\n   * no effect when `stepsPerEpoch` is not `null`.\n   */\n  shuffle?: boolean;\n\n  /**\n   * Optional object mapping class indices (integers) to\n   * a weight (float) to apply to the model's loss for the samples from this\n   * class during training. This can be useful to tell the model to \"pay more\n   * attention\" to samples from an under-represented class.\n   *\n   * If the model has multiple outputs, a class weight can be specified for\n   * each of the outputs by setting this field an array of weight object\n   * or a object that maps model output names (e.g., `model.outputNames[0]`)\n   * to weight objects.\n   */\n  classWeight?: ClassWeight|ClassWeight[]|ClassWeightMap;\n\n  /**\n   * Optional array of the same length as x, containing\n   * weights to apply to the model's loss for each sample. In the case of\n   * temporal data, you can pass a 2D array with shape (samples,\n   * sequenceLength), to apply a different weight to every timestep of every\n   * sample. In this case you should make sure to specify\n   * sampleWeightMode=\"temporal\" in compile().\n   */\n  sampleWeight?: Tensor;\n\n  /**\n   * Epoch at which to start training (useful for resuming a previous training\n   * run). When this is used, `epochs` is the index of the \"final epoch\".\n   * The model is not trained for a number of iterations given by `epochs`,\n   * but merely until the epoch of index `epochs` is reached.\n   */\n  initialEpoch?: number;\n\n  /**\n   * Total number of steps (batches of samples) before\n   * declaring one epoch finished and starting the next epoch. When training\n   * with Input Tensors such as TensorFlow data tensors, the default `null` is\n   * equal to the number of unique samples in your dataset divided by the\n   * batch size, or 1 if that cannot be determined.\n   */\n  stepsPerEpoch?: number;\n\n  /**\n   * Only relevant if `stepsPerEpoch` is specified. Total number of steps\n   * (batches of samples) to validate before stopping.\n   */\n  validationSteps?: number;\n\n  /**\n   * Configures the frequency of yielding the main thread to other tasks.\n   *\n   * In the browser environment, yielding the main thread can improve the\n   * responsiveness of the page during training. In the Node.js environment,\n   * it can ensure tasks queued in the event loop can be handled in a timely\n   * manner.\n   *\n   * The value can be one of the following:\n   *   - `'auto'`: The yielding happens at a certain frame rate (currently set\n   *               at 125ms). This is the default.\n   *   - `'batch'`: yield every batch.\n   *   - `'epoch'`: yield every epoch.\n   *   - any `number`: yield every `number` milliseconds.\n   *   - `'never'`: never yield. (yielding can still happen through `await\n   *      nextFrame()` calls in custom callbacks.)\n   */\n  yieldEvery?: YieldEveryOptions;\n}\n\nexport function checkBatchSize(batchSize: number) {\n  tfc.util.assert(\n      batchSize > 0 && Number.isInteger(batchSize),\n      () => `batchSize is required to be a positive integer, but got ${\n          batchSize}`);\n}\n\n/**\n * Slice a Tensor or an Array of Tensors, by start and stop indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArraysByIndices()` together.\n *\n * @param arrays: the input.\n * @param start: the starting index (inclusive).\n * @param stop: the stopping index (exclusive).\n * @returns The result of the slicing. If `arrays` is an `Array` of\n *   `tf.Tensor`s, the slicing will be applied to all elements of the `Array`\n *   in the same way.\n */\nexport function sliceArrays(\n    arrays: Tensor|Tensor[], start: number, stop: number): Tensor|Tensor[] {\n  if (arrays == null) {\n    return [null];\n  } else if (Array.isArray(arrays)) {\n    return arrays.map(array => sliceAlongFirstAxis(array, start, stop - start));\n  } else {  // Tensor.\n    return sliceAlongFirstAxis(arrays, start, stop - start);\n  }\n}\n\n/**\n * Slice a Tensor or an Array of Tensors, by random-order indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArrays()` together.\n *\n * @param arrays The input `tf.Tensor` or `Array` of `tf.Tensor`s to slice.\n *   If an `Array` of `tf.Tensor`s, all `tf.Tensor`s will be sliced in the\n *   same fashion.\n * @param indices The indices to use for slicing along the first (batch)\n *   dimension.\n * @returns Result(s) of the slicing.\n */\nexport function sliceArraysByIndices(\n    arrays: Tensor|Tensor[], indices: Tensor1D): Tensor|Tensor[] {\n  return tfc.tidy(() => {\n    if (arrays == null) {\n      return null;\n    } else if (Array.isArray(arrays)) {\n      return arrays.map(\n          array => (sliceArraysByIndices(array, indices) as Tensor));\n    } else {\n      // TODO(cais): indices should be a pre-constructed Tensor1D to avoid\n      //   tensor1d() calls.\n      return gather(\n          arrays, indices.dtype === 'int32' ? indices : indices.toInt());\n    }\n  });\n}\n\n/**\n * Returns a list of batch indices (tuples of indices).\n * @param size: Integer, total size of the data to slice into batches.\n * @param batchSize: Integer, batch size.\n * @returns An Array of [batchStart, batchEnd] tuples. batchStart is\n *   inclusive; batchEnd is exclusive. I.e., each batch consists of indices x\n *   that satisfy batchStart <= x < batchEnd.\n */\nexport function makeBatches(\n    size: number, batchSize: number): Array<[number, number]> {\n  const output: Array<[number, number]> = [];\n  let batchStart = 0;\n  let batchEnd: number = null;\n  while (batchStart < size) {\n    batchEnd = batchStart + batchSize;\n    if (batchEnd >= size) {\n      batchEnd = size;\n    }\n    output.push([batchStart, batchEnd]);\n    batchStart = batchEnd;\n  }\n  return output;\n}\n\n/**\n * Abstract fit function for `f(ins)`.\n * @param f A Function returning a list of tensors. For training, this\n *   function is expected to perform the updates to the variables.\n * @param ins List of tensors to be fed to `f`.\n * @param outLabels List of strings, display names of the outputs of `f`.\n * @param batchSize Integer batch size or `== null` if unknown. Default : 32.\n * @param epochs Number of times to iterate over the data. Default : 1.\n * @param verbose Verbosity mode: 0, 1, or 2. Default: 1.\n * @param callbacks List of callbacks to be called during training.\n * @param valF Function to call for validation.\n * @param valIns List of tensors to be fed to `valF`.\n * @param shuffle Whether to shuffle the data at the beginning of every\n * epoch. Default : true.\n * @param callbackMetrics List of strings, the display names of the metrics\n *   passed to the callbacks. They should be the concatenation of the\n *   display names of the outputs of `f` and the list of display names\n *   of the outputs of `valF`.\n * @param initialEpoch Epoch at which to start training (useful for\n *   resuming a previous training run). Default : 0.\n * @param stepsPerEpoch Total number of steps (batches on samples) before\n *   declaring one epoch finished and starting the next epoch. Ignored with\n *   the default value of `undefined` or `null`.\n * @param validationSteps Number of steps to run validation for (only if\n *   doing validation from data tensors). Not applicable for tfjs-layers.\n * @returns A `History` object.\n */\nasync function fitLoop(\n    // Type `model` as `any` here to avoid circular dependency w/ training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, f: (data: Tensor[]) => Scalar[], ins: Tensor[],\n    outLabels?: string[], batchSize?: number, epochs?: number, verbose?: number,\n    callbacks?: BaseCallback[], valF?: (data: Tensor[]) => Scalar[],\n    valIns?: Tensor[], shuffle?: boolean|string, callbackMetrics?: string[],\n    initialEpoch?: number, stepsPerEpoch?: number,\n    validationSteps?: number): Promise<History> {\n  if (batchSize == null) {\n    batchSize = 32;\n  }\n  if (epochs == null) {\n    epochs = 1;\n  }\n  if (shuffle == null) {\n    shuffle = true;\n  }\n  if (initialEpoch == null) {\n    initialEpoch = 0;\n  }\n\n  // TODO(cais): Change const to let below when implementing validation.\n  let doValidation = false;\n  if (valF != null && valIns != null) {\n    doValidation = true;\n    // TODO(cais): verbose message.\n  }\n  if (validationSteps != null) {\n    doValidation = true;\n    if (stepsPerEpoch == null) {\n      throw new ValueError(\n          'Can only use `validationSteps` when doing step-wise training, ' +\n          'i.e., `stepsPerEpoch` must be set.');\n    }\n  }\n\n  const numTrainSamples =\n      model.checkNumSamples(ins, batchSize, stepsPerEpoch, 'steps_per_epoch');\n  let indexArray: number[];\n  if (numTrainSamples != null) {\n    indexArray = range(0, numTrainSamples);\n  }\n\n  if (verbose == null) {\n    verbose = 1;\n  }\n\n  const {callbackList, history} = configureCallbacks(\n      callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch,\n      batchSize, doValidation, callbackMetrics);\n  callbackList.setModel(model);\n  model.history = history;\n  await callbackList.onTrainBegin();\n  model.stopTraining_ = false;\n  // TODO(cais): Take care of callbacks.validation_data as in PyKeras.\n  // TODO(cais): Pre-convert feeds for performance as in PyKeras.\n\n  for (let epoch = initialEpoch; epoch < epochs; ++epoch) {\n    await callbackList.onEpochBegin(epoch);\n    const epochLogs: UnresolvedLogs = {};\n    if (stepsPerEpoch != null) {\n      throw new NotImplementedError(\n          'stepsPerEpoch mode is not implemented yet.');\n    } else {\n      if (shuffle === 'batch') {\n        throw new NotImplementedError('batch shuffling is not implemneted yet');\n      } else if (shuffle) {\n        util.shuffle(indexArray);\n      }\n      // Convert the potentially shuffled indices to Tensor1D, to avoid the\n      // cost of repeated creation of Array1Ds later on.\n      const epochIndexArray1D = tensor1d(indexArray);\n\n      const batches = makeBatches(numTrainSamples, batchSize);\n      for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n        const batchLogs: UnresolvedLogs = {};\n        await callbackList.onBatchBegin(batchIndex, batchLogs);\n\n        tfc.tidy(() => {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          const batchIds = sliceAlongFirstAxis(\n                               epochIndexArray1D, batchStart,\n                               batchEnd - batchStart) as Tensor1D;\n          batchLogs['batch'] = batchIndex;\n          batchLogs['size'] = batchEnd - batchStart;\n\n          // TODO(cais): In ins, train flag can be a number, instead of an\n          //   Tensor? Do we need to handle this in tfjs-layers?\n          const insBatch = sliceArraysByIndices(ins, batchIds) as Tensor[];\n          const outs = f(insBatch);\n          for (let i = 0; i < outLabels.length; ++i) {\n            const label = outLabels[i];\n            const out = outs[i];\n            batchLogs[label] = out;\n            tfc.keep(out);\n            // TODO(cais): Use scope() to avoid ownership.\n          }\n\n          if (batchIndex === batches.length - 1) {  // Last batch.\n            if (doValidation) {\n              const valOuts = model.testLoop(valF, valIns, batchSize);\n              // Porting Notes: In tfjs-layers, valOuts is always an Array.\n              for (let i = 0; i < outLabels.length; ++i) {\n                const label = outLabels[i];\n                const out = valOuts[i];\n                tfc.keep(out);\n                // TODO(cais): Use scope() to avoid ownership.\n                epochLogs['val_' + label] = out;\n              }\n            }\n          }\n        });\n\n        await callbackList.onBatchEnd(batchIndex, batchLogs);\n        disposeTensorsInLogs(batchLogs);\n\n        if (model.stopTraining_) {\n          break;\n        }\n        // TODO(cais): return outs as list of Tensor.\n      }\n\n      epochIndexArray1D.dispose();\n    }\n    // TODO(cais): Run validation at the end of the epoch.\n    await callbackList.onEpochEnd(epoch, epochLogs);\n    if (model.stopTraining_) {\n      break;\n    }\n  }\n  await callbackList.onTrainEnd();\n\n  await model.history.syncData();\n  return model.history;\n}\n\nexport async function fitTensors(\n    // Type `model` as `any` here to avoid circular dependency w/ training.ts.\n    // tslint:disable-next-line:no-any\n    model: any, x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n    y: Tensor|Tensor[]|{[inputName: string]: Tensor},\n    args: ModelFitArgs = {}): Promise<History> {\n  if (model.isTraining) {\n    throw new Error(\n        'Cannot start training because another fit() call is ongoing.');\n  }\n  model.isTraining = true;\n  let inputs: Tensor[];\n  let targets: Tensor[];\n  let inputValX: Tensor|Tensor[];\n  let inputValY: Tensor|Tensor[];\n  let valX: Tensor|Tensor[];\n  let valY: Tensor|Tensor[];\n  let sampleWeights: Tensor[];\n  try {\n    const batchSize = args.batchSize == null ? 32 : args.batchSize;\n    checkBatchSize(batchSize);\n\n    // Validate user data.\n    // TODO(cais): Support sampleWeight.\n    const checkBatchAxis = false;\n    const standardizedOuts =\n        await model.standardizeUserData(\n            x, y, args.sampleWeight, args.classWeight, checkBatchAxis,\n            batchSize) as [Tensor[], Tensor[], Tensor[]];\n    inputs = standardizedOuts[0];\n    targets = standardizedOuts[1];\n    sampleWeights = standardizedOuts[2];\n\n    // Prepare validation data.\n    let doValidation = false;\n    let valIns: Tensor[];\n    if (args.validationData != null && args.validationData.length > 0) {\n      doValidation = true;\n      if (args.validationData.length === 2) {\n        // config.validationData consists of valX and valY.\n        inputValX = args.validationData[0];\n        inputValY = args.validationData[1];\n      } else if (args.validationData.length === 3) {\n        throw new NotImplementedError(\n            'validationData including sample weights is not supported yet.');\n      } else {\n        throw new ValueError(\n            `When passing validation data, it must contain 2 (valX, valY) ` +\n            `or 3 (valX, valY, valSampleWeight) items; ` +\n            `${args.validationData} is invalid.`);\n      }\n\n      const checkBatchAxis = true;\n      const valStandardized =\n          await model.standardizeUserData(\n              inputValX, inputValY, null, /** Unused sample weights. */\n              null,                       /** Unused class weights. */\n              checkBatchAxis, batchSize) as [Tensor[], Tensor[], Tensor[]];\n      valX = valStandardized[0];\n      valY = valStandardized[1];\n      valIns = valX.concat(valY);\n      // TODO(cais): Add useLearningPhase data properly.\n    } else if (\n        args.validationSplit != null && args.validationSplit > 0 &&\n        args.validationSplit < 1) {\n      doValidation = true;\n      // Porting Note: In tfjs-layers, inputs[0] is always a Tensor.\n      const splitAt =\n          Math.floor(inputs[0].shape[0] * (1 - args.validationSplit));\n      const originalBatchSize = inputs[0].shape[0];\n      valX = sliceArrays(inputs, splitAt, originalBatchSize) as Tensor[];\n      inputs = sliceArrays(inputs, 0, splitAt) as Tensor[];\n      valY = sliceArrays(targets, splitAt, originalBatchSize) as Tensor[];\n      targets = sliceArrays(targets, 0, splitAt) as Tensor[];\n      // TODO(cais): Once sampleWeights becomes available, slice it to get\n      //   valSampleWeights.\n      valIns = valX.concat(valY);\n\n      // TODO(cais): Add useLearningPhase data properly.\n    } else if (args.validationSteps != null) {\n      doValidation = true;\n      // TODO(cais): Add useLearningPhase.\n    }\n\n    const ins = inputs.concat(targets).concat(sampleWeights);\n\n    model.checkTrainableWeightsConsistency();\n\n    // TODO(cais): Handle use_learning_phase and learning_phase?\n\n    // Porting Note: Here we see a key deviation of tfjs-layers from\n    // Keras.\n    //  Due to the imperative nature of tfjs-layers' backend (tfjs-core),\n    //  we do not construct symbolic computation graphs to embody the\n    //  training process. Instead, we define a function that performs the\n    //  training action. In PyKeras, the data (inputs and targets) are fed\n    //  through graph placeholders. In tfjs-layers, the data are fed as\n    //  function arguments. Since the function are defined below in the\n    //  scope, we don't have equivalents of PyKeras's\n    //  `_make_train_funciton`.\n    const trainFunction = model.makeTrainFunction();\n    const outLabels = model.getDedupedMetricsNames() as string[];\n\n    let valFunction: (data: Tensor[]) => Scalar[];\n    let callbackMetrics: string[];\n    if (doValidation) {\n      model.makeTestFunction();\n      valFunction = model.testFunction;\n      callbackMetrics =\n          outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n    } else {\n      valFunction = null;\n      valIns = [];\n      callbackMetrics = outLabels.slice();\n    }\n\n    const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n    const out = await fitLoop(\n        model, trainFunction, ins, outLabels, batchSize, args.epochs,\n        args.verbose, callbacks, valFunction, valIns, args.shuffle,\n        callbackMetrics, args.initialEpoch, null, null);\n    return out;\n  } finally {\n    model.isTraining = false;\n    // Memory clean up.\n    disposeNewTensors(inputs, x);\n    disposeNewTensors(targets, y);\n    disposeNewTensors(valX as Tensor[], inputValX);\n    disposeNewTensors(valY as Tensor[], inputValY);\n    if (sampleWeights != null) {\n      tfc.dispose(sampleWeights);\n    }\n  }\n  // TODO(cais): Add value to outLabels.\n}\n\n/**\n * Ensure tensors all have a rank of at least 2.\n *\n * If a tensor has a rank of 1, it is dimension-expanded to rank 2.\n * If any tensor has a rank of 0 (i.e., is a scalar), an error will be thrown.\n */\nexport function ensureTensorsRank2OrHigher(tensors: Tensor|Tensor[]): Tensor[] {\n  const outs: Tensor[] = [];\n  if (tensors instanceof Tensor) {\n    tensors = [tensors];\n  }\n\n  // Make Tensors at least 2D.\n  for (let i = 0; i < tensors.length; ++i) {\n    const tensor = tensors[i];\n    if (tensor.rank === 1) {\n      outs.push(expandDims(tensor, 1));\n    } else if (tensor.rank === 0) {\n      throw new Error(\n          'Expected tensor to be at least 1D, but received a 0D tensor ' +\n          '(scalar).');\n    } else {\n      outs.push(tensor);\n    }\n  }\n  return outs;\n}\n\n/**\n * Compare a set of tensors with a reference (old) set, discard the ones\n * in the new set that are not present in the reference set.\n *\n * This method is used for memory clenaup during calls such as\n * LayersModel.fit().\n *\n * @param tensors New set which may contain Tensors not present in\n *   `refTensors`.\n * @param refTensors Reference Tensor set.\n */\n// TODO(cais, kangyizhang): Deduplicate with tfjs-data.\nexport function disposeNewTensors(\n    tensors: Tensor|Tensor[]|{[inputName: string]: Tensor},\n    refTensors: Tensor|Tensor[]|{[inputName: string]: Tensor}): void {\n  if (tensors == null) {\n    return;\n  }\n  const oldTensorIds: number[] = [];\n  if (refTensors instanceof Tensor) {\n    oldTensorIds.push(refTensors.id);\n  } else if (Array.isArray(refTensors)) {\n    refTensors.forEach(t => oldTensorIds.push(t.id));\n  } else if (refTensors != null) {\n    // `oldTensors` is a map from string name to Tensor.\n    for (const name in refTensors) {\n      const oldTensor = refTensors[name];\n      oldTensorIds.push(oldTensor.id);\n    }\n  }\n\n  const tensorsToDispose: Tensor[] = [];\n  if (tensors instanceof Tensor) {\n    if (oldTensorIds.indexOf(tensors.id) === -1) {\n      tensorsToDispose.push(tensors);\n    }\n  } else if (Array.isArray(tensors)) {\n    tensors.forEach(t => {\n      if (oldTensorIds.indexOf(t.id) === -1) {\n        tensorsToDispose.push(t);\n      }\n    });\n  } else if (tensors != null) {\n    // `oldTensors` is a map from string name to Tensor.\n    for (const name in tensors) {\n      const tensor = tensors[name];\n      if (oldTensorIds.indexOf(tensor.id) === -1) {\n        tensorsToDispose.push(tensor);\n      }\n    }\n  }\n\n  tensorsToDispose.forEach(t => {\n    if (!t.isDisposed) {\n      t.dispose();\n    }\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}