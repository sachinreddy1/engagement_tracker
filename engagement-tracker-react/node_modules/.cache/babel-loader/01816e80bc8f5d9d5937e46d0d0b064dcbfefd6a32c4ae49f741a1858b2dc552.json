{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nconst {\n  getBroadcastDims\n} = backend_util;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, userCode, usesPackedTextures) {\n  const prefixSnippets = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\"uniform float \".concat(x.name).concat(size > 1 ? \"[\".concat(size, \"]\") : '', \";\"));\n    } else {\n      prefixSnippets.push(\"uniform sampler2D \".concat(x.name, \";\"));\n      prefixSnippets.push(\"uniform int offset\".concat(x.name, \";\"));\n    }\n  });\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n  const inputSamplingSnippet = inputsInfo.map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures)).join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet;\n  let floatTextureSetOutputSnippet;\n  let shaderPrefix = getShaderPrefix(glsl);\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n  if (usesPackedTextures) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n  const source = [shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode].join('\\n');\n  return source;\n}\nfunction getSamplerFromInInfo(inInfo) {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo);\n    case 1:\n      return getSampler1D(inInfo);\n    case 2:\n      return getSampler2D(inInfo);\n    case 3:\n      return getSampler3D(inInfo);\n    case 4:\n      return getSampler4D(inInfo);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\"\".concat(shape.length, \"-D input sampling\") + \" is not yet supported\");\n  }\n}\nfunction getPackedSamplerFromInInfo(inInfo) {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo);\n    case 2:\n      return getPackedSampler2D(inInfo);\n    case 3:\n      return getPackedSampler3D(inInfo);\n    default:\n      return getPackedSamplerND(inInfo);\n  }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo) {\n  let usesPackedTextures = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo);\n  } else {\n    res += getSamplerFromInInfo(inInfo);\n  }\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape, outTexShape);\n    case 2:\n      return getOutputPacked2DCoords(outShape, outTexShape);\n    case 3:\n      return getOutputPacked3DCoords(outShape, outTexShape);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape);\n  }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape, outTexShape);\n    case 2:\n      return getOutput2DCoords(outShape, outTexShape);\n    case 3:\n      return getOutput3DCoords(outShape, outTexShape);\n    case 4:\n      return getOutput4DCoords(outShape, outTexShape);\n    case 5:\n      return getOutput5DCoords(outShape, outTexShape);\n    case 6:\n      return getOutput6DCoords(outShape, outTexShape);\n    default:\n      throw new Error(\"\".concat(outShape.length, \"-D output sampling is not yet supported\"));\n  }\n}\nfunction getFloatTextureSampleSnippet(glsl) {\n  return \"\\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n      return \".concat(glsl.texture2D, \"(textureSampler, uv).r;\\n    }\\n  \");\n}\nfunction getFloatTextureSetRSnippet(glsl) {\n  return \"\\n    void setOutput(float val) {\\n      \".concat(glsl.output, \" = vec4(val, 0, 0, 0);\\n    }\\n  \");\n}\nfunction getFloatTextureSetRGBASnippet(glsl) {\n  return \"\\n    void setOutput(vec4 val) {\\n      \".concat(glsl.output, \" = val;\\n    }\\n  \");\n}\nfunction getShaderPrefix(glsl) {\n  const SHADER_PREFIX = \"\".concat(glsl.version, \"\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    \").concat(glsl.varyingFs, \" vec2 resultUV;\\n    \").concat(glsl.defineOutput, \"\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    uniform float NAN;\\n    \").concat(glsl.defineSpecialNaN, \"\\n    \").concat(glsl.defineSpecialInf, \"\\n    \").concat(glsl.defineRound, \"\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    int idiv(int a, int b, float sign) {\\n      int res = a / b;\\n      int mod = imod(a, b);\\n      if (sign < 0. && mod != 0) {\\n        res -= 1;\\n      }\\n      return res;\\n    }\\n\\n    //Based on the work of Dave Hoskins\\n    //https://www.shadertoy.com/view/4djSRW\\n    #define HASHSCALE1 443.8975\\n    float random(float seed){\\n      vec2 p = resultUV * seed;\\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n      p3 += dot(p3, p3.yzx + 19.19);\\n      return fract((p3.x + p3.y) * p3.z);\\n    }\\n\\n    \").concat(SAMPLE_1D_SNIPPET, \"\\n    \").concat(SAMPLE_2D_SNIPPET, \"\\n    \").concat(SAMPLE_3D_SNIPPET, \"\\n  \");\n  return SHADER_PREFIX;\n}\nconst SAMPLE_1D_SNIPPET = \"\\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n  int texelIndex = index / 2;\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nconst SAMPLE_2D_SNIPPET = \"\\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\\n  int texNumC, int row, int col) {\\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nconst SAMPLE_3D_SNIPPET = \"\\nvec2 packedUVfrom3D(int texNumR, int texNumC,\\n    int texelsInBatch, int texelsInLogicalRow, int b,\\n    int row, int col) {\\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\";\nconst SHADER_PACKED_PREFIX = \"\\n  float getChannel(vec4 frag, vec2 innerDims) {\\n    vec2 modCoord = mod(innerDims, 2.);\\n    return modCoord.x == 0. ?\\n      (modCoord.y == 0. ? frag.r : frag.g) :\\n      (modCoord.y == 0. ? frag.b : frag.a);\\n  }\\n  float getChannel(vec4 frag, int dim) {\\n    float modCoord = mod(float(dim), 2.);\\n    return modCoord == 0. ? frag.r : frag.g;\\n  }\\n\";\nfunction getOutputScalarCoords() {\n  return \"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";\n}\nfunction getOutputPacked1DCoords(shape, texShape) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * \".concat(packedTexShape[1], \".0);\\n      }\\n    \");\n  }\n  if (packedTexShape[1] === 1) {\n    return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * \".concat(packedTexShape[0], \".0);\\n      }\\n    \");\n  }\n  return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      return 2 * (resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y);\\n    }\\n  \");\n}\nfunction getOutput1DCoords(shape, texShape) {\n  if (texShape[0] === 1) {\n    return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \".concat(texShape[1], \".0);\\n      }\\n    \");\n  }\n  if (texShape[1] === 1) {\n    return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \".concat(texShape[0], \".0);\\n      }\\n    \");\n  }\n  return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      return resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n    }\\n  \");\n}\nfunction getOutputPacked3DCoords(shape, texShape) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n  return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n\\n      int b = index / \").concat(texelsInBatch, \";\\n      index -= b * \").concat(texelsInBatch, \";\\n\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \");\n}\nfunction getOutput3DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      \").concat(coordsFromIndexSnippet, \"\\n      return ivec3(r, c, d);\\n    }\\n  \");\n}\nfunction getOutputPackedNDCoords(shape, texShape) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = \"\";\n  let coords = 'b, r, c';\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = \"\\n      int b\".concat(b, \" = index / \").concat(texelsInBatchN, \";\\n      index -= b\").concat(b, \" * \").concat(texelsInBatchN, \";\\n    \") + batches;\n    coords = \"b\".concat(b, \", \") + coords;\n  }\n  return \"\\n    ivec\".concat(shape.length, \" getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n\\n      \").concat(batches, \"\\n\\n      int b = index / \").concat(texelsInBatch, \";\\n      index -= b * \").concat(texelsInBatch, \";\\n\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec\").concat(shape.length, \"(\").concat(coords, \");\\n    }\\n  \");\n}\nfunction getOutput4DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n  return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      \").concat(coordsFromIndexSnippet, \"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \");\n}\nfunction getOutput5DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n  return \"\\n    ivec5 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(\".concat(texShape[0], \",\\n                             \").concat(texShape[1], \"));\\n\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n\\n      \").concat(coordsFromIndexSnippet, \"\\n\\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\\n      return outShape;\\n    }\\n  \");\n}\nfunction getOutput6DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n  return \"\\n    ivec6 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n\\n      \").concat(coordsFromIndexSnippet, \"\\n\\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\\n      return result;\\n    }\\n  \");\n}\nfunction getOutputPacked2DCoords(shape, texShape) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    return \"\\n      ivec2 getOutputCoords() {\\n        return 2 * ivec2(resultUV.yx * vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n      }\\n    \");\n  }\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(packedTexShape[0], \", \").concat(packedTexShape[1], \"));\\n\\n      int index = resTexRC.x * \").concat(packedTexShape[1], \" + resTexRC.y;\\n      int r = 2 * (index / \").concat(texelsInLogicalRow, \");\\n      int c = imod(index, \").concat(texelsInLogicalRow, \") * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \");\n}\nfunction getOutput2DCoords(shape, texShape) {\n  if (util.arraysEqual(shape, texShape)) {\n    return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      }\\n    \");\n  }\n  if (shape[1] === 1) {\n    return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n        int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \");\n  }\n  if (shape[0] === 1) {\n    return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n        int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \");\n  }\n  return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\".concat(texShape[0], \", \").concat(texShape[1], \"));\\n      int index = resTexRC.x * \").concat(texShape[1], \" + resTexRC.y;\\n      int r = index / \").concat(shape[1], \";\\n      int c = index - r * \").concat(shape[1], \";\\n      return ivec2(r, c);\\n    }\\n  \");\n}\nfunction getFlatOffsetUniformName(texName) {\n  return \"offset\".concat(texName);\n}\nfunction getPackedSamplerScalar(inputInfo) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return \"\\n    vec4 \".concat(funcName, \"() {\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", halfCR);\\n    }\\n  \");\n}\nfunction getSamplerScalar(inputInfo) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return \"float \".concat(funcName, \"() {return \").concat(texName, \";}\");\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return \"\\n      float \".concat(funcName, \"() {\\n        return sampleTexture(\").concat(texName, \", halfCR);\\n      }\\n    \");\n  }\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  const offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \".concat(funcName, \"() {\\n      vec2 uv = uvFromFlat(\").concat(tNumR, \", \").concat(tNumC, \", \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getPackedSampler1D(inputInfo) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const glsl = getGlslDifferences();\n  return \"\\n    vec4 \".concat(funcName, \"(int index) {\\n      vec2 uv = packedUVfrom1D(\\n        \").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \", index);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler1D(inputInfo) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n  if (tNumC === 1 && tNumR === 1) {\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        return sampleTexture(\").concat(texName, \", halfCR);\\n      }\\n    \");\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \").concat(offset, \") + 0.5) / \").concat(tNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (tNumR === 1) {\n    return \"\\n      float \".concat(funcName, \"(int index) {\\n        vec2 uv = vec2((float(index + \").concat(offset, \") + 0.5) / \").concat(tNumC, \".0, 0.5);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  return \"\\n    float \".concat(funcName, \"(int index) {\\n      vec2 uv = uvFromFlat(\").concat(tNumR, \", \").concat(tNumC, \", index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getPackedSampler2D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    return \"\\n      vec4 \".concat(funcName, \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n\\n        return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n  return \"\\n    vec4 \".concat(funcName, \"(int row, int col) {\\n      vec2 uv = packedUVfrom2D(\").concat(valuesPerRow, \", \").concat(packedTexShape[0], \", \").concat(packedTexShape[1], \", row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler2D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo), \"\\n      float \").concat(funcName, \"(int row, int col) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col) {\\n        int index = round(dot(vec2(row, col), vec2(\").concat(shape[1], \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(shape[1], \", 1, 1));\\n      vec2 uv = vec2(0.5, (index + 0.5) / \").concat(texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return \"\\n    float \".concat(funcName, \"(int row, int col) {\\n      float index = dot(vec3(row, col, \").concat(offset, \"), vec3(\").concat(shape[1], \", 1, 1));\\n      vec2 uv = vec2((index + 0.5) / \").concat(texNumC, \".0, 0.5);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  return \"\\n  float \".concat(funcName, \"(int row, int col) {\\n    // Explicitly use integer operations as dot() only works on floats.\\n    int index = row * \").concat(shape[1], \" + col + \").concat(offset, \";\\n    vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n    return sampleTexture(\").concat(texName, \", uv);\\n  }\\n\");\n}\nfunction getPackedSampler3D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return \"\\n        \".concat(getPackedSamplerFromInInfo(newInputInfo), \"\\n        vec4 \").concat(funcName, \"(int b, int row, int col) {\\n          return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n        }\\n      \");\n  }\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  const glsl = getGlslDifferences();\n  return \"\\n    vec4 \".concat(funcName, \"(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        \").concat(texNumR, \", \").concat(texNumC, \", \").concat(texelsInBatch, \", \").concat(valuesPerRow, \", b, row, col);\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler3D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return \"\\n        \".concat(getSamplerFromInInfo(newInputInfo), \"\\n        float \").concat(funcName, \"(int row, int col, int depth) {\\n          return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n        }\\n      \");\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        int index = round(dot(vec3(row, col, depth),\\n                          vec3(\").concat(stride0, \", \").concat(stride1, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return \"\\n        float \".concat(funcName, \"(int row, int col, int depth) {\\n          float texR = float(row);\\n          float texC = dot(vec2(col, depth), vec2(\").concat(stride1, \", 1));\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n          return sampleTexture(\").concat(texName, \", uv);\\n        }\\n      \");\n  }\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return \"\\n    float \".concat(funcName, \"(int row, int col, int depth) {\\n      float texR = dot(vec2(row, col), vec2(\").concat(shape[1], \", 1));\\n      float texC = float(depth);\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return \"\\n      float \".concat(funcName, \"(int row, int col, int depth) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth + \").concat(offset, \";\\n        vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n  \");\n}\nfunction getPackedSamplerND(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = \"int b, int row, int col\";\n  let index = \"b * \".concat(texelsInBatch, \" + (row / 2) * \").concat(valuesPerRow, \" + (col / 2)\");\n  for (let b = 2; b < rank - 1; b++) {\n    params = \"int b\".concat(b, \", \") + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = \"b\".concat(b, \" * \").concat(texelsInBatch, \" + \") + index;\n  }\n  const glsl = getGlslDifferences();\n  return \"\\n    vec4 \".concat(funcName, \"(\").concat(params, \") {\\n      int index = \").concat(index, \";\\n      int texR = index / \").concat(texNumC, \";\\n      int texC = index - texR * \").concat(texNumC, \";\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\").concat(texNumC, \", \").concat(texNumR, \");\\n      return \").concat(glsl.texture2D, \"(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler4D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo), \"\\n      float \").concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        int index = round(dot(vec4(row, col, depth, depth2),\\n                          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(\").concat(stride1, \", \").concat(stride2, \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\").concat(shape[1] * shape[2], \", \").concat(shape[2], \", 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" +\\n          depth * \").concat(stride2, \" + depth2;\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index + \").concat(offset, \");\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler5D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo), \"\\n      float \").concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        float index = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \")) +\\n          depth3;\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n                         vec4(\").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n        float texR = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(shape[1] * shape[2] * shape[3], \",\\n               \").concat(shape[2] * shape[3], \", \").concat(shape[3], \", 1));\\n        int texC = depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth, int depth2, int depth3) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth * \").concat(stride2, \" +\\n          depth2 * \").concat(stride3, \" + depth3 + \").concat(offset, \";\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getSampler6D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return \"\\n      \".concat(getSamplerFromInInfo(newInputInfo), \"\\n      float \").concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        return \").concat(funcName, \"(\").concat(getSqueezedParams(params, keptDims), \");\\n      }\\n    \");\n  }\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n        int index = round(dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\").concat(stride0, \", \").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \")) +\\n          dot(\\n            vec2(depth3, depth4),\\n            vec2(\").concat(stride4, \", 1)));\\n        \").concat(getUniformSampler(inputInfo), \"\\n      }\\n    \");\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n          vec4(\").concat(stride1, \", \").concat(stride2, \", \").concat(stride3, \", \").concat(stride4, \")) +\\n               float(depth4);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return \"\\n      float \".concat(funcName, \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        float texR = dot(vec4(row, col, depth, depth2),\\n          vec4(\").concat(shape[1] * shape[2] * shape[3] * shape[4], \",\\n               \").concat(shape[2] * shape[3] * shape[4], \",\\n               \").concat(shape[3] * shape[4], \",\\n               \").concat(shape[4], \")) + float(depth3);\\n        int texC = depth4;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\").concat(texNumC, \".0, \").concat(texNumR, \".0);\\n        return sampleTexture(\").concat(texName, \", uv);\\n      }\\n    \");\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return \"\\n    float \".concat(funcName, \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \").concat(stride0, \" + col * \").concat(stride1, \" + depth * \").concat(stride2, \" +\\n          depth2 * \").concat(stride3, \" + depth3 * \").concat(stride4, \" + depth4 + \").concat(offset, \";\\n      vec2 uv = uvFromFlat(\").concat(texNumR, \", \").concat(texNumC, \", index);\\n      return sampleTexture(\").concat(texName, \", uv);\\n    }\\n  \");\n}\nfunction getUniformSampler(inputInfo) {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  if (inSize < 2) {\n    return \"return \".concat(texName, \";\");\n  }\n  return \"\\n    for (int i = 0; i < \".concat(inSize, \"; i++) {\\n      if (i == index) {\\n        return \").concat(texName, \"[i];\\n      }\\n    }\\n  \");\n}\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(d => \"coords.\".concat(fields[d + rankDiff], \" = 0;\")).join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => \"coords.\".concat(fields[i + rankDiff])).join(', ');\n  }\n  let output = \"return outputValue;\";\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = \"\\n      return vec4(outputValue.xy, outputValue.xy);\\n    \";\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = \"\\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\\n      \";\n    } else {\n      output = \"\\n        return vec4(outputValue.x);\\n      \";\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = \"return vec4(outputValue.x);\";\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = \"return vec4(outputValue.x, outputValue.y, \" + \"outputValue.x, outputValue.y);\";\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = \"return vec4(outputValue.xx, outputValue.zz);\";\n    }\n  }\n  return \"\\n    vec4 \".concat(funcName, \"() {\\n      \").concat(type, \" coords = getOutputCoords();\\n      \").concat(coordsSnippet, \"\\n      vec4 outputValue = get\").concat(texFuncSnippet, \"(\").concat(unpackedCoordsSnippet, \");\\n      \").concat(output, \"\\n    }\\n  \");\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && util.arraysEqual(inTexShape, outTexShape)) {\n    return \"\\n      float \".concat(funcName, \"() {\\n        return sampleTexture(\").concat(texName, \", resultUV);\\n      }\\n    \");\n  }\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(d => \"coords.\".concat(fields[d + rankDiff], \" = 0;\")).join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => \"coords.\".concat(fields[i + rankDiff])).join(', ');\n  }\n  return \"\\n    float \".concat(funcName, \"() {\\n      \").concat(type, \" coords = getOutputCoords();\\n      \").concat(coordsSnippet, \"\\n      return get\").concat(texFuncSnippet, \"(\").concat(unpackedCoordsSnippet, \");\\n    }\\n  \");\n}\nexport function getCoordsDataType(rank) {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(\"GPU for rank \".concat(rank, \" is not yet supported\"));\n  }\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nfunction squeezeInputInfo(inInfo, squeezedShape) {\n  // Deep copy.\n  const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n  return keptDims.map(d => params[d]).join(', ');\n}","map":{"version":3,"names":["backend_util","util","getBroadcastDims","getGlslDifferences","shader_util","makeShader","inputsInfo","outputShape","userCode","usesPackedTextures","prefixSnippets","forEach","x","size","sizeFromShape","shapeInfo","logicalShape","isUniform","push","concat","name","inputPrefixSnippet","join","inputSamplingSnippet","map","getInputSamplingSnippet","outTexShape","texShape","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","getShaderPrefix","isPacked","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","source","getSamplerFromInInfo","inInfo","shape","length","getSamplerScalar","getSampler1D","getSampler2D","getSampler3D","getSampler4D","getSampler5D","getSampler6D","Error","getPackedSamplerFromInInfo","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","outShapeInfo","arguments","undefined","res","inShape","outShape","getPackedSamplerAtOutputCoords","getSamplerAtOutputCoords","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","getOutput1DCoords","getOutput2DCoords","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","texture2D","output","SHADER_PREFIX","version","varyingFs","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","packedTexShape","Math","ceil","texelsInLogicalRow","texelsInBatch","coordsFromIndexSnippet","getLogicalCoordinatesFromFlatIndex","texelsInBatchN","batches","coords","b","arraysEqual","getFlatOffsetUniformName","texName","inputInfo","funcName","charAt","toUpperCase","slice","texNumR","texNumC","tNumR","tNumC","offset","getUniformSampler","valuesPerRow","newShape","keptDims","squeezeShape","squeezedShape","newInputInfo","squeezeInputInfo","params","getSqueezedParams","stride0","stride1","flatOffset","rank","index","stride2","stride3","stride4","inSize","texFuncSnippet","inRank","outRank","broadcastDims","type","getCoordsDataType","rankDiff","coordsSnippet","fields","d","unpackedCoordsSnippet","s","i","isInputScalar","outSize","isOutputScalar","rows","cols","indexOf","inTexShape","JSON","parse","stringify"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\shader_compiler.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo, userCode: string,\n    usesPackedTextures: boolean): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n  });\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet =\n      inputsInfo\n          .map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures))\n          .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet =\n        getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet =\n        getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (usesPackedTextures) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo);\n    case 1:\n      return getSampler1D(inInfo);\n    case 2:\n      return getSampler2D(inInfo);\n    case 3:\n      return getSampler3D(inInfo);\n    case 4:\n      return getSampler4D(inInfo);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo);\n    case 2:\n      return getPackedSampler2D(inInfo);\n    case 3:\n      return getPackedSampler3D(inInfo);\n    default:\n      return getPackedSamplerND(inInfo);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo,\n    usesPackedTextures = false): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo);\n  } else {\n    res += getSamplerFromInInfo(inInfo);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutputPacked2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutput2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  if (texShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nfunction squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}