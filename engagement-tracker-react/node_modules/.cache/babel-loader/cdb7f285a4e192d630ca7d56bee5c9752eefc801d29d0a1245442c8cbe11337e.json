{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedConv2D, util } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function fusedConv2d(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out;\n  const intermediates = [];\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    const inputs = [x, filter];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n  const outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return outReshaped;\n}\nexport const fusedConv2DConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d\n};","map":{"version":3,"names":["backend_util","env","FusedConv2D","util","Conv2DProgram","mapActivationToShaderProgram","conv2dByMatMul","conv2dWithIm2Row","reshape","fusedConv2d","args","inputs","backend","attrs","x","filter","bias","preluActivationWeights","strides","pad","dataFormat","dilations","dimRoundingMode","activation","leakyreluAlpha","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","out","intermediates","filterHeight","filterWidth","dilationHeight","dilationWidth","strideHeight","strideWidth","padInfo","type","getBool","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","fusedActivation","program","push","$leakyreluAlpha","makeTensorInfo","createScalarValue","runWebGLProgram","outReshaped","outShape","forEach","t","disposeIntermediateTensorInfo","fusedConv2DConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\FusedConv2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n    const inputs: TensorInfo[] = [x, filter];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outReshaped;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d as {} as KernelFunc,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}