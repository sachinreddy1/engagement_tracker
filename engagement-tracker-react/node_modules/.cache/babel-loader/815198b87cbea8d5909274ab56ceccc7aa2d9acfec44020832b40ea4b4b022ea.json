{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nimport { getDenseTexShape, PackingScheme } from './tex_util';\nexport class DecodeMatrixPackedProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outPackingScheme = PackingScheme.DENSE;\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = \"\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        \".concat(shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape), \"\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n          vec2(\").concat(texShape[0], \", \").concat(texShape[1], \"));\\n        int index = 4 * (resTexRC.x * \").concat(texShape[1], \" + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\\n        }\\n\\n        \").concat(glsl.output, \" = result;\\n      }\\n    \");\n  }\n}","map":{"version":3,"names":["getGlslDifferences","shader_util","getDenseTexShape","PackingScheme","DecodeMatrixPackedProgram","constructor","outputShape","variableNames","packedInputs","packedOutput","outPackingScheme","DENSE","texShape","glsl","userCode","concat","getLogicalCoordinatesFromFlatIndex","output"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\decode_matrix_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {getDenseTexShape, PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n\n  constructor(outputShape: [number, number, number]) {\n    const texShape = getDenseTexShape(outputShape);\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        shader_util.getLogicalCoordinatesFromFlatIndex(\n            ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${texShape[0]}, ${texShape[1]}));\n        int index = 4 * (resTexRC.x * ${texShape[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,kBAAkB,QAAO,gBAAgB;AAEjD,OAAO,KAAKC,WAAW,MAAM,wBAAwB;AACrD,SAAQC,gBAAgB,EAAEC,aAAa,QAAO,YAAY;AAE1D,OAAM,MAAOC,yBAAyB;EAQpCC,YAAYC,WAAqC;IAPjD,KAAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IAErB,KAAAC,YAAY,GAAG,IAAI;IACnB,KAAAC,YAAY,GAAG,IAAI;IAEnB,KAAAC,gBAAgB,GAAGP,aAAa,CAACQ,KAAK;IAGpC,MAAMC,QAAQ,GAAGV,gBAAgB,CAACI,WAAW,CAAC;IAC9C,MAAMO,IAAI,GAAGb,kBAAkB,EAAE;IACjC,IAAI,CAACM,WAAW,GAAGA,WAAW;IAE9B,IAAI,CAACQ,QAAQ,iEAAAC,MAAA,CAGTd,WAAW,CAACe,kCAAkC,CAC1C,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAEV,WAAW,CAAC,qIAAAS,MAAA,CAMxBH,QAAQ,CAAC,CAAC,CAAC,QAAAG,MAAA,CAAKH,QAAQ,CAAC,CAAC,CAAC,iDAAAG,MAAA,CACJH,QAAQ,CAAC,CAAC,CAAC,gSAAAG,MAAA,CAUzCF,IAAI,CAACI,MAAM,8BAEhB;EACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}