{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nexport class Im2ColPackedProgram {\n  constructor(outputShape, inputShape, convInfo) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = outputShape;\n    const {\n      filterWidth,\n      inChannels,\n      strideWidth,\n      strideHeight,\n      padInfo,\n      outWidth,\n      dilationWidth,\n      dilationHeight,\n      dataFormat\n    } = convInfo;\n    const {\n      left,\n      top\n    } = padInfo;\n    const itemsPerBlockRow = inChannels * filterWidth;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n    let unrolled = \"\";\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += \"\\n          blockIndex = rc.y + \".concat(col, \";\\n          pos = rc.x + \").concat(row, \";\\n\\n          if(blockIndex < \").concat(outputShape[1], \" && pos < \").concat(outputShape[0], \") {\\n            offsetY = int(blockIndex / (\").concat(outWidth, \")) * \").concat(strideHeight, \" - \").concat(top, \";\\n            d0 = offsetY + \").concat(dilationHeight, \" * (pos / \").concat(itemsPerBlockRow, \");\\n\\n            if(d0 < \").concat(inputShape[rowDim], \" && d0 >= 0) {\\n\\n              offsetX = int(mod(float(blockIndex), \").concat(outWidth, \".) * \").concat(strideWidth, \". - \").concat(left, \".);\\n              d1 = offsetX + \").concat(dilationWidth, \" * (int(mod(float(pos), \").concat(itemsPerBlockRow, \".) / \").concat(inChannels, \".));\\n\\n              if(d1 < \").concat(inputShape[colDim], \" && d1 >= 0) {\\n\\n                ch = int(mod(float(pos), \").concat(inChannels, \".));\\n\\n                if (\").concat(isChannelsLast, \") {\\n                  innerDims = vec2(d1, ch);\\n                  result[\").concat(row * 2 + col, \"] = getChannel(\\n                    getA(d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[\").concat(row * 2 + col, \"] = getChannel(\\n                    getA(ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        \");\n      }\n    }\n    this.userCode = \"\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        \".concat(unrolled, \"\\n\\n        \").concat(glsl.output, \" = result;\\n      }\\n    \");\n  }\n}","map":{"version":3,"names":["getGlslDifferences","Im2ColPackedProgram","constructor","outputShape","inputShape","convInfo","variableNames","packedInputs","packedOutput","filterWidth","inChannels","strideWidth","strideHeight","padInfo","outWidth","dilationWidth","dilationHeight","dataFormat","left","top","itemsPerBlockRow","glsl","isChannelsLast","rowDim","colDim","unrolled","row","col","concat","userCode","output"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\im2col_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      outputShape: number[], inputShape: number[],\n      convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n\n    const {\n      filterWidth,\n      inChannels,\n      strideWidth,\n      strideHeight,\n      padInfo,\n      outWidth,\n      dilationWidth,\n      dilationHeight,\n      dataFormat\n    } = convInfo;\n    const {left, top} = padInfo;\n    const itemsPerBlockRow = inChannels * filterWidth;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${\n            top};\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\n\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${\n            strideWidth}. - ${left}.);\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${\n            itemsPerBlockRow}.) / ${inChannels}.));\n\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${inChannels}.));\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,kBAAkB,QAAO,gBAAgB;AAGjD,OAAM,MAAOC,mBAAmB;EAO9BC,YACIC,WAAqB,EAAEC,UAAoB,EAC3CC,QAAiC;IARrC,KAAAC,aAAa,GAAG,CAAC,GAAG,CAAC;IACrB,KAAAC,YAAY,GAAG,IAAI;IACnB,KAAAC,YAAY,GAAG,IAAI;IAOjB,IAAI,CAACL,WAAW,GAAGA,WAAW;IAE9B,MAAM;MACJM,WAAW;MACXC,UAAU;MACVC,WAAW;MACXC,YAAY;MACZC,OAAO;MACPC,QAAQ;MACRC,aAAa;MACbC,cAAc;MACdC;IAAU,CACX,GAAGZ,QAAQ;IACZ,MAAM;MAACa,IAAI;MAAEC;IAAG,CAAC,GAAGN,OAAO;IAC3B,MAAMO,gBAAgB,GAAGV,UAAU,GAAGD,WAAW;IACjD,MAAMY,IAAI,GAAGrB,kBAAkB,EAAE;IACjC,MAAMsB,cAAc,GAAGL,UAAU,KAAK,cAAc;IACpD,MAAMM,MAAM,GAAGD,cAAc,GAAG,CAAC,GAAG,CAAC;IACrC,MAAME,MAAM,GAAGF,cAAc,GAAG,CAAC,GAAG,CAAC;IAErC,IAAIG,QAAQ,KAAK;IAEjB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;MACjC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;QACjCF,QAAQ,uCAAAG,MAAA,CACgBD,GAAG,gCAAAC,MAAA,CACVF,GAAG,qCAAAE,MAAA,CAEAzB,WAAW,CAAC,CAAC,CAAC,gBAAAyB,MAAA,CAAazB,WAAW,CAAC,CAAC,CAAC,mDAAAyB,MAAA,CAC3Bd,QAAQ,WAAAc,MAAA,CAAQhB,YAAY,SAAAgB,MAAA,CAC1DT,GAAG,oCAAAS,MAAA,CACcZ,cAAc,gBAAAY,MAAA,CAAaR,gBAAgB,gCAAAQ,MAAA,CAElDxB,UAAU,CAACmB,MAAM,CAAC,2EAAAK,MAAA,CAEad,QAAQ,WAAAc,MAAA,CACjDjB,WAAW,UAAAiB,MAAA,CAAOV,IAAI,wCAAAU,MAAA,CACHb,aAAa,8BAAAa,MAAA,CAChCR,gBAAgB,WAAAQ,MAAA,CAAQlB,UAAU,oCAAAkB,MAAA,CAEtBxB,UAAU,CAACoB,MAAM,CAAC,iEAAAI,MAAA,CAEClB,UAAU,kCAAAkB,MAAA,CAE/BN,cAAc,iFAAAM,MAAA,CAETF,GAAG,GAAG,CAAC,GAAGC,GAAG,2NAAAC,MAAA,CAKbF,GAAG,GAAG,CAAC,GAAGC,GAAG,kMAO/B;;;IAIL,IAAI,CAACE,QAAQ,uMAAAD,MAAA,CASPH,QAAQ,kBAAAG,MAAA,CAERP,IAAI,CAACS,MAAM,8BAEhB;EACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}