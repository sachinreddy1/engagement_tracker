{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, slice_util, StridedSlice } from '@tensorflow/tfjs-core';\nimport { stridedSliceImplCPU } from '../kernel_utils/shared';\nimport { StridedSliceProgram } from '../strided_slice_gpu';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function stridedSlice(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n  const {\n    nonStrided,\n    $begin,\n    $strides,\n    size,\n    newShape,\n    outShape\n  } = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n  const $x = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: newShape\n    }\n  });\n  let result;\n  if (nonStrided) {\n    const sliced = slice({\n      inputs: {\n        x: $x\n      },\n      backend,\n      attrs: {\n        begin: $begin,\n        size\n      }\n    });\n    result = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(axis => axis === 0)) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([$x]);\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get($x.dataId);\n      const values = xTexData.values;\n      const xBuf = buffer($x.shape, $x.dtype, values);\n      const resultValues = stridedSliceImplCPU(outShape, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(outShape, $x.dtype, resultValues.values);\n    } else {\n      const program = new StridedSliceProgram($begin, $strides, outShape);\n      result = backend.runWebGLProgram(program, [$x], $x.dtype);\n    }\n  }\n  const resultReshaped = reshape({\n    inputs: {\n      x: result\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n  return resultReshaped;\n}\nexport const stridedSliceConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice\n};","map":{"version":3,"names":["buffer","slice_util","StridedSlice","stridedSliceImplCPU","StridedSliceProgram","reshape","slice","stridedSlice","args","inputs","backend","attrs","x","begin","end","strides","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","nonStrided","$begin","$strides","size","newShape","outShape","sliceInfo","shape","$x","result","sliced","disposeIntermediateTensorInfo","some","axis","makeTensorInfo","dtype","shouldExecuteOnCPU","xTexData","texData","get","dataId","values","xBuf","resultValues","program","runWebGLProgram","resultReshaped","stridedSliceConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\StridedSlice.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\nimport {StridedSliceProgram} from '../strided_slice_gpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendWebGL,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {nonStrided, $begin, $strides, size, newShape, outShape} =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  const $x = reshape({inputs: {x}, backend, attrs: {shape: newShape}});\n\n  let result;\n  if (nonStrided) {\n    const sliced =\n        slice({inputs: {x: $x}, backend, attrs: {begin: $begin, size}});\n    result = reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(axis => axis === 0)) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([$x]);\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get($x.dataId);\n      const values = xTexData.values as TypedArray;\n      const xBuf = buffer($x.shape, $x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(outShape, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(outShape, $x.dtype, resultValues.values);\n    } else {\n      const program = new StridedSliceProgram($begin, $strides, outShape);\n      result = backend.runWebGLProgram(program, [$x], $x.dtype);\n    }\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}