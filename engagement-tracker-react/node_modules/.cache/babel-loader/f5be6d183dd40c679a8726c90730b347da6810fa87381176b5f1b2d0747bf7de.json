{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedDepthwiseConv2D, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nexport function fusedDepthwiseConv2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  const intermediates = [];\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + \"1. Got strides \".concat(strides, \" and dilations '\").concat($dilations, \"'\"));\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ? mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) : null;\n  const programInputs = [x, filter];\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  let program;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  }\n  const result = backend.runWebGLProgram(program, programInputs, 'float32');\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D\n};","map":{"version":3,"names":["backend_util","env","FusedDepthwiseConv2D","util","DepthwiseConv2DProgram","DepthwiseConvPacked2DProgram","mapActivationToShaderProgram","fusedDepthwiseConv2D","args","inputs","backend","attrs","x","filter","bias","preluActivationWeights","strides","pad","dilations","dimRoundingMode","activation","leakyreluAlpha","intermediates","$dilations","assert","eitherStridesOrDilationsAreOne","concat","convInfo","computeConv2DInfo","shape","shouldPackDepthwiseConv","getBool","strideWidth","outChannels","inChannels","fusedActivation","programInputs","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","push","$leakyreluAlpha","makeTensorInfo","createScalarValue","program","result","runWebGLProgram","forEach","t","disposeIntermediateTensorInfo","fusedDepthwiseConv2DConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\FusedDepthwiseConv2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  const intermediates: TensorInfo[] = [];\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ?\n      mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n      null;\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  }\n\n  const result = backend.runWebGLProgram(program, programInputs, 'float32');\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}