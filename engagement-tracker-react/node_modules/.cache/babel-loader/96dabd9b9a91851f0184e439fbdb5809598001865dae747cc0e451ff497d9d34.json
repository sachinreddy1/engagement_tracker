{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, Tile, util } from '@tensorflow/tfjs-core';\nimport { tileImplCPU } from '../kernel_utils/shared';\nimport { TileProgram } from '../tile_gpu';\nexport function tile(params) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = params;\n  const {\n    x\n  } = inputs;\n  const {\n    reps\n  } = attrs;\n  if (x.dtype === 'string') {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const decodedData = data.map(d => util.decodeString(d));\n    const buf = buffer(x.shape, x.dtype, decodedData);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n  return output;\n}\nexport const tileConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile\n};","map":{"version":3,"names":["buffer","Tile","util","tileImplCPU","TileProgram","tile","params","inputs","backend","attrs","x","reps","dtype","data","readSync","dataId","decodedData","map","d","decodeString","buf","shape","outBuf","makeTensorInfo","values","program","output","runWebGLProgram","tileConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\Tile.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_gpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: MathBackendWebGL, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  if (x.dtype === 'string') {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId) as Uint8Array[];\n    const decodedData = data.map(d => util.decodeString(d));\n    const buf = buffer(x.shape, x.dtype, decodedData);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile as {} as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,EAAwCC,IAAI,EAAyBC,IAAI,QAAO,uBAAuB;AAGrH,SAAQC,WAAW,QAAO,wBAAwB;AAClD,SAAQC,WAAW,QAAO,aAAa;AAEvC,OAAM,SAAUC,IAAIA,CAChBC,MAAyE;EAE3E,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,MAAM;EACvC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI;EAAI,CAAC,GAAGF,KAAK;EAEpB,IAAIC,CAAC,CAACE,KAAK,KAAK,QAAQ,EAAE;IACxB;IACA;IACA,MAAMC,IAAI,GAAGL,OAAO,CAACM,QAAQ,CAACJ,CAAC,CAACK,MAAM,CAAiB;IACvD,MAAMC,WAAW,GAAGH,IAAI,CAACI,GAAG,CAACC,CAAC,IAAIhB,IAAI,CAACiB,YAAY,CAACD,CAAC,CAAC,CAAC;IACvD,MAAME,GAAG,GAAGpB,MAAM,CAACU,CAAC,CAACW,KAAK,EAAEX,CAAC,CAACE,KAAK,EAAEI,WAAW,CAAC;IACjD,MAAMM,MAAM,GAAGnB,WAAW,CAACiB,GAAG,EAAET,IAAI,CAAC;IACrC,OAAOH,OAAO,CAACe,cAAc,CAACD,MAAM,CAACD,KAAK,EAAEC,MAAM,CAACV,KAAK,EAAEU,MAAM,CAACE,MAAM,CAAC;;EAG1E,MAAMC,OAAO,GAAG,IAAIrB,WAAW,CAACM,CAAC,CAACW,KAAK,EAAEV,IAAI,CAAC;EAC9C,MAAMe,MAAM,GAAGlB,OAAO,CAACmB,eAAe,CAACF,OAAO,EAAE,CAACf,CAAC,CAAC,EAAEA,CAAC,CAACE,KAAK,CAAC;EAE7D,OAAOc,MAAM;AACf;AAEA,OAAO,MAAME,UAAU,GAAiB;EACtCC,UAAU,EAAE5B,IAAI;EAChB6B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE1B;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}