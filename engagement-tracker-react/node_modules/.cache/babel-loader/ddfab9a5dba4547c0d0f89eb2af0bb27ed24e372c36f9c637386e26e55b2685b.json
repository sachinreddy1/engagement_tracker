{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport class EncodeMatrixProgram {\n  constructor(outputShape, texShape) {\n    let inputIsUnsignedByte = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.variableNames = ['A'];\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n    let output = \"result\";\n    if (inputIsUnsignedByte) {\n      output = \"floor(result * 255. + 0.5)\";\n    }\n    this.userCode = \"\\n      \".concat(shader_util.getFlatIndexFrom3D(outputShape), \"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        int flatIndex = getFlatIndex(coords);\\n        int offset = imod(flatIndex, 4);\\n\\n        flatIndex = idiv(flatIndex, 4, 1.);\\n\\n        int r = flatIndex / \").concat(width, \";\\n        int c = imod(flatIndex, \").concat(width, \");\\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(\").concat(width, \".0, \").concat(height, \".0);\\n        vec4 values = \").concat(glsl.texture2D, \"(A, uv);\\n\\n        float result;\\n\\n        if(offset == 0) {\\n          result = values[0];\\n        } else if(offset == 1) {\\n          result = values[1];\\n        } else if(offset == 2) {\\n          result = values[2];\\n        } else {\\n          result = values[3];\\n        }\\n\\n        \").concat(glsl.output, \" = vec4(\").concat(output, \", 0., 0., 0.);\\n      }\\n    \");\n  }\n}","map":{"version":3,"names":["getGlslDifferences","shader_util","EncodeMatrixProgram","constructor","outputShape","texShape","inputIsUnsignedByte","arguments","length","undefined","variableNames","glsl","height","width","output","userCode","concat","getFlatIndexFrom3D","texture2D"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\encode_matrix_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${width};\n        int c = imod(flatIndex, ${width});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,kBAAkB,QAAO,gBAAgB;AAEjD,OAAO,KAAKC,WAAW,MAAM,wBAAwB;AAErD,OAAM,MAAOC,mBAAmB;EAK9BC,YACIC,WAAqC,EAAEC,QAA0B,EACtC;IAAA,IAA3BC,mBAAmB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAN/B,KAAAG,aAAa,GAAG,CAAC,GAAG,CAAC;IAOnB,MAAMC,IAAI,GAAGX,kBAAkB,EAAE;IACjC,MAAM,CAACY,MAAM,EAAEC,KAAK,CAAC,GAAGR,QAAQ;IAChC,IAAI,CAACD,WAAW,GAAGA,WAAW;IAE9B,IAAIU,MAAM,WAAW;IACrB,IAAIR,mBAAmB,EAAE;MACvBQ,MAAM,+BAA+B;;IAGvC,IAAI,CAACC,QAAQ,cAAAC,MAAA,CACTf,WAAW,CAACgB,kBAAkB,CAACb,WAAW,CAAC,kPAAAY,MAAA,CAUrBH,KAAK,yCAAAG,MAAA,CACDH,KAAK,yDAAAG,MAAA,CACUH,KAAK,UAAAG,MAAA,CAAOJ,MAAM,kCAAAI,MAAA,CAC3CL,IAAI,CAACO,SAAS,6SAAAF,MAAA,CAc5BL,IAAI,CAACG,MAAM,cAAAE,MAAA,CAAWF,MAAM,kCAEjC;EACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}