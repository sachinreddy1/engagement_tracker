{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\nexport class EncodeMatrixPackedProgram {\n  constructor(outputShape, texShape) {\n    let inputIsUnsignedByte = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.variableNames = ['A'];\n    this.packedInputs = false;\n    this.packedOutput = true;\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n        mainLoop += \"\\n          localCoords = coords;\\n          if(localCoords[2] + \".concat(col, \" < \").concat(outputShape[2], \") {\\n            localCoords[2] += \").concat(col, \";\\n            if(localCoords[1] + \").concat(row, \" < \").concat(outputShape[1], \") {\\n              localCoords[1] += \").concat(row, \";\\n\\n              flatIndex = getFlatIndex(localCoords);\\n              offset = imod(flatIndex, 4);\\n\\n              flatIndex = idiv(flatIndex, 4, 1.);\\n\\n              r = flatIndex / \").concat(width, \";\\n              c = imod(flatIndex, \").concat(width, \");\\n              uv = (vec2(c, r) + halfCR) / vec2(\").concat(width, \".0, \").concat(height, \".0);\\n              values = \").concat(glsl.texture2D, \"(A, uv);\\n\\n              if(offset == 0) {\\n                result[\").concat(channel, \"] = values[0];\\n              } else if(offset == 1) {\\n                result[\").concat(channel, \"] = values[1];\\n              } else if(offset == 2) {\\n                result[\").concat(channel, \"] = values[2];\\n              } else {\\n                result[\").concat(channel, \"] = values[3];\\n              }\\n            }\\n          }\\n        \");\n      }\n    }\n    this.userCode = \"\\n      \".concat(shader_util.getFlatIndexFrom3D(outputShape), \"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n        int flatIndex, r, c, offset;\\n        ivec3 localCoords;\\n        vec2 uv;\\n        vec4 values;\\n\\n        \").concat(mainLoop, \"\\n\\n        \").concat(glsl.output, \" = \").concat(output, \";\\n      }\\n    \");\n  }\n}","map":{"version":3,"names":["getGlslDifferences","shader_util","EncodeMatrixPackedProgram","constructor","outputShape","texShape","inputIsUnsignedByte","arguments","length","undefined","variableNames","packedInputs","packedOutput","glsl","height","width","mainLoop","output","row","col","channel","concat","texture2D","userCode","getFlatIndexFrom3D"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\encode_matrix_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape: [number, number, number], texShape: [number, number],\n      inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    const [height, width] = texShape;\n    this.outputShape = outputShape;\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${outputShape[2]}) {\n            localCoords[2] += ${col};\n            if(localCoords[1] + ${row} < ${outputShape[1]}) {\n              localCoords[1] += ${row};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${width};\n              c = imod(flatIndex, ${width});\n              uv = (vec2(c, r) + halfCR) / vec2(${width}.0, ${height}.0);\n              values = ${glsl.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${channel}] = values[0];\n              } else if(offset == 1) {\n                result[${channel}] = values[1];\n              } else if(offset == 2) {\n                result[${channel}] = values[2];\n              } else {\n                result[${channel}] = values[3];\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      ${shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${mainLoop}\n\n        ${glsl.output} = ${output};\n      }\n    `;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,kBAAkB,QAAO,gBAAgB;AAEjD,OAAO,KAAKC,WAAW,MAAM,wBAAwB;AAErD;;;;;;;;;;;;;;;AAgBA,OAAM,MAAOC,yBAAyB;EAOpCC,YACIC,WAAqC,EAAEC,QAA0B,EACtC;IAAA,IAA3BC,mBAAmB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAR/B,KAAAG,aAAa,GAAG,CAAC,GAAG,CAAC;IAGrB,KAAAC,YAAY,GAAG,KAAK;IACpB,KAAAC,YAAY,GAAG,IAAI;IAKjB,MAAMC,IAAI,GAAGb,kBAAkB,EAAE;IACjC,MAAM,CAACc,MAAM,EAAEC,KAAK,CAAC,GAAGV,QAAQ;IAChC,IAAI,CAACD,WAAW,GAAGA,WAAW;IAE9B,IAAIY,QAAQ,GAAG,EAAE;IACjB,IAAIC,MAAM,GAAG,QAAQ;IACrB,IAAIX,mBAAmB,EAAE;MACvBW,MAAM,GAAG,4BAA4B;;IAGvC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;MACjC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;QACjC,MAAMC,OAAO,GAAGF,GAAG,GAAG,CAAC,GAAGC,GAAG;QAE7BH,QAAQ,wEAAAK,MAAA,CAEgBF,GAAG,SAAAE,MAAA,CAAMjB,WAAW,CAAC,CAAC,CAAC,yCAAAiB,MAAA,CACvBF,GAAG,yCAAAE,MAAA,CACDH,GAAG,SAAAG,MAAA,CAAMjB,WAAW,CAAC,CAAC,CAAC,2CAAAiB,MAAA,CACvBH,GAAG,kMAAAG,MAAA,CAOLN,KAAK,2CAAAM,MAAA,CACDN,KAAK,0DAAAM,MAAA,CACSN,KAAK,UAAAM,MAAA,CAAOP,MAAM,mCAAAO,MAAA,CAC3CR,IAAI,CAACS,SAAS,0EAAAD,MAAA,CAGdD,OAAO,qFAAAC,MAAA,CAEPD,OAAO,qFAAAC,MAAA,CAEPD,OAAO,qEAAAC,MAAA,CAEPD,OAAO,0EAIvB;;;IAIL,IAAI,CAACG,QAAQ,cAAAF,MAAA,CACTpB,WAAW,CAACuB,kBAAkB,CAACpB,WAAW,CAAC,iOAAAiB,MAAA,CAWzCL,QAAQ,kBAAAK,MAAA,CAERR,IAAI,CAACI,MAAM,SAAAI,MAAA,CAAMJ,MAAM,qBAE5B;EACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}