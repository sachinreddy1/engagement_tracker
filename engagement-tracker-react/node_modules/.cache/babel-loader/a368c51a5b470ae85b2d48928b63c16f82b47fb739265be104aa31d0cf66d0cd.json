{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, upcastType } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { complex } from '../kernels/Complex';\nimport { LEAKYRELU, LEAKYRELU_PACKED } from '../kernels/LeakyRelu';\nimport { PRELU, PRELU_PACKED } from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\nexport const CHECK_NAN_SNIPPET_BINARY = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\nexport const CHECK_NAN_SNIPPET_BINARY_PACKED = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  cpuKernelImpl,\n  dtype\n}) {\n  return ({\n    inputs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    const webglBackend = backend;\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}) {\n  return ({\n    inputs,\n    backend\n  }) => {\n    const {\n      a,\n      b\n    } = inputs;\n    const webglBackend = backend;\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n      const [real, imag] = [[aData.complexTensorInfos.real, bData.complexTensorInfos.real], [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n      const complexOutput = complex({\n        inputs: {\n          real,\n          imag\n        },\n        backend: webglBackend\n      });\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n      return complexOutput;\n    }\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if (webglBackend.shouldExecuteOnCPU([a, b]) && cpuKernelImpl != null) {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n      const [outValues, outShape] = cpuKernelImpl(a.shape, b.shape, aData.values, bData.values, $dtype);\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') && packedOpSnippet != null;\n    let program;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\nexport function mapActivationToShaderProgram(activation, packed = false) {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  }\n  throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);\n}","map":{"version":3,"names":["env","upcastType","BinaryOpProgram","BinaryOpPackedProgram","complex","LEAKYRELU","LEAKYRELU_PACKED","PRELU","PRELU_PACKED","unary_op","UnaryOpProgram","unary_packed_op","UnaryOpPackedProgram","CHECK_NAN_SNIPPET_UNARY","CHECK_NAN_SNIPPET_BINARY","CHECK_NAN_SNIPPET_BINARY_PACKED","unaryKernelFunc","opSnippet","packedOpSnippet","cpuKernelImpl","dtype","inputs","backend","x","webglBackend","$dtype","shouldExecuteOnCPU","xData","texData","get","dataId","outValues","values","makeTensorInfo","shape","shouldUsePackedProgram","getBool","program","runWebGLProgram","binaryKernelFunc","checkOutOfBounds","supportsComplex","a","b","aData","bData","real","imag","complexTensorInfos","map","complexParts","aPart","bPart","aHandle","bHandle","complexOutput","disposeIntermediateTensorInfo","outShape","out","outData","mapActivationToShaderProgram","activation","packed","LINEAR","RELU","ELU","RELU6","Error"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernel_utils\\kernel_funcs_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, env, KernelFunc, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {complex} from '../kernels/Complex';\nimport {LEAKYRELU, LEAKYRELU_PACKED} from '../kernels/LeakyRelu';\nimport {PRELU, PRELU_PACKED} from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n\nexport const CHECK_NAN_SNIPPET_BINARY = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const CHECK_NAN_SNIPPET_BINARY_PACKED = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\ntype UnaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opSnippet, packedOpSnippet, cpuKernelImpl, dtype}: UnaryKernelFuncConfig):\n    KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  checkOutOfBounds?: boolean,\n  supportsComplex?: boolean,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}: BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n\n      const [real, imag] = [\n        [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n        [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n      ].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(\n            program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webglBackend});\n\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if (webglBackend.shouldExecuteOnCPU([a, b]) && cpuKernelImpl != null) {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n      const [outValues, outShape] = cpuKernelImpl(\n          a.shape, b.shape, aData.values as TypedArray,\n          bData.values as TypedArray, $dtype);\n\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n        packedOpSnippet != null;\n    let program: BinaryOpProgram|BinaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(\n          packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\n\nexport function mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAA8CA,GAAG,EAAuCC,UAAU,QAAO,uBAAuB;AAGhI,SAAQC,eAAe,QAAO,iBAAiB;AAC/C,SAAQC,qBAAqB,QAAO,wBAAwB;AAC5D,SAAQC,OAAO,QAAO,oBAAoB;AAC1C,SAAQC,SAAS,EAAEC,gBAAgB,QAAO,sBAAsB;AAChE,SAAQC,KAAK,EAAEC,YAAY,QAAO,kBAAkB;AACpD,OAAO,KAAKC,QAAQ,MAAM,gBAAgB;AAC1C,SAAQC,cAAc,QAAO,gBAAgB;AAC7C,OAAO,KAAKC,eAAe,MAAM,uBAAuB;AACxD,SAAQC,oBAAoB,QAAO,uBAAuB;AAI1D,OAAO,MAAMC,uBAAuB,GAAG,yBAAyB;AAEhE,OAAO,MAAMC,wBAAwB,GAAG;;;CAGvC;AAED,OAAO,MAAMC,+BAA+B,GAAG;;;;;CAK9C;AASD;;;;;;;;AAQA,OAAM,SAAUC,eAAeA,CAC3B;EAACC,SAAS;EAAEC,eAAe;EAAEC,aAAa;EAAEC;AAAK,CAAwB;EAE3E,OAAO,CAAC;IAACC,MAAM;IAAEC;EAAO,CAAC,KAAI;IAC3B,MAAM;MAACC;IAAC,CAAC,GAAGF,MAAqB;IACjC,MAAMG,YAAY,GAAGF,OAA2B;IAEhD,MAAMG,MAAM,GAAGL,KAAK,IAAIG,CAAC,CAACH,KAAK;IAC/B,IAAII,YAAY,CAACE,kBAAkB,CAAC,CAACH,CAAC,CAAC,CAAC,IAAIJ,aAAa,IAAI,IAAI,EAAE;MACjE,MAAMQ,KAAK,GAAGH,YAAY,CAACI,OAAO,CAACC,GAAG,CAACN,CAAC,CAACO,MAAM,CAAC;MAChD,MAAMC,SAAS,GAAGZ,aAAa,CAACQ,KAAK,CAACK,MAAoB,EAAEP,MAAM,CAAC;MACnE,OAAOD,YAAY,CAACS,cAAc,CAACV,CAAC,CAACW,KAAK,EAAET,MAAM,EAAEM,SAAS,CAAC;;IAGhE,MAAMI,sBAAsB,GACxBnC,GAAG,EAAE,CAACoC,OAAO,CAAC,6BAA6B,CAAC,IAAIlB,eAAe,IAAI,IAAI;IAC3E,IAAImB,OAA4C;IAChD,IAAIF,sBAAsB,EAAE;MAC1BE,OAAO,GAAG,IAAIzB,oBAAoB,CAACW,CAAC,CAACW,KAAK,EAAEhB,eAAe,CAAC;KAC7D,MAAM;MACLmB,OAAO,GAAG,IAAI3B,cAAc,CAACa,CAAC,CAACW,KAAK,EAAEjB,SAAS,CAAC;;IAGlD,OAAOO,YAAY,CAACc,eAAe,CAACD,OAAO,EAAE,CAACd,CAAC,CAAC,EAAEE,MAAM,CAAC;EAC3D,CAAC;AACH;AAWA;;;;;;;;;;AAUA,OAAM,SAAUc,gBAAgBA,CAAC;EAC/BtB,SAAS;EACTC,eAAe;EACfsB,gBAAgB,GAAG,KAAK;EACxBC,eAAe,GAAG,KAAK;EACvBtB,aAAa;EACbC;AAAK,CACkB;EACvB,OAAO,CAAC;IAACC,MAAM;IAAEC;EAAO,CAAC,KAAI;IAC3B,MAAM;MAACoB,CAAC;MAAEC;IAAC,CAAC,GAAGtB,MAAsB;IACrC,MAAMG,YAAY,GAAGF,OAA2B;IAEhD,IAAImB,eAAe,IAAIC,CAAC,CAACtB,KAAK,KAAK,WAAW,EAAE;MAC9C,MAAMwB,KAAK,GAAGpB,YAAY,CAACI,OAAO,CAACC,GAAG,CAACa,CAAC,CAACZ,MAAM,CAAC;MAChD,MAAMe,KAAK,GAAGrB,YAAY,CAACI,OAAO,CAACC,GAAG,CAACc,CAAC,CAACb,MAAM,CAAC;MAEhD,MAAM,CAACgB,IAAI,EAAEC,IAAI,CAAC,GAAG,CACnB,CAACH,KAAK,CAACI,kBAAkB,CAACF,IAAI,EAAED,KAAK,CAACG,kBAAkB,CAACF,IAAI,CAAC,EAC9D,CAACF,KAAK,CAACI,kBAAkB,CAACD,IAAI,EAAEF,KAAK,CAACG,kBAAkB,CAACD,IAAI,CAAC,CAC/D,CAACE,GAAG,CAACC,YAAY,IAAG;QACnB,MAAM,CAACC,KAAK,EAAEC,KAAK,CAAC,GAAGF,YAAY;QAEnC,MAAMG,OAAO,GAAG;UACdvB,MAAM,EAAEqB,KAAK,CAACrB,MAAM;UACpBV,KAAK,EAAE+B,KAAK,CAAC/B,KAAK;UAClBc,KAAK,EAAEQ,CAAC,CAACR;SACV;QACD,MAAMoB,OAAO,GAAG;UACdxB,MAAM,EAAEsB,KAAK,CAACtB,MAAM;UACpBV,KAAK,EAAEgC,KAAK,CAAChC,KAAK;UAClBc,KAAK,EAAES,CAAC,CAACT;SACV;QAED,MAAMG,OAAO,GAAG,IAAInC,eAAe,CAACe,SAAS,EAAEyB,CAAC,CAACR,KAAK,EAAES,CAAC,CAACT,KAAK,CAAC;QAChE,OAAOV,YAAY,CAACc,eAAe,CAC/BD,OAAO,EAAE,CAACgB,OAAO,EAAEC,OAAO,CAAC,EAAErD,UAAU,CAACkD,KAAK,CAAC/B,KAAK,EAAEgC,KAAK,CAAChC,KAAK,CAAC,CAAC;MACxE,CAAC,CAAC;MAEF,MAAMmC,aAAa,GACfnD,OAAO,CAAC;QAACiB,MAAM,EAAE;UAACyB,IAAI;UAAEC;QAAI,CAAC;QAAEzB,OAAO,EAAEE;MAAY,CAAC,CAAC;MAE1DA,YAAY,CAACgC,6BAA6B,CAACV,IAAI,CAAC;MAChDtB,YAAY,CAACgC,6BAA6B,CAACT,IAAI,CAAC;MAEhD;MAEA,OAAOQ,aAAa;;IAGtB,MAAM9B,MAAM,GAAGL,KAAK,IAAInB,UAAU,CAACyC,CAAC,CAACtB,KAAK,EAAEuB,CAAC,CAACvB,KAAK,CAAC;IACpD,IAAII,YAAY,CAACE,kBAAkB,CAAC,CAACgB,CAAC,EAAEC,CAAC,CAAC,CAAC,IAAIxB,aAAa,IAAI,IAAI,EAAE;MACpE,MAAMyB,KAAK,GAAGpB,YAAY,CAACI,OAAO,CAACC,GAAG,CAACa,CAAC,CAACZ,MAAM,CAAC;MAChD,MAAMe,KAAK,GAAGrB,YAAY,CAACI,OAAO,CAACC,GAAG,CAACc,CAAC,CAACb,MAAM,CAAC;MAChD,MAAM,CAACC,SAAS,EAAE0B,QAAQ,CAAC,GAAGtC,aAAa,CACvCuB,CAAC,CAACR,KAAK,EAAES,CAAC,CAACT,KAAK,EAAEU,KAAK,CAACZ,MAAoB,EAC5Ca,KAAK,CAACb,MAAoB,EAAEP,MAAM,CAAC;MAEvC,MAAMiC,GAAG,GAAGlC,YAAY,CAACS,cAAc,CAACwB,QAAQ,EAAEhC,MAAM,CAAC;MACzD,MAAMkC,OAAO,GAAGnC,YAAY,CAACI,OAAO,CAACC,GAAG,CAAC6B,GAAG,CAAC5B,MAAM,CAAC;MACpD6B,OAAO,CAAC3B,MAAM,GAAGD,SAAS;MAC1B,OAAO2B,GAAG;;IAGZ,MAAMvB,sBAAsB,GACxBnC,GAAG,EAAE,CAACoC,OAAO,CAAC,8BAA8B,CAAC,IAC7ClB,eAAe,IAAI,IAAI;IAC3B,IAAImB,OAA8C;IAClD,IAAIF,sBAAsB,EAAE;MAC1BE,OAAO,GAAG,IAAIlC,qBAAqB,CAC/Be,eAAe,EAAEwB,CAAC,CAACR,KAAK,EAAES,CAAC,CAACT,KAAK,EAAEM,gBAAgB,CAAC;KACzD,MAAM;MACLH,OAAO,GAAG,IAAInC,eAAe,CAACe,SAAS,EAAEyB,CAAC,CAACR,KAAK,EAAES,CAAC,CAACT,KAAK,CAAC;;IAG5D,OAAOV,YAAY,CAACc,eAAe,CAACD,OAAO,EAAE,CAACK,CAAC,EAAEC,CAAC,CAAC,EAAElB,MAAM,CAAC;EAC9D,CAAC;AACH;AAEA,OAAM,SAAUmC,4BAA4BA,CACxCC,UAAmC,EAAEC,MAAM,GAAG,KAAK;EACrD,IAAID,UAAU,KAAK,QAAQ,EAAE;IAC3B,IAAIC,MAAM,EAAE;MACV,OAAOnD,eAAe,CAACoD,MAAM;;IAE/B,OAAOtD,QAAQ,CAACsD,MAAM;GACvB,MAAM,IAAIF,UAAU,KAAK,MAAM,EAAE;IAChC,IAAIC,MAAM,EAAE;MACV,OAAOnD,eAAe,CAACqD,IAAI;;IAE7B,OAAOvD,QAAQ,CAACuD,IAAI;GACrB,MAAM,IAAIH,UAAU,KAAK,KAAK,EAAE;IAC/B,IAAIC,MAAM,EAAE;MACV,OAAOnD,eAAe,CAACsD,GAAG;;IAE5B,OAAOxD,QAAQ,CAACwD,GAAG;GACpB,MAAM,IAAIJ,UAAU,KAAK,OAAO,EAAE;IACjC,IAAIC,MAAM,EAAE;MACV,OAAOnD,eAAe,CAACuD,KAAK;;IAE9B,OAAOzD,QAAQ,CAACyD,KAAK;GACtB,MAAM,IAAIL,UAAU,KAAK,OAAO,EAAE;IACjC,IAAIC,MAAM,EAAE;MACV,OAAOtD,YAAY;;IAErB,OAAOD,KAAK;GACb,MAAM,IAAIsD,UAAU,KAAK,WAAW,EAAE;IACrC,IAAIC,MAAM,EAAE;MACV,OAAOxD,gBAAgB;;IAEzB,OAAOD,SAAS;;EAElB,MAAM,IAAI8D,KAAK,CAAC,cACZN,UAAU,kDAAkD,CAAC;AACnE"},"metadata":{},"sourceType":"module","externalDependencies":[]}