{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose, mul, tensor1d, tidy } from '@tensorflow/tfjs-core';\nfunction standardizeSampleOrClassWeights(xWeight, outputNames, weightType) {\n  const numOutputs = outputNames.length;\n  if (xWeight == null || Array.isArray(xWeight) && xWeight.length === 0) {\n    return outputNames.map(name => null);\n  }\n  if (numOutputs === 1) {\n    if (Array.isArray(xWeight) && xWeight.length === 1) {\n      return xWeight;\n    } else if (typeof xWeight === 'object' && outputNames[0] in xWeight) {\n      return [xWeight[outputNames[0]]];\n    } else {\n      return [xWeight];\n    }\n  }\n  if (Array.isArray(xWeight)) {\n    if (xWeight.length !== numOutputs) {\n      throw new Error(\"Provided \".concat(weightType, \" is an array of \").concat(xWeight.length, \" \") + \"element(s), but the model has \".concat(numOutputs, \" outputs. \") + \"Make sure a set of weights is provided for each model output.\");\n    }\n    return xWeight;\n  } else if (typeof xWeight === 'object' && Object.keys(xWeight).length > 0 && typeof xWeight[Object.keys(xWeight)[0]] === 'object') {\n    const output = [];\n    outputNames.forEach(outputName => {\n      if (outputName in xWeight) {\n        output.push(xWeight[outputName]);\n      } else {\n        output.push(null);\n      }\n    });\n    return output;\n  } else {\n    throw new Error(\"The model has multiple (\".concat(numOutputs, \") outputs, \") + \"so \".concat(weightType, \" must be either an array with \") + \"\".concat(numOutputs, \" elements or an object with \").concat(outputNames, \" keys. \") + \"Provided \".concat(weightType, \" not understood: \").concat(JSON.stringify(xWeight)));\n  }\n}\n/**\n * Standardize class weighting objects.\n *\n * This function takes a single class-weighting object, an array of them,\n * or a map from output name to class-weighting object. It compares it to the\n * output name(s) of the model, base on which it outputs an array of\n * class-weighting objects of which the length matches the number of outputs.\n *\n * @param classWeight Input class-weighting object(s).\n * @param outputNames All output name(s) of the model.\n * @return An array of class-weighting objects. The length of the array matches\n *   the model's number of outputs.\n */\nexport function standardizeClassWeights(classWeight, outputNames) {\n  return standardizeSampleOrClassWeights(classWeight, outputNames, 'classWeight');\n}\nexport function standardizeSampleWeights(classWeight, outputNames) {\n  return standardizeSampleOrClassWeights(classWeight, outputNames, 'sampleWeight');\n}\n/**\n * Standardize by-sample and/or by-class weights for training.\n *\n * Note that this function operates on one model output at a time. For a model\n * with multiple outputs, you must call this function multiple times.\n *\n * @param y The target tensor that the by-sample and/or by-class weight is for.\n *     The values of y are assumed to encode the classes, either directly\n *     as an integer index, or as one-hot encoding.\n * @param sampleWeight By-sample weights.\n * @param classWeight By-class weights: an object mapping class indices\n *     (integers) to a weight (float) to apply to the model's loss for the\n *     samples from this class during training. This can be useful to tell the\n *     model to \"pay more attention\" to samples from an under-represented class.\n * @param sampleWeightMode The mode for the sample weights.\n * @return A Promise of weight tensor, of which the size of the first dimension\n *     matches that of `y`.\n */\nexport async function standardizeWeights(y, sampleWeight, classWeight, sampleWeightMode) {\n  if (sampleWeight != null || sampleWeightMode != null) {\n    // TODO(cais): Once 'temporal' mode is implemented, document it in the doc\n    // string.\n    throw new Error('Support sampleWeight is not implemented yet');\n  }\n  if (classWeight != null) {\n    // Apply class weights per sample.\n    const yClasses = tidy(() => {\n      if (y.shape.length === 1) {\n        // Assume class indices.\n        return y.clone();\n      } else if (y.shape.length === 2) {\n        if (y.shape[1] > 1) {\n          // Assume one-hot encoding of classes.\n          const axis = 1;\n          return y.argMax(axis);\n        } else if (y.shape[1] === 1) {\n          // Class index.\n          return y.reshape([y.shape[0]]);\n        } else {\n          throw new Error(\"Encountered unexpected last-dimension size (\".concat(y.shape[1], \") \") + \"during handling of class weights. The size is expected to be \" + \">= 1.\");\n        }\n      } else {\n        throw new Error(\"Unexpected rank of target (y) tensor (\".concat(y.rank, \") during \") + \"handling of class weights. The rank is expected to be 1 or 2.\");\n      }\n    });\n    const yClassIndices = Array.from(await yClasses.data());\n    dispose(yClasses);\n    const classSampleWeight = [];\n    yClassIndices.forEach(classIndex => {\n      if (classWeight[classIndex] == null) {\n        throw new Error(\"classWeight must contain all classes in the training data. \" + \"The class \".concat(classIndex, \" exists in the data but not in \") + \"classWeight\");\n      } else {\n        classSampleWeight.push(classWeight[classIndex]);\n      }\n    });\n    return tensor1d(classSampleWeight, 'float32');\n  } else {\n    return null;\n  }\n}\n/**\n * Apply per-sample weights on the loss values from a number of samples.\n *\n * @param losses Loss tensor of shape `[batchSize]`.\n * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.\n * @returns Tensor of the same shape as`losses`.\n */\nexport function computeWeightedLoss(losses, sampleWeights) {\n  return mul(losses, sampleWeights);\n}","map":{"version":3,"names":["dispose","mul","tensor1d","tidy","standardizeSampleOrClassWeights","xWeight","outputNames","weightType","numOutputs","length","Array","isArray","map","name","Error","concat","Object","keys","output","forEach","outputName","push","JSON","stringify","standardizeClassWeights","classWeight","standardizeSampleWeights","standardizeWeights","y","sampleWeight","sampleWeightMode","yClasses","shape","clone","axis","argMax","reshape","rank","yClassIndices","from","data","classSampleWeight","classIndex","computeWeightedLoss","losses","sampleWeights"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-layers\\src\\engine\\training_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {dispose, mul, Tensor, Tensor1D, tensor1d, tidy} from '@tensorflow/tfjs-core';\n\n/**\n * For multi-class classification problems, this object is designed to store a\n * mapping from class index to the \"weight\" of the class, where higher weighted\n * classes have larger impact on loss, accuracy, and other metrics.\n *\n * This is useful for cases in which you want the model to \"pay more attention\"\n * to examples from an under-represented class, e.g., in unbalanced datasets.\n */\nexport type ClassWeight = {\n  [classIndex: number]: number\n};\n\n/**\n * Class weighting for a model with multiple outputs.\n *\n * This object maps each output name to a class-weighting object.\n */\nexport type ClassWeightMap = {\n  [outputName: string]: ClassWeight\n};\n\nfunction standardizeSampleOrClassWeights(\n    xWeight: ClassWeight|ClassWeight[]|ClassWeightMap, outputNames: string[],\n    weightType: 'sampleWeight'|'classWeight'): ClassWeight[] {\n  const numOutputs = outputNames.length;\n  if (xWeight == null || (Array.isArray(xWeight) && xWeight.length === 0)) {\n    return outputNames.map(name => null);\n  }\n  if (numOutputs === 1) {\n    if (Array.isArray(xWeight) && xWeight.length === 1) {\n      return xWeight;\n    } else if (typeof xWeight === 'object' && outputNames[0] in xWeight) {\n      return [(xWeight as ClassWeightMap)[outputNames[0]]];\n    } else {\n      return [xWeight as ClassWeight];\n    }\n  }\n  if (Array.isArray(xWeight)) {\n    if (xWeight.length !== numOutputs) {\n      throw new Error(\n          `Provided ${weightType} is an array of ${xWeight.length} ` +\n          `element(s), but the model has ${numOutputs} outputs. ` +\n          `Make sure a set of weights is provided for each model output.`);\n    }\n    return xWeight;\n  } else if (\n      typeof xWeight === 'object' && Object.keys(xWeight).length > 0 &&\n      typeof (xWeight as ClassWeightMap)[Object.keys(xWeight)[0]] ===\n          'object') {\n    const output: ClassWeight[] = [];\n    outputNames.forEach(outputName => {\n      if (outputName in xWeight) {\n        output.push((xWeight as ClassWeightMap)[outputName]);\n      } else {\n        output.push(null);\n      }\n    });\n    return output;\n  } else {\n    throw new Error(\n        `The model has multiple (${numOutputs}) outputs, ` +\n        `so ${weightType} must be either an array with ` +\n        `${numOutputs} elements or an object with ${outputNames} keys. ` +\n        `Provided ${weightType} not understood: ${JSON.stringify(xWeight)}`);\n  }\n}\n\n/**\n * Standardize class weighting objects.\n *\n * This function takes a single class-weighting object, an array of them,\n * or a map from output name to class-weighting object. It compares it to the\n * output name(s) of the model, base on which it outputs an array of\n * class-weighting objects of which the length matches the number of outputs.\n *\n * @param classWeight Input class-weighting object(s).\n * @param outputNames All output name(s) of the model.\n * @return An array of class-weighting objects. The length of the array matches\n *   the model's number of outputs.\n */\nexport function standardizeClassWeights(\n    classWeight: ClassWeight|ClassWeight[]|ClassWeightMap,\n    outputNames: string[]): ClassWeight[] {\n  return standardizeSampleOrClassWeights(\n      classWeight, outputNames, 'classWeight');\n}\n\nexport function standardizeSampleWeights(\n    classWeight: ClassWeight|ClassWeight[]|ClassWeightMap,\n    outputNames: string[]): ClassWeight[] {\n  return standardizeSampleOrClassWeights(\n      classWeight, outputNames, 'sampleWeight');\n}\n\n/**\n * Standardize by-sample and/or by-class weights for training.\n *\n * Note that this function operates on one model output at a time. For a model\n * with multiple outputs, you must call this function multiple times.\n *\n * @param y The target tensor that the by-sample and/or by-class weight is for.\n *     The values of y are assumed to encode the classes, either directly\n *     as an integer index, or as one-hot encoding.\n * @param sampleWeight By-sample weights.\n * @param classWeight By-class weights: an object mapping class indices\n *     (integers) to a weight (float) to apply to the model's loss for the\n *     samples from this class during training. This can be useful to tell the\n *     model to \"pay more attention\" to samples from an under-represented class.\n * @param sampleWeightMode The mode for the sample weights.\n * @return A Promise of weight tensor, of which the size of the first dimension\n *     matches that of `y`.\n */\nexport async function standardizeWeights(\n    y: Tensor, sampleWeight?: Tensor, classWeight?: ClassWeight,\n    sampleWeightMode?: 'temporal'): Promise<Tensor> {\n  if (sampleWeight != null || sampleWeightMode != null) {\n    // TODO(cais): Once 'temporal' mode is implemented, document it in the doc\n    // string.\n    throw new Error('Support sampleWeight is not implemented yet');\n  }\n\n  if (classWeight != null) {\n    // Apply class weights per sample.\n    const yClasses: Tensor1D = tidy(() => {\n      if (y.shape.length === 1) {\n        // Assume class indices.\n        return y.clone() as Tensor1D;\n      } else if (y.shape.length === 2) {\n        if (y.shape[1] > 1) {\n          // Assume one-hot encoding of classes.\n          const axis = 1;\n          return y.argMax(axis);\n        } else if (y.shape[1] === 1) {\n          // Class index.\n          return y.reshape([y.shape[0]]);\n        } else {\n          throw new Error(\n              `Encountered unexpected last-dimension size (${y.shape[1]}) ` +\n              `during handling of class weights. The size is expected to be ` +\n              `>= 1.`);\n        }\n      } else {\n        throw new Error(\n            `Unexpected rank of target (y) tensor (${y.rank}) during ` +\n            `handling of class weights. The rank is expected to be 1 or 2.`);\n      }\n    });\n\n    const yClassIndices = Array.from(await yClasses.data());\n    dispose(yClasses);\n    const classSampleWeight: number[] = [];\n    yClassIndices.forEach(classIndex => {\n      if (classWeight[classIndex] == null) {\n        throw new Error(\n            `classWeight must contain all classes in the training data. ` +\n            `The class ${classIndex} exists in the data but not in ` +\n            `classWeight`);\n      } else {\n        classSampleWeight.push(classWeight[classIndex]);\n      }\n    });\n\n    return tensor1d(classSampleWeight, 'float32');\n  } else {\n    return null;\n  }\n}\n\n/**\n * Apply per-sample weights on the loss values from a number of samples.\n *\n * @param losses Loss tensor of shape `[batchSize]`.\n * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.\n * @returns Tensor of the same shape as`losses`.\n */\nexport function computeWeightedLoss(losses: Tensor, sampleWeights: Tensor) {\n  return mul(losses, sampleWeights);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}