{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function topKImpl(x, xShape, xDtype, k, sorted) {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    const valAndInd = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({\n        value: vals[i],\n        index: i\n      });\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n  return [buffer(outputShape, xDtype, allTopKVals), buffer(outputShape, 'int32', allTopKIndices)];\n}","map":{"version":3,"names":["buffer","util","topKImpl","x","xShape","xDtype","k","sorted","lastDim","length","batch","size","allTopKVals","getTypedArrayFromDType","allTopKIndices","b","offset","vals","subarray","valAndInd","i","push","value","index","sort","a","outOffset","topKVals","topKIndices","outputShape","slice"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\TopK_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    const valAndInd: Array<{value: number, index: number}> = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({value: vals[i], index: i});\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA;AAEA,SAAQA,MAAM,EAAqEC,IAAI,QAAO,uBAAuB;AAErH,OAAM,SAAUC,QAAQA,CACpBC,CAAa,EAAEC,MAAgB,EAAEC,MAAuB,EAAEC,CAAS,EACnEC,MAAe;EAEjB;EACA,MAAMC,OAAO,GAAGJ,MAAM,CAACA,MAAM,CAACK,MAAM,GAAG,CAAC,CAAC;EACzC,MAAM,CAACC,KAAK,EAAEC,IAAI,CAAC,GAAG,CAACR,CAAC,CAACM,MAAM,GAAGD,OAAO,EAAEA,OAAO,CAAC;EACnD,MAAMI,WAAW,GAAGX,IAAI,CAACY,sBAAsB,CAACR,MAAM,EAAEK,KAAK,GAAGJ,CAAC,CAAC;EAClE,MAAMQ,cAAc,GAAGb,IAAI,CAACY,sBAAsB,CAAC,OAAO,EAAEH,KAAK,GAAGJ,CAAC,CAAC;EAEtE,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,EAAEK,CAAC,EAAE,EAAE;IAC9B,MAAMC,MAAM,GAAGD,CAAC,GAAGJ,IAAI;IACvB,MAAMM,IAAI,GAAGd,CAAC,CAACe,QAAQ,CAACF,MAAM,EAAEA,MAAM,GAAGL,IAAI,CAAC;IAC9C,MAAMQ,SAAS,GAA0C,EAAE;IAC3D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACR,MAAM,EAAEW,CAAC,EAAE,EAAE;MACpCD,SAAS,CAACE,IAAI,CAAC;QAACC,KAAK,EAAEL,IAAI,CAACG,CAAC,CAAC;QAAEG,KAAK,EAAEH;MAAC,CAAC,CAAC;;IAE5CD,SAAS,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEV,CAAC,KAAKA,CAAC,CAACO,KAAK,GAAGG,CAAC,CAACH,KAAK,CAAC;IAE3C,MAAMI,SAAS,GAAGX,CAAC,GAAGT,CAAC;IACvB,MAAMqB,QAAQ,GAAGf,WAAW,CAACM,QAAQ,CAACQ,SAAS,EAAEA,SAAS,GAAGpB,CAAC,CAAC;IAC/D,MAAMsB,WAAW,GAAGd,cAAc,CAACI,QAAQ,CAACQ,SAAS,EAAEA,SAAS,GAAGpB,CAAC,CAAC;IACrE,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,CAAC,EAAEc,CAAC,EAAE,EAAE;MAC1BO,QAAQ,CAACP,CAAC,CAAC,GAAGD,SAAS,CAACC,CAAC,CAAC,CAACE,KAAK;MAChCM,WAAW,CAACR,CAAC,CAAC,GAAGD,SAAS,CAACC,CAAC,CAAC,CAACG,KAAK;;;EAGvC;EACA;EACA,MAAMM,WAAW,GAAGzB,MAAM,CAAC0B,KAAK,EAAE;EAClCD,WAAW,CAACA,WAAW,CAACpB,MAAM,GAAG,CAAC,CAAC,GAAGH,CAAC;EAEvC,OAAO,CACLN,MAAM,CAAC6B,WAA0B,EAAExB,MAAM,EAAEO,WAAW,CAAC,EACvDZ,MAAM,CAAC6B,WAA0B,EAAE,OAAO,EAAEf,cAAc,CAAC,CAC5D;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}