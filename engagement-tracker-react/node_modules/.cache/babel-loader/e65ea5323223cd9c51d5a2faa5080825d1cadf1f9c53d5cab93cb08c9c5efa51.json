{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv2DBackpropFilter } from '../kernel_names';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the filter of a 2D convolution.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.\n * @param dy The dy image, of rank 4 or rank 3, of shape\n *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.\n * @param filterShape The shape of the filter, length 4,\n *     [filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction conv2DBackpropFilter_(x, dy, filterShape, strides, pad) {\n  let dataFormat = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'NHWC';\n  let dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  let x4D = x;\n  if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  }\n  let dy4D = dy;\n  if (dy4D.rank === 3) {\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n  util.assert(x4D.rank === 4, () => \"Error in conv2dDerFilter: input must be rank 4, but got shape \" + \"\".concat(x4D.shape, \".\"));\n  util.assert(dy4D.rank === 4, () => \"Error in conv2dDerFilter: dy must be rank 4, but got shape \" + \"\".concat(dy4D.shape, \".\"));\n  util.assert(filterShape.length === 4, () => \"Error in conv2dDerFilter: filterShape must be length 4, but got \" + \"\".concat(filterShape, \".\"));\n  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(inDepth === filterShape[2], () => \"Error in conv2dDerFilter: depth of input \".concat(inDepth, \") must \") + \"match input depth in filter (\".concat(filterShape[2], \".\"));\n  util.assert(outDepth === filterShape[3], () => \"Error in conv2dDerFilter: depth of dy (\".concat(outDepth, \") must \") + \"match output depth for filter (\".concat(filterShape[3], \").\"));\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), () => \"Error in conv2dDerFilter: pad must be an integer when using, \" + \"dimRoundingMode \".concat(dimRoundingMode, \" but got pad \").concat(pad, \".\"));\n  }\n  const inputs = {\n    x: x4D,\n    dy: dy4D\n  };\n  const attrs = {\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode,\n    filterShape\n  };\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(Conv2DBackpropFilter, inputs, attrs);\n}\nexport const conv2DBackpropFilter = op({\n  conv2DBackpropFilter_\n});","map":{"version":3,"names":["ENGINE","Conv2DBackpropFilter","util","op","reshape","conv2DBackpropFilter_","x","dy","filterShape","strides","pad","dataFormat","arguments","length","undefined","dimRoundingMode","x4D","rank","shape","dy4D","assert","concat","inDepth","outDepth","isInt","inputs","attrs","runKernel","conv2DBackpropFilter"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\conv2d_backprop_filter.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the derivative of the filter of a 2D convolution.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.\n * @param dy The dy image, of rank 4 or rank 3, of shape\n *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.\n * @param filterShape The shape of the filter, length 4,\n *     [filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction conv2DBackpropFilter_<T extends Tensor3D|Tensor4D>(\n    x: T, dy: T, filterShape: [number, number, number, number],\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dimRoundingMode?: 'floor'|'round'|'ceil'): Tensor4D {\n  let x4D = x as Tensor4D;\n  if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  }\n  let dy4D = dy as Tensor4D;\n  if (dy4D.rank === 3) {\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in conv2dDerFilter: input must be rank 4, but got shape ` +\n          `${x4D.shape}.`);\n  util.assert(\n      dy4D.rank === 4,\n      () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ` +\n          `${dy4D.shape}.`);\n  util.assert(\n      filterShape.length === 4,\n      () => `Error in conv2dDerFilter: filterShape must be length 4, but got ` +\n          `${filterShape}.`);\n  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(\n      inDepth === filterShape[2],\n      () => `Error in conv2dDerFilter: depth of input ${inDepth}) must ` +\n          `match input depth in filter (${filterShape[2]}.`);\n  util.assert(\n      outDepth === filterShape[3],\n      () => `Error in conv2dDerFilter: depth of dy (${outDepth}) must ` +\n          `match output depth for filter (${filterShape[3]}).`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in conv2dDerFilter: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  const inputs: Conv2DBackpropFilterInputs = {x: x4D, dy: dy4D};\n  const attrs: Conv2DBackpropFilterAttrs =\n      {strides, pad, dataFormat, dimRoundingMode, filterShape};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(\n             Conv2DBackpropFilter, inputs as {} as NamedTensorMap,\n             attrs as {} as NamedAttrMap) as Tensor4D;\n}\n\nexport const conv2DBackpropFilter = op({conv2DBackpropFilter_});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}