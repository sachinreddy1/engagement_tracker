{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { eye, linalg, mul, ones, randomUniform, scalar, serialization, tidy, truncatedNormal, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { checkDataFormat } from './common';\nimport { NotImplementedError, ValueError } from './errors';\nimport { VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES } from './keras_format/initializer_config';\nimport { checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nimport { arrayProd } from './utils/math_utils';\nexport function checkFanMode(value) {\n  checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\nexport function checkDistribution(value) {\n  checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\nexport class Initializer extends serialization.Serializable {\n  fromConfigUsesCustomObjects() {\n    return false;\n  }\n  getConfig() {\n    return {};\n  }\n}\nexport class Zeros extends Initializer {\n  apply(shape, dtype) {\n    return zeros(shape, dtype);\n  }\n}\n/** @nocollapse */\nZeros.className = 'Zeros';\nserialization.registerClass(Zeros);\nexport class Ones extends Initializer {\n  apply(shape, dtype) {\n    return ones(shape, dtype);\n  }\n}\n/** @nocollapse */\nOnes.className = 'Ones';\nserialization.registerClass(Ones);\nexport class Constant extends Initializer {\n  constructor(args) {\n    super();\n    if (typeof args !== 'object') {\n      throw new ValueError(\"Expected argument of type ConstantConfig but got \".concat(args));\n    }\n    if (args.value === undefined) {\n      throw new ValueError(\"config must have value set but got \".concat(args));\n    }\n    this.value = args.value;\n  }\n  apply(shape, dtype) {\n    return tidy(() => mul(scalar(this.value), ones(shape, dtype)));\n  }\n  getConfig() {\n    return {\n      value: this.value\n    };\n  }\n}\n/** @nocollapse */\nConstant.className = 'Constant';\nserialization.registerClass(Constant);\nexport class RandomUniform extends Initializer {\n  constructor(args) {\n    super();\n    this.DEFAULT_MINVAL = -0.05;\n    this.DEFAULT_MAXVAL = 0.05;\n    this.minval = args.minval || this.DEFAULT_MINVAL;\n    this.maxval = args.maxval || this.DEFAULT_MAXVAL;\n    this.seed = args.seed;\n  }\n  apply(shape, dtype) {\n    return randomUniform(shape, this.minval, this.maxval, dtype);\n  }\n  getConfig() {\n    return {\n      minval: this.minval,\n      maxval: this.maxval,\n      seed: this.seed\n    };\n  }\n}\n/** @nocollapse */\nRandomUniform.className = 'RandomUniform';\nserialization.registerClass(RandomUniform);\nexport class RandomNormal extends Initializer {\n  constructor(args) {\n    super();\n    this.DEFAULT_MEAN = 0.;\n    this.DEFAULT_STDDEV = 0.05;\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n  apply(shape, dtype) {\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new NotImplementedError(\"randomNormal does not support dType \".concat(dtype, \".\"));\n    }\n    return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n  getConfig() {\n    return {\n      mean: this.mean,\n      stddev: this.stddev,\n      seed: this.seed\n    };\n  }\n}\n/** @nocollapse */\nRandomNormal.className = 'RandomNormal';\nserialization.registerClass(RandomNormal);\nexport class TruncatedNormal extends Initializer {\n  constructor(args) {\n    super();\n    this.DEFAULT_MEAN = 0.;\n    this.DEFAULT_STDDEV = 0.05;\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n  apply(shape, dtype) {\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new NotImplementedError(\"truncatedNormal does not support dType \".concat(dtype, \".\"));\n    }\n    return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n  getConfig() {\n    return {\n      mean: this.mean,\n      stddev: this.stddev,\n      seed: this.seed\n    };\n  }\n}\n/** @nocollapse */\nTruncatedNormal.className = 'TruncatedNormal';\nserialization.registerClass(TruncatedNormal);\nexport class Identity extends Initializer {\n  constructor(args) {\n    super();\n    this.gain = args.gain != null ? args.gain : 1.0;\n  }\n  apply(shape, dtype) {\n    return tidy(() => {\n      if (shape.length !== 2 || shape[0] !== shape[1]) {\n        throw new ValueError('Identity matrix initializer can only be used for' + ' 2D square matrices.');\n      } else {\n        return mul(this.gain, eye(shape[0]));\n      }\n    });\n  }\n  getConfig() {\n    return {\n      gain: this.gain\n    };\n  }\n}\n/** @nocollapse */\nIdentity.className = 'Identity';\nserialization.registerClass(Identity);\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\nfunction computeFans(shape) {\n  let dataFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'channelsLast';\n  let fanIn;\n  let fanOut;\n  checkDataFormat(dataFormat);\n  if (shape.length === 2) {\n    fanIn = shape[0];\n    fanOut = shape[1];\n  } else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n    if (dataFormat === 'channelsFirst') {\n      const receptiveFieldSize = arrayProd(shape, 2);\n      fanIn = shape[1] * receptiveFieldSize;\n      fanOut = shape[0] * receptiveFieldSize;\n    } else if (dataFormat === 'channelsLast') {\n      const receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n      fanIn = shape[shape.length - 2] * receptiveFieldSize;\n      fanOut = shape[shape.length - 1] * receptiveFieldSize;\n    }\n  } else {\n    const shapeProd = arrayProd(shape);\n    fanIn = Math.sqrt(shapeProd);\n    fanOut = Math.sqrt(shapeProd);\n  }\n  return [fanIn, fanOut];\n}\nexport class VarianceScaling extends Initializer {\n  /**\n   * Constructor of VarianceScaling.\n   * @throws ValueError for invalid value in scale.\n   */\n  constructor(args) {\n    super();\n    if (args.scale < 0.0) {\n      throw new ValueError(\"scale must be a positive float. Got: \".concat(args.scale));\n    }\n    this.scale = args.scale == null ? 1.0 : args.scale;\n    this.mode = args.mode == null ? 'fanIn' : args.mode;\n    checkFanMode(this.mode);\n    this.distribution = args.distribution == null ? 'normal' : args.distribution;\n    checkDistribution(this.distribution);\n    this.seed = args.seed;\n  }\n  apply(shape, dtype) {\n    const fans = computeFans(shape);\n    const fanIn = fans[0];\n    const fanOut = fans[1];\n    let scale = this.scale;\n    if (this.mode === 'fanIn') {\n      scale /= Math.max(1, fanIn);\n    } else if (this.mode === 'fanOut') {\n      scale /= Math.max(1, fanOut);\n    } else {\n      scale /= Math.max(1, (fanIn + fanOut) / 2);\n    }\n    if (this.distribution === 'normal') {\n      const stddev = Math.sqrt(scale);\n      dtype = dtype || 'float32';\n      if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(\"\".concat(this.getClassName(), \" does not support dType \").concat(dtype, \".\"));\n      }\n      return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n    } else {\n      const limit = Math.sqrt(3 * scale);\n      return randomUniform(shape, -limit, limit, dtype);\n    }\n  }\n  getConfig() {\n    return {\n      scale: this.scale,\n      mode: this.mode,\n      distribution: this.distribution,\n      seed: this.seed\n    };\n  }\n}\n/** @nocollapse */\nVarianceScaling.className = 'VarianceScaling';\nserialization.registerClass(VarianceScaling);\nexport class GlorotUniform extends VarianceScaling {\n  /**\n   * Constructor of GlorotUniform\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  constructor(args) {\n    super({\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    // In Python Keras, GlorotUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\n/** @nocollapse */\nGlorotUniform.className = 'GlorotUniform';\nserialization.registerClass(GlorotUniform);\nexport class GlorotNormal extends VarianceScaling {\n  /**\n   * Constructor of GlorotNormal.\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  constructor(args) {\n    super({\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    // In Python Keras, GlorotNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\n/** @nocollapse */\nGlorotNormal.className = 'GlorotNormal';\nserialization.registerClass(GlorotNormal);\nexport class HeNormal extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    // In Python Keras, HeNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\n/** @nocollapse */\nHeNormal.className = 'HeNormal';\nserialization.registerClass(HeNormal);\nexport class HeUniform extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    // In Python Keras, HeUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\n/** @nocollapse */\nHeUniform.className = 'HeUniform';\nserialization.registerClass(HeUniform);\nexport class LeCunNormal extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    // In Python Keras, LeCunNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\n/** @nocollapse */\nLeCunNormal.className = 'LeCunNormal';\nserialization.registerClass(LeCunNormal);\nexport class LeCunUniform extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    // In Python Keras, LeCunUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\n/** @nocollapse */\nLeCunUniform.className = 'LeCunNormal';\nserialization.registerClass(LeCunUniform);\nexport class Orthogonal extends Initializer {\n  constructor(args) {\n    super();\n    this.DEFAULT_GAIN = 1;\n    this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;\n    this.seed = args.seed;\n    if (this.seed != null) {\n      throw new NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');\n    }\n  }\n  apply(shape, dtype) {\n    return tidy(() => {\n      if (shape.length < 2) {\n        throw new NotImplementedError('Shape must be at least 2D.');\n      }\n      if (shape[0] * shape[1] > 2000) {\n        console.warn(\"Orthogonal initializer is being called on a matrix with more \" + \"than 2000 (\".concat(shape[0] * shape[1], \") elements: \") + \"Slowness may result.\");\n      }\n      // TODO(cais): Add seed support.\n      const normalizedShape = shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n      const a = K.randomNormal(normalizedShape, 0, 1, 'float32');\n      let q = linalg.gramSchmidt(a);\n      if (shape[0] > shape[1]) {\n        q = q.transpose();\n      }\n      return mul(this.gain, q);\n    });\n  }\n  getConfig() {\n    return {\n      gain: this.gain,\n      seed: this.seed\n    };\n  }\n}\n/** @nocollapse */\nOrthogonal.className = 'Orthogonal';\nserialization.registerClass(Orthogonal);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'constant': 'Constant',\n  'glorotNormal': 'GlorotNormal',\n  'glorotUniform': 'GlorotUniform',\n  'heNormal': 'HeNormal',\n  'heUniform': 'HeUniform',\n  'identity': 'Identity',\n  'leCunNormal': 'LeCunNormal',\n  'leCunUniform': 'LeCunUniform',\n  'ones': 'Ones',\n  'orthogonal': 'Orthogonal',\n  'randomNormal': 'RandomNormal',\n  'randomUniform': 'RandomUniform',\n  'truncatedNormal': 'TruncatedNormal',\n  'varianceScaling': 'VarianceScaling',\n  'zeros': 'Zeros'\n};\nfunction deserializeInitializer(config) {\n  let customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'initializer');\n}\nexport function serializeInitializer(initializer) {\n  return serializeKerasObject(initializer);\n}\nexport function getInitializer(identifier) {\n  if (typeof identifier === 'string') {\n    const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    /* We have four 'helper' classes for common initializers that\n    all get serialized as 'VarianceScaling' and shouldn't go through\n    the deserializeInitializer pathway. */\n    if (className === 'GlorotNormal') {\n      return new GlorotNormal();\n    } else if (className === 'GlorotUniform') {\n      return new GlorotUniform();\n    } else if (className === 'HeNormal') {\n      return new HeNormal();\n    } else if (className === 'HeUniform') {\n      return new HeUniform();\n    } else if (className === 'LeCunNormal') {\n      return new LeCunNormal();\n    } else if (className === 'LeCunUniform') {\n      return new LeCunUniform();\n    } else {\n      const config = {};\n      config['className'] = className;\n      config['config'] = {};\n      return deserializeInitializer(config);\n    }\n  } else if (identifier instanceof Initializer) {\n    return identifier;\n  } else {\n    return deserializeInitializer(identifier);\n  }\n}","map":{"version":3,"names":["eye","linalg","mul","ones","randomUniform","scalar","serialization","tidy","truncatedNormal","zeros","K","checkDataFormat","NotImplementedError","ValueError","VALID_DISTRIBUTION_VALUES","VALID_FAN_MODE_VALUES","checkStringTypeUnionValue","deserializeKerasObject","serializeKerasObject","arrayProd","checkFanMode","value","checkDistribution","Initializer","Serializable","fromConfigUsesCustomObjects","getConfig","Zeros","apply","shape","dtype","className","registerClass","Ones","Constant","constructor","args","concat","undefined","RandomUniform","DEFAULT_MINVAL","DEFAULT_MAXVAL","minval","maxval","seed","RandomNormal","DEFAULT_MEAN","DEFAULT_STDDEV","mean","stddev","randomNormal","TruncatedNormal","Identity","gain","length","computeFans","dataFormat","arguments","fanIn","fanOut","indexOf","receptiveFieldSize","shapeProd","Math","sqrt","VarianceScaling","scale","mode","distribution","fans","max","getClassName","limit","GlorotUniform","GlorotNormal","HeNormal","HeUniform","LeCunNormal","LeCunUniform","Orthogonal","DEFAULT_GAIN","console","warn","normalizedShape","a","q","gramSchmidt","transpose","INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP","deserializeInitializer","config","customObjects","SerializationMap","getMap","classNameMap","serializeInitializer","initializer","getInitializer","identifier"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-layers\\src\\initializers.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {DataType, eye, linalg, mul, ones, randomUniform, scalar, serialization, Tensor, Tensor2D, tidy, truncatedNormal, zeros} from '@tensorflow/tfjs-core';\n\nimport * as K from './backend/tfjs_backend';\nimport {checkDataFormat} from './common';\nimport {NotImplementedError, ValueError} from './errors';\nimport {DataFormat, Shape} from './keras_format/common';\nimport {Distribution, FanMode, VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES} from './keras_format/initializer_config';\nimport {checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\nimport {arrayProd} from './utils/math_utils';\n\nexport function checkFanMode(value?: string): void {\n  checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\n\nexport function checkDistribution(value?: string): void {\n  checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\nexport abstract class Initializer extends serialization.Serializable {\n  public fromConfigUsesCustomObjects(): boolean {\n    return false;\n  }\n  /**\n   * Generate an initial value.\n   * @param shape\n   * @param dtype\n   * @return The init value.\n   */\n  abstract apply(shape: Shape, dtype?: DataType): Tensor;\n\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\nexport class Zeros extends Initializer {\n  /** @nocollapse */\n  static className = 'Zeros';\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return zeros(shape, dtype);\n  }\n}\nserialization.registerClass(Zeros);\n\nexport class Ones extends Initializer {\n  /** @nocollapse */\n  static className = 'Ones';\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return ones(shape, dtype);\n  }\n}\nserialization.registerClass(Ones);\n\nexport interface ConstantArgs {\n  /** The value for each element in the variable. */\n  value: number;\n}\n\nexport class Constant extends Initializer {\n  /** @nocollapse */\n  static className = 'Constant';\n  private value: number;\n  constructor(args: ConstantArgs) {\n    super();\n    if (typeof args !== 'object') {\n      throw new ValueError(\n          `Expected argument of type ConstantConfig but got ${args}`);\n    }\n    if (args.value === undefined) {\n      throw new ValueError(`config must have value set but got ${args}`);\n    }\n    this.value = args.value;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return tidy(() => mul(scalar(this.value), ones(shape, dtype)));\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {\n      value: this.value,\n    };\n  }\n}\nserialization.registerClass(Constant);\n\nexport interface RandomUniformArgs {\n  /** Lower bound of the range of random values to generate. */\n  minval?: number;\n  /** Upper bound of the range of random values to generate. */\n  maxval?: number;\n  /** Used to seed the random generator. */\n  seed?: number;\n}\n\nexport class RandomUniform extends Initializer {\n  /** @nocollapse */\n  static className = 'RandomUniform';\n  readonly DEFAULT_MINVAL = -0.05;\n  readonly DEFAULT_MAXVAL = 0.05;\n  private minval: number;\n  private maxval: number;\n  private seed: number;\n\n  constructor(args: RandomUniformArgs) {\n    super();\n    this.minval = args.minval || this.DEFAULT_MINVAL;\n    this.maxval = args.maxval || this.DEFAULT_MAXVAL;\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return randomUniform(shape, this.minval, this.maxval, dtype);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {minval: this.minval, maxval: this.maxval, seed: this.seed};\n  }\n}\nserialization.registerClass(RandomUniform);\n\nexport interface RandomNormalArgs {\n  /** Mean of the random values to generate. */\n  mean?: number;\n  /** Standard deviation of the random values to generate. */\n  stddev?: number;\n  /** Used to seed the random generator. */\n  seed?: number;\n}\n\nexport class RandomNormal extends Initializer {\n  /** @nocollapse */\n  static className = 'RandomNormal';\n  readonly DEFAULT_MEAN = 0.;\n  readonly DEFAULT_STDDEV = 0.05;\n  private mean: number;\n  private stddev: number;\n  private seed: number;\n\n  constructor(args: RandomNormalArgs) {\n    super();\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new NotImplementedError(\n          `randomNormal does not support dType ${dtype}.`);\n    }\n\n    return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {mean: this.mean, stddev: this.stddev, seed: this.seed};\n  }\n}\nserialization.registerClass(RandomNormal);\n\nexport interface TruncatedNormalArgs {\n  /** Mean of the random values to generate. */\n  mean?: number;\n  /** Standard deviation of the random values to generate. */\n  stddev?: number;\n  /** Used to seed the random generator. */\n  seed?: number;\n}\n\nexport class TruncatedNormal extends Initializer {\n  /** @nocollapse */\n  static className = 'TruncatedNormal';\n\n  readonly DEFAULT_MEAN = 0.;\n  readonly DEFAULT_STDDEV = 0.05;\n  private mean: number;\n  private stddev: number;\n  private seed: number;\n\n  constructor(args: TruncatedNormalArgs) {\n    super();\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new NotImplementedError(\n          `truncatedNormal does not support dType ${dtype}.`);\n    }\n    return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {mean: this.mean, stddev: this.stddev, seed: this.seed};\n  }\n}\nserialization.registerClass(TruncatedNormal);\n\nexport interface IdentityArgs {\n  /**\n   * Multiplicative factor to apply to the identity matrix.\n   */\n  gain?: number;\n}\n\nexport class Identity extends Initializer {\n  /** @nocollapse */\n  static className = 'Identity';\n  private gain: number;\n  constructor(args: IdentityArgs) {\n    super();\n    this.gain = args.gain != null ? args.gain : 1.0;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return tidy(() => {\n      if (shape.length !== 2 || shape[0] !== shape[1]) {\n        throw new ValueError(\n            'Identity matrix initializer can only be used for' +\n            ' 2D square matrices.');\n      } else {\n        return mul(this.gain, eye(shape[0]));\n      }\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {gain: this.gain};\n  }\n}\nserialization.registerClass(Identity);\n\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\nfunction computeFans(\n    shape: Shape, dataFormat: DataFormat = 'channelsLast'): number[] {\n  let fanIn: number;\n  let fanOut: number;\n  checkDataFormat(dataFormat);\n  if (shape.length === 2) {\n    fanIn = shape[0];\n    fanOut = shape[1];\n  } else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n    if (dataFormat === 'channelsFirst') {\n      const receptiveFieldSize = arrayProd(shape, 2);\n      fanIn = shape[1] * receptiveFieldSize;\n      fanOut = shape[0] * receptiveFieldSize;\n    } else if (dataFormat === 'channelsLast') {\n      const receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n      fanIn = shape[shape.length - 2] * receptiveFieldSize;\n      fanOut = shape[shape.length - 1] * receptiveFieldSize;\n    }\n  } else {\n    const shapeProd = arrayProd(shape);\n    fanIn = Math.sqrt(shapeProd);\n    fanOut = Math.sqrt(shapeProd);\n  }\n\n  return [fanIn, fanOut];\n}\n\nexport interface VarianceScalingArgs {\n  /** Scaling factor (positive float). */\n  scale?: number;\n\n  /** Fanning mode for inputs and outputs. */\n  mode?: FanMode;\n\n  /** Probabilistic distribution of the values. */\n  distribution?: Distribution;\n\n  /** Random number generator seed. */\n  seed?: number;\n}\n\nexport class VarianceScaling extends Initializer {\n  /** @nocollapse */\n  static className = 'VarianceScaling';\n  private scale: number;\n  private mode: FanMode;\n  private distribution: Distribution;\n  private seed: number;\n\n  /**\n   * Constructor of VarianceScaling.\n   * @throws ValueError for invalid value in scale.\n   */\n  constructor(args: VarianceScalingArgs) {\n    super();\n    if (args.scale < 0.0) {\n      throw new ValueError(\n          `scale must be a positive float. Got: ${args.scale}`);\n    }\n    this.scale = args.scale == null ? 1.0 : args.scale;\n    this.mode = args.mode == null ? 'fanIn' : args.mode;\n    checkFanMode(this.mode);\n    this.distribution =\n        args.distribution == null ? 'normal' : args.distribution;\n    checkDistribution(this.distribution);\n    this.seed = args.seed;\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    const fans = computeFans(shape);\n    const fanIn = fans[0];\n    const fanOut = fans[1];\n    let scale = this.scale;\n    if (this.mode === 'fanIn') {\n      scale /= Math.max(1, fanIn);\n    } else if (this.mode === 'fanOut') {\n      scale /= Math.max(1, fanOut);\n    } else {\n      scale /= Math.max(1, (fanIn + fanOut) / 2);\n    }\n\n    if (this.distribution === 'normal') {\n      const stddev = Math.sqrt(scale);\n      dtype = dtype || 'float32';\n      if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(\n            `${this.getClassName()} does not support dType ${dtype}.`);\n      }\n      return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n    } else {\n      const limit = Math.sqrt(3 * scale);\n      return randomUniform(shape, -limit, limit, dtype);\n    }\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {\n      scale: this.scale,\n      mode: this.mode,\n      distribution: this.distribution,\n      seed: this.seed\n    };\n  }\n}\nserialization.registerClass(VarianceScaling);\n\nexport interface SeedOnlyInitializerArgs {\n  /** Random number generator seed. */\n  seed?: number;\n}\n\nexport class GlorotUniform extends VarianceScaling {\n  /** @nocollapse */\n  static className = 'GlorotUniform';\n\n  /**\n   * Constructor of GlorotUniform\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName(): string {\n    // In Python Keras, GlorotUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(GlorotUniform);\n\nexport class GlorotNormal extends VarianceScaling {\n  /** @nocollapse */\n  static className = 'GlorotNormal';\n\n  /**\n   * Constructor of GlorotNormal.\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName(): string {\n    // In Python Keras, GlorotNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(GlorotNormal);\n\nexport class HeNormal extends VarianceScaling {\n  /** @nocollapse */\n  static className = 'HeNormal';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName(): string {\n    // In Python Keras, HeNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(HeNormal);\n\nexport class HeUniform extends VarianceScaling {\n  /** @nocollapse */\n  static className = 'HeUniform';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName(): string {\n    // In Python Keras, HeUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(HeUniform);\n\nexport class LeCunNormal extends VarianceScaling {\n  /** @nocollapse */\n  static className = 'LeCunNormal';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName(): string {\n    // In Python Keras, LeCunNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(LeCunNormal);\n\nexport class LeCunUniform extends VarianceScaling {\n  /** @nocollapse */\n  static className = 'LeCunNormal';\n\n  constructor(args?: SeedOnlyInitializerArgs) {\n    super({\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n\n  getClassName(): string {\n    // In Python Keras, LeCunUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\nserialization.registerClass(LeCunUniform);\n\nexport interface OrthogonalArgs extends SeedOnlyInitializerArgs {\n  /**\n   * Multiplicative factor to apply to the orthogonal matrix. Defaults to 1.\n   */\n  gain?: number;\n}\n\nexport class Orthogonal extends Initializer {\n  /** @nocollapse */\n  static className = 'Orthogonal';\n  readonly DEFAULT_GAIN = 1;\n  protected readonly gain: number;\n  protected readonly seed: number;\n\n  constructor(args?: OrthogonalArgs) {\n    super();\n    this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;\n    this.seed = args.seed;\n\n    if (this.seed != null) {\n      throw new NotImplementedError(\n          'Random seed is not implemented for Orthogonal Initializer yet.');\n    }\n  }\n\n  apply(shape: Shape, dtype?: DataType): Tensor {\n    return tidy(() => {\n      if (shape.length < 2) {\n        throw new NotImplementedError('Shape must be at least 2D.');\n      }\n      if (shape[0] * shape[1] > 2000) {\n        console.warn(\n            `Orthogonal initializer is being called on a matrix with more ` +\n            `than 2000 (${shape[0] * shape[1]}) elements: ` +\n            `Slowness may result.`);\n      }\n\n      // TODO(cais): Add seed support.\n      const normalizedShape =\n          shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n      const a = K.randomNormal(normalizedShape, 0, 1, 'float32') as Tensor2D;\n      let q = linalg.gramSchmidt(a) as Tensor2D;\n      if (shape[0] > shape[1]) {\n        q = q.transpose();\n      }\n      return mul(this.gain, q);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {\n      gain: this.gain,\n      seed: this.seed,\n    };\n  }\n}\nserialization.registerClass(Orthogonal);\n\n/** @docinline */\nexport type InitializerIdentifier =\n    'constant'|'glorotNormal'|'glorotUniform'|'heNormal'|'heUniform'|'identity'|\n    'leCunNormal'|'leCunUniform'|'ones'|'orthogonal'|'randomNormal'|\n    'randomUniform'|'truncatedNormal'|'varianceScaling'|'zeros'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in InitializerIdentifier]: string} = {\n      'constant': 'Constant',\n      'glorotNormal': 'GlorotNormal',\n      'glorotUniform': 'GlorotUniform',\n      'heNormal': 'HeNormal',\n      'heUniform': 'HeUniform',\n      'identity': 'Identity',\n      'leCunNormal': 'LeCunNormal',\n      'leCunUniform': 'LeCunUniform',\n      'ones': 'Ones',\n      'orthogonal': 'Orthogonal',\n      'randomNormal': 'RandomNormal',\n      'randomUniform': 'RandomUniform',\n      'truncatedNormal': 'TruncatedNormal',\n      'varianceScaling': 'VarianceScaling',\n      'zeros': 'Zeros'\n    };\n\nfunction deserializeInitializer(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Initializer {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'initializer');\n}\n\nexport function serializeInitializer(initializer: Initializer):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(initializer);\n}\n\nexport function getInitializer(identifier: InitializerIdentifier|Initializer|\n                               serialization.ConfigDict): Initializer {\n  if (typeof identifier === 'string') {\n    const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    /* We have four 'helper' classes for common initializers that\n    all get serialized as 'VarianceScaling' and shouldn't go through\n    the deserializeInitializer pathway. */\n    if (className === 'GlorotNormal') {\n      return new GlorotNormal();\n    } else if (className === 'GlorotUniform') {\n      return new GlorotUniform();\n    } else if (className === 'HeNormal') {\n      return new HeNormal();\n    } else if (className === 'HeUniform') {\n      return new HeUniform();\n    } else if (className === 'LeCunNormal') {\n      return new LeCunNormal();\n    } else if (className === 'LeCunUniform') {\n      return new LeCunUniform();\n    } else {\n      const config: serialization.ConfigDict = {};\n      config['className'] = className;\n      config['config'] = {};\n      return deserializeInitializer(config);\n    }\n  } else if (identifier instanceof Initializer) {\n    return identifier;\n  } else {\n    return deserializeInitializer(identifier);\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;AAUA,SAAkBA,GAAG,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAEC,aAAa,EAAEC,MAAM,EAAEC,aAAa,EAAoBC,IAAI,EAAEC,eAAe,EAAEC,KAAK,QAAO,uBAAuB;AAE5J,OAAO,KAAKC,CAAC,MAAM,wBAAwB;AAC3C,SAAQC,eAAe,QAAO,UAAU;AACxC,SAAQC,mBAAmB,EAAEC,UAAU,QAAO,UAAU;AAExD,SAA+BC,yBAAyB,EAAEC,qBAAqB,QAAO,mCAAmC;AACzH,SAAQC,yBAAyB,EAAEC,sBAAsB,EAAEC,oBAAoB,QAAO,uBAAuB;AAC7G,SAAQC,SAAS,QAAO,oBAAoB;AAE5C,OAAM,SAAUC,YAAYA,CAACC,KAAc;EACzCL,yBAAyB,CAACD,qBAAqB,EAAE,SAAS,EAAEM,KAAK,CAAC;AACpE;AAEA,OAAM,SAAUC,iBAAiBA,CAACD,KAAc;EAC9CL,yBAAyB,CAACF,yBAAyB,EAAE,cAAc,EAAEO,KAAK,CAAC;AAC7E;AAEA;;;;;;AAMA,OAAM,MAAgBE,WAAY,SAAQjB,aAAa,CAACkB,YAAY;EAC3DC,2BAA2BA,CAAA;IAChC,OAAO,KAAK;EACd;EASAC,SAASA,CAAA;IACP,OAAO,EAAE;EACX;;AAGF,OAAM,MAAOC,KAAM,SAAQJ,WAAW;EAIpCK,KAAKA,CAACC,KAAY,EAAEC,KAAgB;IAClC,OAAOrB,KAAK,CAACoB,KAAK,EAAEC,KAAK,CAAC;EAC5B;;AALA;AACOH,KAAA,CAAAI,SAAS,GAAG,OAAO;AAM5BzB,aAAa,CAAC0B,aAAa,CAACL,KAAK,CAAC;AAElC,OAAM,MAAOM,IAAK,SAAQV,WAAW;EAInCK,KAAKA,CAACC,KAAY,EAAEC,KAAgB;IAClC,OAAO3B,IAAI,CAAC0B,KAAK,EAAEC,KAAK,CAAC;EAC3B;;AALA;AACOG,IAAA,CAAAF,SAAS,GAAG,MAAM;AAM3BzB,aAAa,CAAC0B,aAAa,CAACC,IAAI,CAAC;AAOjC,OAAM,MAAOC,QAAS,SAAQX,WAAW;EAIvCY,YAAYC,IAAkB;IAC5B,KAAK,EAAE;IACP,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC5B,MAAM,IAAIvB,UAAU,qDAAAwB,MAAA,CACoCD,IAAI,CAAE,CAAC;;IAEjE,IAAIA,IAAI,CAACf,KAAK,KAAKiB,SAAS,EAAE;MAC5B,MAAM,IAAIzB,UAAU,uCAAAwB,MAAA,CAAuCD,IAAI,CAAE,CAAC;;IAEpE,IAAI,CAACf,KAAK,GAAGe,IAAI,CAACf,KAAK;EACzB;EAEAO,KAAKA,CAACC,KAAY,EAAEC,KAAgB;IAClC,OAAOvB,IAAI,CAAC,MAAML,GAAG,CAACG,MAAM,CAAC,IAAI,CAACgB,KAAK,CAAC,EAAElB,IAAI,CAAC0B,KAAK,EAAEC,KAAK,CAAC,CAAC,CAAC;EAChE;EAEAJ,SAASA,CAAA;IACP,OAAO;MACLL,KAAK,EAAE,IAAI,CAACA;KACb;EACH;;AAvBA;AACOa,QAAA,CAAAH,SAAS,GAAG,UAAU;AAwB/BzB,aAAa,CAAC0B,aAAa,CAACE,QAAQ,CAAC;AAWrC,OAAM,MAAOK,aAAc,SAAQhB,WAAW;EAS5CY,YAAYC,IAAuB;IACjC,KAAK,EAAE;IAPA,KAAAI,cAAc,GAAG,CAAC,IAAI;IACtB,KAAAC,cAAc,GAAG,IAAI;IAO5B,IAAI,CAACC,MAAM,GAAGN,IAAI,CAACM,MAAM,IAAI,IAAI,CAACF,cAAc;IAChD,IAAI,CAACG,MAAM,GAAGP,IAAI,CAACO,MAAM,IAAI,IAAI,CAACF,cAAc;IAChD,IAAI,CAACG,IAAI,GAAGR,IAAI,CAACQ,IAAI;EACvB;EAEAhB,KAAKA,CAACC,KAAY,EAAEC,KAAgB;IAClC,OAAO1B,aAAa,CAACyB,KAAK,EAAE,IAAI,CAACa,MAAM,EAAE,IAAI,CAACC,MAAM,EAAEb,KAAK,CAAC;EAC9D;EAEAJ,SAASA,CAAA;IACP,OAAO;MAACgB,MAAM,EAAE,IAAI,CAACA,MAAM;MAAEC,MAAM,EAAE,IAAI,CAACA,MAAM;MAAEC,IAAI,EAAE,IAAI,CAACA;IAAI,CAAC;EACpE;;AArBA;AACOL,aAAA,CAAAR,SAAS,GAAG,eAAe;AAsBpCzB,aAAa,CAAC0B,aAAa,CAACO,aAAa,CAAC;AAW1C,OAAM,MAAOM,YAAa,SAAQtB,WAAW;EAS3CY,YAAYC,IAAsB;IAChC,KAAK,EAAE;IAPA,KAAAU,YAAY,GAAG,EAAE;IACjB,KAAAC,cAAc,GAAG,IAAI;IAO5B,IAAI,CAACC,IAAI,GAAGZ,IAAI,CAACY,IAAI,IAAI,IAAI,CAACF,YAAY;IAC1C,IAAI,CAACG,MAAM,GAAGb,IAAI,CAACa,MAAM,IAAI,IAAI,CAACF,cAAc;IAChD,IAAI,CAACH,IAAI,GAAGR,IAAI,CAACQ,IAAI;EACvB;EAEAhB,KAAKA,CAACC,KAAY,EAAEC,KAAgB;IAClCA,KAAK,GAAGA,KAAK,IAAI,SAAS;IAC1B,IAAIA,KAAK,KAAK,SAAS,IAAIA,KAAK,KAAK,OAAO,EAAE;MAC5C,MAAM,IAAIlB,mBAAmB,wCAAAyB,MAAA,CACcP,KAAK,MAAG,CAAC;;IAGtD,OAAOpB,CAAC,CAACwC,YAAY,CAACrB,KAAK,EAAE,IAAI,CAACmB,IAAI,EAAE,IAAI,CAACC,MAAM,EAAEnB,KAAK,EAAE,IAAI,CAACc,IAAI,CAAC;EACxE;EAEAlB,SAASA,CAAA;IACP,OAAO;MAACsB,IAAI,EAAE,IAAI,CAACA,IAAI;MAAEC,MAAM,EAAE,IAAI,CAACA,MAAM;MAAEL,IAAI,EAAE,IAAI,CAACA;IAAI,CAAC;EAChE;;AA3BA;AACOC,YAAA,CAAAd,SAAS,GAAG,cAAc;AA4BnCzB,aAAa,CAAC0B,aAAa,CAACa,YAAY,CAAC;AAWzC,OAAM,MAAOM,eAAgB,SAAQ5B,WAAW;EAU9CY,YAAYC,IAAyB;IACnC,KAAK,EAAE;IAPA,KAAAU,YAAY,GAAG,EAAE;IACjB,KAAAC,cAAc,GAAG,IAAI;IAO5B,IAAI,CAACC,IAAI,GAAGZ,IAAI,CAACY,IAAI,IAAI,IAAI,CAACF,YAAY;IAC1C,IAAI,CAACG,MAAM,GAAGb,IAAI,CAACa,MAAM,IAAI,IAAI,CAACF,cAAc;IAChD,IAAI,CAACH,IAAI,GAAGR,IAAI,CAACQ,IAAI;EACvB;EAEAhB,KAAKA,CAACC,KAAY,EAAEC,KAAgB;IAClCA,KAAK,GAAGA,KAAK,IAAI,SAAS;IAC1B,IAAIA,KAAK,KAAK,SAAS,IAAIA,KAAK,KAAK,OAAO,EAAE;MAC5C,MAAM,IAAIlB,mBAAmB,2CAAAyB,MAAA,CACiBP,KAAK,MAAG,CAAC;;IAEzD,OAAOtB,eAAe,CAACqB,KAAK,EAAE,IAAI,CAACmB,IAAI,EAAE,IAAI,CAACC,MAAM,EAAEnB,KAAK,EAAE,IAAI,CAACc,IAAI,CAAC;EACzE;EAEAlB,SAASA,CAAA;IACP,OAAO;MAACsB,IAAI,EAAE,IAAI,CAACA,IAAI;MAAEC,MAAM,EAAE,IAAI,CAACA,MAAM;MAAEL,IAAI,EAAE,IAAI,CAACA;IAAI,CAAC;EAChE;;AA3BA;AACOO,eAAA,CAAApB,SAAS,GAAG,iBAAiB;AA4BtCzB,aAAa,CAAC0B,aAAa,CAACmB,eAAe,CAAC;AAS5C,OAAM,MAAOC,QAAS,SAAQ7B,WAAW;EAIvCY,YAAYC,IAAkB;IAC5B,KAAK,EAAE;IACP,IAAI,CAACiB,IAAI,GAAGjB,IAAI,CAACiB,IAAI,IAAI,IAAI,GAAGjB,IAAI,CAACiB,IAAI,GAAG,GAAG;EACjD;EAEAzB,KAAKA,CAACC,KAAY,EAAEC,KAAgB;IAClC,OAAOvB,IAAI,CAAC,MAAK;MACf,IAAIsB,KAAK,CAACyB,MAAM,KAAK,CAAC,IAAIzB,KAAK,CAAC,CAAC,CAAC,KAAKA,KAAK,CAAC,CAAC,CAAC,EAAE;QAC/C,MAAM,IAAIhB,UAAU,CAChB,kDAAkD,GAClD,sBAAsB,CAAC;OAC5B,MAAM;QACL,OAAOX,GAAG,CAAC,IAAI,CAACmD,IAAI,EAAErD,GAAG,CAAC6B,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;IAExC,CAAC,CAAC;EACJ;EAEAH,SAASA,CAAA;IACP,OAAO;MAAC2B,IAAI,EAAE,IAAI,CAACA;IAAI,CAAC;EAC1B;;AAtBA;AACOD,QAAA,CAAArB,SAAS,GAAG,UAAU;AAuB/BzB,aAAa,CAAC0B,aAAa,CAACoB,QAAQ,CAAC;AAErC;;;;;;;;AAQA,SAASG,WAAWA,CAChB1B,KAAY,EAAyC;EAAA,IAAvC2B,UAAA,GAAAC,SAAA,CAAAH,MAAA,QAAAG,SAAA,QAAAnB,SAAA,GAAAmB,SAAA,MAAyB,cAAc;EACvD,IAAIC,KAAa;EACjB,IAAIC,MAAc;EAClBhD,eAAe,CAAC6C,UAAU,CAAC;EAC3B,IAAI3B,KAAK,CAACyB,MAAM,KAAK,CAAC,EAAE;IACtBI,KAAK,GAAG7B,KAAK,CAAC,CAAC,CAAC;IAChB8B,MAAM,GAAG9B,KAAK,CAAC,CAAC,CAAC;GAClB,MAAM,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC+B,OAAO,CAAC/B,KAAK,CAACyB,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;IACjD,IAAIE,UAAU,KAAK,eAAe,EAAE;MAClC,MAAMK,kBAAkB,GAAG1C,SAAS,CAACU,KAAK,EAAE,CAAC,CAAC;MAC9C6B,KAAK,GAAG7B,KAAK,CAAC,CAAC,CAAC,GAAGgC,kBAAkB;MACrCF,MAAM,GAAG9B,KAAK,CAAC,CAAC,CAAC,GAAGgC,kBAAkB;KACvC,MAAM,IAAIL,UAAU,KAAK,cAAc,EAAE;MACxC,MAAMK,kBAAkB,GAAG1C,SAAS,CAACU,KAAK,EAAE,CAAC,EAAEA,KAAK,CAACyB,MAAM,GAAG,CAAC,CAAC;MAChEI,KAAK,GAAG7B,KAAK,CAACA,KAAK,CAACyB,MAAM,GAAG,CAAC,CAAC,GAAGO,kBAAkB;MACpDF,MAAM,GAAG9B,KAAK,CAACA,KAAK,CAACyB,MAAM,GAAG,CAAC,CAAC,GAAGO,kBAAkB;;GAExD,MAAM;IACL,MAAMC,SAAS,GAAG3C,SAAS,CAACU,KAAK,CAAC;IAClC6B,KAAK,GAAGK,IAAI,CAACC,IAAI,CAACF,SAAS,CAAC;IAC5BH,MAAM,GAAGI,IAAI,CAACC,IAAI,CAACF,SAAS,CAAC;;EAG/B,OAAO,CAACJ,KAAK,EAAEC,MAAM,CAAC;AACxB;AAgBA,OAAM,MAAOM,eAAgB,SAAQ1C,WAAW;EAQ9C;;;;EAIAY,YAAYC,IAAyB;IACnC,KAAK,EAAE;IACP,IAAIA,IAAI,CAAC8B,KAAK,GAAG,GAAG,EAAE;MACpB,MAAM,IAAIrD,UAAU,yCAAAwB,MAAA,CACwBD,IAAI,CAAC8B,KAAK,CAAE,CAAC;;IAE3D,IAAI,CAACA,KAAK,GAAG9B,IAAI,CAAC8B,KAAK,IAAI,IAAI,GAAG,GAAG,GAAG9B,IAAI,CAAC8B,KAAK;IAClD,IAAI,CAACC,IAAI,GAAG/B,IAAI,CAAC+B,IAAI,IAAI,IAAI,GAAG,OAAO,GAAG/B,IAAI,CAAC+B,IAAI;IACnD/C,YAAY,CAAC,IAAI,CAAC+C,IAAI,CAAC;IACvB,IAAI,CAACC,YAAY,GACbhC,IAAI,CAACgC,YAAY,IAAI,IAAI,GAAG,QAAQ,GAAGhC,IAAI,CAACgC,YAAY;IAC5D9C,iBAAiB,CAAC,IAAI,CAAC8C,YAAY,CAAC;IACpC,IAAI,CAACxB,IAAI,GAAGR,IAAI,CAACQ,IAAI;EACvB;EAEAhB,KAAKA,CAACC,KAAY,EAAEC,KAAgB;IAClC,MAAMuC,IAAI,GAAGd,WAAW,CAAC1B,KAAK,CAAC;IAC/B,MAAM6B,KAAK,GAAGW,IAAI,CAAC,CAAC,CAAC;IACrB,MAAMV,MAAM,GAAGU,IAAI,CAAC,CAAC,CAAC;IACtB,IAAIH,KAAK,GAAG,IAAI,CAACA,KAAK;IACtB,IAAI,IAAI,CAACC,IAAI,KAAK,OAAO,EAAE;MACzBD,KAAK,IAAIH,IAAI,CAACO,GAAG,CAAC,CAAC,EAAEZ,KAAK,CAAC;KAC5B,MAAM,IAAI,IAAI,CAACS,IAAI,KAAK,QAAQ,EAAE;MACjCD,KAAK,IAAIH,IAAI,CAACO,GAAG,CAAC,CAAC,EAAEX,MAAM,CAAC;KAC7B,MAAM;MACLO,KAAK,IAAIH,IAAI,CAACO,GAAG,CAAC,CAAC,EAAE,CAACZ,KAAK,GAAGC,MAAM,IAAI,CAAC,CAAC;;IAG5C,IAAI,IAAI,CAACS,YAAY,KAAK,QAAQ,EAAE;MAClC,MAAMnB,MAAM,GAAGc,IAAI,CAACC,IAAI,CAACE,KAAK,CAAC;MAC/BpC,KAAK,GAAGA,KAAK,IAAI,SAAS;MAC1B,IAAIA,KAAK,KAAK,SAAS,IAAIA,KAAK,KAAK,OAAO,EAAE;QAC5C,MAAM,IAAIlB,mBAAmB,IAAAyB,MAAA,CACtB,IAAI,CAACkC,YAAY,EAAE,8BAAAlC,MAAA,CAA2BP,KAAK,MAAG,CAAC;;MAEhE,OAAOtB,eAAe,CAACqB,KAAK,EAAE,CAAC,EAAEoB,MAAM,EAAEnB,KAAK,EAAE,IAAI,CAACc,IAAI,CAAC;KAC3D,MAAM;MACL,MAAM4B,KAAK,GAAGT,IAAI,CAACC,IAAI,CAAC,CAAC,GAAGE,KAAK,CAAC;MAClC,OAAO9D,aAAa,CAACyB,KAAK,EAAE,CAAC2C,KAAK,EAAEA,KAAK,EAAE1C,KAAK,CAAC;;EAErD;EAEAJ,SAASA,CAAA;IACP,OAAO;MACLwC,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBC,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BxB,IAAI,EAAE,IAAI,CAACA;KACZ;EACH;;AA5DA;AACOqB,eAAA,CAAAlC,SAAS,GAAG,iBAAiB;AA6DtCzB,aAAa,CAAC0B,aAAa,CAACiC,eAAe,CAAC;AAO5C,OAAM,MAAOQ,aAAc,SAAQR,eAAe;EAIhD;;;;;;;EAOA9B,YAAYC,IAA8B;IACxC,KAAK,CAAC;MACJ8B,KAAK,EAAE,GAAG;MACVC,IAAI,EAAE,QAAQ;MACdC,YAAY,EAAE,SAAS;MACvBxB,IAAI,EAAER,IAAI,IAAI,IAAI,GAAG,IAAI,GAAGA,IAAI,CAACQ;KAClC,CAAC;EACJ;EAEA2B,YAAYA,CAAA;IACV;IACA;IACA;IACA,OAAON,eAAe,CAAClC,SAAS;EAClC;;AAxBA;AACO0C,aAAA,CAAA1C,SAAS,GAAG,eAAe;AAyBpCzB,aAAa,CAAC0B,aAAa,CAACyC,aAAa,CAAC;AAE1C,OAAM,MAAOC,YAAa,SAAQT,eAAe;EAI/C;;;;;;;EAOA9B,YAAYC,IAA8B;IACxC,KAAK,CAAC;MACJ8B,KAAK,EAAE,GAAG;MACVC,IAAI,EAAE,QAAQ;MACdC,YAAY,EAAE,QAAQ;MACtBxB,IAAI,EAAER,IAAI,IAAI,IAAI,GAAG,IAAI,GAAGA,IAAI,CAACQ;KAClC,CAAC;EACJ;EAEA2B,YAAYA,CAAA;IACV;IACA;IACA;IACA,OAAON,eAAe,CAAClC,SAAS;EAClC;;AAxBA;AACO2C,YAAA,CAAA3C,SAAS,GAAG,cAAc;AAyBnCzB,aAAa,CAAC0B,aAAa,CAAC0C,YAAY,CAAC;AAEzC,OAAM,MAAOC,QAAS,SAAQV,eAAe;EAI3C9B,YAAYC,IAA8B;IACxC,KAAK,CAAC;MACJ8B,KAAK,EAAE,GAAG;MACVC,IAAI,EAAE,OAAO;MACbC,YAAY,EAAE,QAAQ;MACtBxB,IAAI,EAAER,IAAI,IAAI,IAAI,GAAG,IAAI,GAAGA,IAAI,CAACQ;KAClC,CAAC;EACJ;EAEA2B,YAAYA,CAAA;IACV;IACA;IACA;IACA,OAAON,eAAe,CAAClC,SAAS;EAClC;;AAjBA;AACO4C,QAAA,CAAA5C,SAAS,GAAG,UAAU;AAkB/BzB,aAAa,CAAC0B,aAAa,CAAC2C,QAAQ,CAAC;AAErC,OAAM,MAAOC,SAAU,SAAQX,eAAe;EAI5C9B,YAAYC,IAA8B;IACxC,KAAK,CAAC;MACJ8B,KAAK,EAAE,GAAG;MACVC,IAAI,EAAE,OAAO;MACbC,YAAY,EAAE,SAAS;MACvBxB,IAAI,EAAER,IAAI,IAAI,IAAI,GAAG,IAAI,GAAGA,IAAI,CAACQ;KAClC,CAAC;EACJ;EAEA2B,YAAYA,CAAA;IACV;IACA;IACA;IACA,OAAON,eAAe,CAAClC,SAAS;EAClC;;AAjBA;AACO6C,SAAA,CAAA7C,SAAS,GAAG,WAAW;AAkBhCzB,aAAa,CAAC0B,aAAa,CAAC4C,SAAS,CAAC;AAEtC,OAAM,MAAOC,WAAY,SAAQZ,eAAe;EAI9C9B,YAAYC,IAA8B;IACxC,KAAK,CAAC;MACJ8B,KAAK,EAAE,GAAG;MACVC,IAAI,EAAE,OAAO;MACbC,YAAY,EAAE,QAAQ;MACtBxB,IAAI,EAAER,IAAI,IAAI,IAAI,GAAG,IAAI,GAAGA,IAAI,CAACQ;KAClC,CAAC;EACJ;EAEA2B,YAAYA,CAAA;IACV;IACA;IACA;IACA,OAAON,eAAe,CAAClC,SAAS;EAClC;;AAjBA;AACO8C,WAAA,CAAA9C,SAAS,GAAG,aAAa;AAkBlCzB,aAAa,CAAC0B,aAAa,CAAC6C,WAAW,CAAC;AAExC,OAAM,MAAOC,YAAa,SAAQb,eAAe;EAI/C9B,YAAYC,IAA8B;IACxC,KAAK,CAAC;MACJ8B,KAAK,EAAE,GAAG;MACVC,IAAI,EAAE,OAAO;MACbC,YAAY,EAAE,SAAS;MACvBxB,IAAI,EAAER,IAAI,IAAI,IAAI,GAAG,IAAI,GAAGA,IAAI,CAACQ;KAClC,CAAC;EACJ;EAEA2B,YAAYA,CAAA;IACV;IACA;IACA;IACA,OAAON,eAAe,CAAClC,SAAS;EAClC;;AAjBA;AACO+C,YAAA,CAAA/C,SAAS,GAAG,aAAa;AAkBlCzB,aAAa,CAAC0B,aAAa,CAAC8C,YAAY,CAAC;AASzC,OAAM,MAAOC,UAAW,SAAQxD,WAAW;EAOzCY,YAAYC,IAAqB;IAC/B,KAAK,EAAE;IALA,KAAA4C,YAAY,GAAG,CAAC;IAMvB,IAAI,CAAC3B,IAAI,GAAGjB,IAAI,CAACiB,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC2B,YAAY,GAAG5C,IAAI,CAACiB,IAAI;IAC7D,IAAI,CAACT,IAAI,GAAGR,IAAI,CAACQ,IAAI;IAErB,IAAI,IAAI,CAACA,IAAI,IAAI,IAAI,EAAE;MACrB,MAAM,IAAIhC,mBAAmB,CACzB,gEAAgE,CAAC;;EAEzE;EAEAgB,KAAKA,CAACC,KAAY,EAAEC,KAAgB;IAClC,OAAOvB,IAAI,CAAC,MAAK;MACf,IAAIsB,KAAK,CAACyB,MAAM,GAAG,CAAC,EAAE;QACpB,MAAM,IAAI1C,mBAAmB,CAAC,4BAA4B,CAAC;;MAE7D,IAAIiB,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE;QAC9BoD,OAAO,CAACC,IAAI,CACR,gFAAA7C,MAAA,CACcR,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,iBAAc,yBACzB,CAAC;;MAG7B;MACA,MAAMsD,eAAe,GACjBtD,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,CAACA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGA,KAAK;MACtD,MAAMuD,CAAC,GAAG1E,CAAC,CAACwC,YAAY,CAACiC,eAAe,EAAE,CAAC,EAAE,CAAC,EAAE,SAAS,CAAa;MACtE,IAAIE,CAAC,GAAGpF,MAAM,CAACqF,WAAW,CAACF,CAAC,CAAa;MACzC,IAAIvD,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,EAAE;QACvBwD,CAAC,GAAGA,CAAC,CAACE,SAAS,EAAE;;MAEnB,OAAOrF,GAAG,CAAC,IAAI,CAACmD,IAAI,EAAEgC,CAAC,CAAC;IAC1B,CAAC,CAAC;EACJ;EAEA3D,SAASA,CAAA;IACP,OAAO;MACL2B,IAAI,EAAE,IAAI,CAACA,IAAI;MACfT,IAAI,EAAE,IAAI,CAACA;KACZ;EACH;;AA9CA;AACOmC,UAAA,CAAAhD,SAAS,GAAG,YAAY;AA+CjCzB,aAAa,CAAC0B,aAAa,CAAC+C,UAAU,CAAC;AAQvC;AACA;AACA,OAAO,MAAMS,0CAA0C,GACD;EAChD,UAAU,EAAE,UAAU;EACtB,cAAc,EAAE,cAAc;EAC9B,eAAe,EAAE,eAAe;EAChC,UAAU,EAAE,UAAU;EACtB,WAAW,EAAE,WAAW;EACxB,UAAU,EAAE,UAAU;EACtB,aAAa,EAAE,aAAa;EAC5B,cAAc,EAAE,cAAc;EAC9B,MAAM,EAAE,MAAM;EACd,YAAY,EAAE,YAAY;EAC1B,cAAc,EAAE,cAAc;EAC9B,eAAe,EAAE,eAAe;EAChC,iBAAiB,EAAE,iBAAiB;EACpC,iBAAiB,EAAE,iBAAiB;EACpC,OAAO,EAAE;CACV;AAEL,SAASC,sBAAsBA,CAC3BC,MAAgC,EACY;EAAA,IAA5CC,aAAA,GAAAlC,SAAA,CAAAH,MAAA,QAAAG,SAAA,QAAAnB,SAAA,GAAAmB,SAAA,MAA0C,EAAE;EAC9C,OAAOxC,sBAAsB,CACzByE,MAAM,EAAEpF,aAAa,CAACsF,gBAAgB,CAACC,MAAM,EAAE,CAACC,YAAY,EAC5DH,aAAa,EAAE,aAAa,CAAC;AACnC;AAEA,OAAM,SAAUI,oBAAoBA,CAACC,WAAwB;EAE3D,OAAO9E,oBAAoB,CAAC8E,WAAW,CAAC;AAC1C;AAEA,OAAM,SAAUC,cAAcA,CAACC,UACwB;EACrD,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IAClC,MAAMnE,SAAS,GAAGmE,UAAU,IAAIV,0CAA0C,GACtEA,0CAA0C,CAACU,UAAU,CAAC,GACtDA,UAAU;IACd;;;IAGA,IAAInE,SAAS,KAAK,cAAc,EAAE;MAChC,OAAO,IAAI2C,YAAY,EAAE;KAC1B,MAAM,IAAI3C,SAAS,KAAK,eAAe,EAAE;MACxC,OAAO,IAAI0C,aAAa,EAAE;KAC3B,MAAM,IAAI1C,SAAS,KAAK,UAAU,EAAE;MACnC,OAAO,IAAI4C,QAAQ,EAAE;KACtB,MAAM,IAAI5C,SAAS,KAAK,WAAW,EAAE;MACpC,OAAO,IAAI6C,SAAS,EAAE;KACvB,MAAM,IAAI7C,SAAS,KAAK,aAAa,EAAE;MACtC,OAAO,IAAI8C,WAAW,EAAE;KACzB,MAAM,IAAI9C,SAAS,KAAK,cAAc,EAAE;MACvC,OAAO,IAAI+C,YAAY,EAAE;KAC1B,MAAM;MACL,MAAMY,MAAM,GAA6B,EAAE;MAC3CA,MAAM,CAAC,WAAW,CAAC,GAAG3D,SAAS;MAC/B2D,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE;MACrB,OAAOD,sBAAsB,CAACC,MAAM,CAAC;;GAExC,MAAM,IAAIQ,UAAU,YAAY3E,WAAW,EAAE;IAC5C,OAAO2E,UAAU;GAClB,MAAM;IACL,OAAOT,sBAAsB,CAACS,UAAU,CAAC;;AAE7C"},"metadata":{},"sourceType":"module","externalDependencies":[]}