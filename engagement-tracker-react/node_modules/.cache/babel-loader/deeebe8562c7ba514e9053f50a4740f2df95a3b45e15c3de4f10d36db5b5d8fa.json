{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Cumsum } from '@tensorflow/tfjs-core';\nimport { CumSumProgram } from '../cumsum_gpu';\nimport { identity } from './Identity';\nimport { transpose } from './Transpose';\nexport function cumsum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    exclusive,\n    reverse\n  } = attrs;\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\"WebGL cumsum shader expects an inner-most axis=\".concat(x.shape.length - 1, \" \") + \"but got axis=\".concat(axis));\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({\n    inputs: {\n      x: permutedX\n    },\n    backend\n  });\n  // Use cumsum parallel algorithm, ref:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumSumProgram(permutedX.shape, false, reverse);\n    const customSetup = program.getCustomSetupFunc(i);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype, customSetup);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  // For exclusive cumsum, shift the end result in the direction of sum\n  // and add 0 to the front index.\n  if (exclusive) {\n    const program = new CumSumProgram(permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        perm: reversePermutation\n      }\n    });\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n    return reverseTransposedResult;\n  }\n  return result;\n}\nexport const cumsumConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgl',\n  kernelFunc: cumsum\n};","map":{"version":3,"names":["backend_util","Cumsum","CumSumProgram","identity","transpose","cumsum","args","inputs","backend","attrs","x","axis","exclusive","reverse","xRank","shape","length","permutation","getAxesPermutation","permutedX","perm","permutedAxis","getInnerMostAxes","Error","concat","size","result","i","Math","ceil","log2","program","customSetup","getCustomSetupFunc","prevResult","runWebGLProgram","dtype","disposeIntermediateTensorInfo","reversePermutation","getUndoAxesPermutation","reverseTransposedResult","cumsumConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\Cumsum.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumSumProgram} from '../cumsum_gpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args:\n        {inputs: CumsumInputs, backend: MathBackendWebGL, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGL cumsum shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cumsum parallel algorithm, ref:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumSumProgram(permutedX.shape, false, reverse);\n    const customSetup = program.getCustomSetupFunc(i);\n    const prevResult = result;\n    result =\n        backend.runWebGLProgram(program, [result], result.dtype, customSetup);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  // For exclusive cumsum, shift the end result in the direction of sum\n  // and add 0 to the front index.\n  if (exclusive) {\n    const program = new CumSumProgram(permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgl',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}