{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { deprecationWarn } from '../globals';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertShapesMatch } from '../util';\nimport { equal } from './equal';\nimport { greater } from './greater';\nimport { greaterEqual } from './greater_equal';\nimport { less } from './less';\nimport { lessEqual } from './less_equal';\nimport { notEqual } from './not_equal';\nimport { op } from './operation';\n/**\n * @deprecated\n * Strict version of `tf.notEqual` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\nfunction notEqualStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'notEqualStrict');\n  const $b = convertToTensor(b, 'b', 'notEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in notEqualStrict: ');\n  return notEqual($a, $b);\n}\n/**\n * @deprecated\n * Strict version of `tf.less` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\nfunction lessStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'lessStrict');\n  const $b = convertToTensor(b, 'b', 'lessStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in lessStrict: ');\n  return less($a, $b);\n}\nfunction equalStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'equalStrict');\n  const $b = convertToTensor(b, 'b', 'equalStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in equalStrict: ');\n  return equal($a, $b);\n}\nfunction lessEqualStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'lessEqualStrict');\n  const $b = convertToTensor(b, 'b', 'lessEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in lessEqualStrict: ');\n  return lessEqual($a, $b);\n}\nfunction greaterStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'greaterStrict');\n  const $b = convertToTensor(b, 'b', 'greaterStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in greaterStrict: ');\n  return greater($a, $b);\n}\nfunction greaterEqualStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'greaterEqualStrict');\n  const $b = convertToTensor(b, 'b', 'greaterEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in greaterEqualStrict: ');\n  return greaterEqual($a, $b);\n}\nexport const equalStrict = op({\n  equalStrict_\n});\nexport const greaterEqualStrict = op({\n  greaterEqualStrict_\n});\nexport const greaterStrict = op({\n  greaterStrict_\n});\nexport const lessEqualStrict = op({\n  lessEqualStrict_\n});\nexport const lessStrict = op({\n  lessStrict_\n});\nexport const notEqualStrict = op({\n  notEqualStrict_\n});","map":{"version":3,"names":["deprecationWarn","convertToTensor","assertShapesMatch","equal","greater","greaterEqual","less","lessEqual","notEqual","op","notEqualStrict_","a","b","$a","$b","shape","lessStrict_","equalStrict_","lessEqualStrict_","greaterStrict_","greaterEqualStrict_","equalStrict","greaterEqualStrict","greaterStrict","lessEqualStrict","lessStrict","notEqualStrict"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\compare.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {deprecationWarn} from '../globals';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assertShapesMatch} from '../util';\n\nimport {equal} from './equal';\nimport {greater} from './greater';\nimport {greaterEqual} from './greater_equal';\nimport {less} from './less';\nimport {lessEqual} from './less_equal';\nimport {notEqual} from './not_equal';\nimport {op} from './operation';\n\n/**\n * @deprecated\n * Strict version of `tf.notEqual` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\nfunction notEqualStrict_<T extends Tensor>(\n    a: T|TensorLike, b: T|TensorLike): T {\n  deprecationWarn(\n      'strict variants of ops have been deprecated ' +\n      'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'notEqualStrict');\n  const $b = convertToTensor(b, 'b', 'notEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in notEqualStrict: ');\n  return notEqual($a, $b);\n}\n\n/**\n * @deprecated\n * Strict version of `tf.less` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\nfunction lessStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  deprecationWarn(\n      'strict variants of ops have been deprecated ' +\n      'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'lessStrict');\n  const $b = convertToTensor(b, 'b', 'lessStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in lessStrict: ');\n  return less($a, $b);\n}\n\nfunction equalStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  deprecationWarn(\n      'strict variants of ops have been deprecated ' +\n      'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'equalStrict');\n  const $b = convertToTensor(b, 'b', 'equalStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in equalStrict: ');\n  return equal($a, $b);\n}\n\nfunction lessEqualStrict_<T extends Tensor>(\n    a: T|TensorLike, b: T|TensorLike): T {\n  deprecationWarn(\n      'strict variants of ops have been deprecated ' +\n      'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'lessEqualStrict');\n  const $b = convertToTensor(b, 'b', 'lessEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in lessEqualStrict: ');\n  return lessEqual($a, $b);\n}\n\nfunction greaterStrict_<T extends Tensor>(a: T|TensorLike, b: T|TensorLike): T {\n  deprecationWarn(\n      'strict variants of ops have been deprecated ' +\n      'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'greaterStrict');\n  const $b = convertToTensor(b, 'b', 'greaterStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in greaterStrict: ');\n  return greater($a, $b);\n}\n\nfunction greaterEqualStrict_<T extends Tensor>(\n    a: T|TensorLike, b: T|TensorLike): T {\n  deprecationWarn(\n      'strict variants of ops have been deprecated ' +\n      'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'greaterEqualStrict');\n  const $b = convertToTensor(b, 'b', 'greaterEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in greaterEqualStrict: ');\n  return greaterEqual($a, $b);\n}\n\nexport const equalStrict = op({equalStrict_});\nexport const greaterEqualStrict = op({greaterEqualStrict_});\nexport const greaterStrict = op({greaterStrict_});\nexport const lessEqualStrict = op({lessEqualStrict_});\nexport const lessStrict = op({lessStrict_});\nexport const notEqualStrict = op({notEqualStrict_});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}