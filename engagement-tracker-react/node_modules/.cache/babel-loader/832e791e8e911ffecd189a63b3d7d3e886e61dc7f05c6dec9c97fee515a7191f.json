{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core';\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(keyDType, valueDType) {\n    this.keyDType = keyDType;\n    this.valueDType = valueDType;\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map();\n    keep(this.handle);\n  }\n  get id() {\n    return this.handle.id;\n  }\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n  /**\n   * The number of items in the hash table.\n   */\n  size() {\n    return this.tensorMap.size;\n  }\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n  async import(keys, values) {\n    this.checkKeyAndValueTensor(keys, values);\n    // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n    const $keys = await keys.data();\n    // Clear the hashTable before inserting new values.\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    return tidy(() => {\n      const $values = unstack(values);\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n      util.assert(keysLength === valuesLength, () => \"The number of elements doesn't match, keys has \" + \"\".concat(keysLength, \" elements, the values has \").concat(valuesLength, \" \") + \"elements.\");\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n      return this.handle;\n    });\n  }\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n  async find(keys, defaultValue) {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n    const $keys = await keys.data();\n    return tidy(() => {\n      const result = [];\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n      return stack(result);\n    });\n  }\n  // tslint:disable-next-line: no-any\n  findWithDefault(key, defaultValue) {\n    const result = this.tensorMap.get(key);\n    return result != null ? result : defaultValue;\n  }\n  checkKeyAndValueTensor(key, value) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(\"Expect key dtype \".concat(this.keyDType, \", but got \") + \"\".concat(key.dtype));\n    }\n    if (value.dtype !== this.valueDType) {\n      throw new Error(\"Expect value dtype \".concat(this.valueDType, \", but got \") + \"\".concat(value.dtype));\n    }\n  }\n}","map":{"version":3,"names":["keep","scalar","stack","tidy","unstack","util","HashTable","constructor","keyDType","valueDType","handle","tensorMap","Map","id","clearAndClose","forEach","value","dispose","clear","size","import","keys","values","checkKeyAndValueTensor","$keys","data","$values","keysLength","length","valuesLength","assert","concat","i","key","set","find","defaultValue","result","findWithDefault","push","get","dtype","Error"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-converter\\src\\executor\\hash_table.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType, keep, scalar, stack, Tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n  readonly handle: Tensor;\n\n  // tslint:disable-next-line: no-any\n  private tensorMap: Map<any, Tensor>;\n\n  get id() {\n    return this.handle.id;\n  }\n\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(readonly keyDType: DataType, readonly valueDType: DataType) {\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map<any, Tensor>();\n\n    keep(this.handle);\n  }\n\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n\n  /**\n   * The number of items in the hash table.\n   */\n  size(): number {\n    return this.tensorMap.size;\n  }\n\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n  async import(keys: Tensor, values: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, values);\n\n    // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n    const $keys = await keys.data();\n\n    // Clear the hashTable before inserting new values.\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n\n    return tidy(() => {\n      const $values = unstack(values);\n\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n\n      util.assert(\n          keysLength === valuesLength,\n          () => `The number of elements doesn't match, keys has ` +\n              `${keysLength} elements, the values has ${valuesLength} ` +\n              `elements.`);\n\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n\n      return this.handle;\n    });\n  }\n\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n  async find(keys: Tensor, defaultValue: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n\n    const $keys = await keys.data();\n\n    return tidy(() => {\n      const result: Tensor[] = [];\n\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n\n      return stack(result);\n    });\n  }\n\n  // tslint:disable-next-line: no-any\n  private findWithDefault(key: any, defaultValue: Tensor): Tensor {\n    const result = this.tensorMap.get(key);\n\n    return result != null ? result : defaultValue;\n  }\n\n  private checkKeyAndValueTensor(key: Tensor, value: Tensor) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(\n          `Expect key dtype ${this.keyDType}, but got ` +\n          `${key.dtype}`);\n    }\n\n    if (value.dtype !== this.valueDType) {\n      throw new Error(\n          `Expect value dtype ${this.valueDType}, but got ` +\n          `${value.dtype}`);\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAkBA,IAAI,EAAEC,MAAM,EAAEC,KAAK,EAAUC,IAAI,EAAEC,OAAO,EAAEC,IAAI,QAAO,uBAAuB;AAEhG;;;AAGA,OAAM,MAAOC,SAAS;EAUpB;;;;;;EAMAC,YAAqBC,QAAkB,EAAWC,UAAoB;IAAjD,KAAAD,QAAQ,GAARA,QAAQ;IAAqB,KAAAC,UAAU,GAAVA,UAAU;IAC1D,IAAI,CAACC,MAAM,GAAGT,MAAM,CAAC,CAAC,CAAC;IACvB;IACA,IAAI,CAACU,SAAS,GAAG,IAAIC,GAAG,EAAe;IAEvCZ,IAAI,CAAC,IAAI,CAACU,MAAM,CAAC;EACnB;EAhBA,IAAIG,EAAEA,CAAA;IACJ,OAAO,IAAI,CAACH,MAAM,CAACG,EAAE;EACvB;EAgBA;;;EAGAC,aAAaA,CAAA;IACX,IAAI,CAACH,SAAS,CAACI,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,OAAO,EAAE,CAAC;IAChD,IAAI,CAACN,SAAS,CAACO,KAAK,EAAE;IACtB,IAAI,CAACR,MAAM,CAACO,OAAO,EAAE;EACvB;EAEA;;;EAGAE,IAAIA,CAAA;IACF,OAAO,IAAI,CAACR,SAAS,CAACQ,IAAI;EAC5B;EAEA;;;;;EAKA,MAAMC,MAAMA,CAACC,IAAY,EAAEC,MAAc;IACvC,IAAI,CAACC,sBAAsB,CAACF,IAAI,EAAEC,MAAM,CAAC;IAEzC;IACA;IACA,MAAME,KAAK,GAAG,MAAMH,IAAI,CAACI,IAAI,EAAE;IAE/B;IACA,IAAI,CAACd,SAAS,CAACI,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,OAAO,EAAE,CAAC;IAChD,IAAI,CAACN,SAAS,CAACO,KAAK,EAAE;IAEtB,OAAOf,IAAI,CAAC,MAAK;MACf,MAAMuB,OAAO,GAAGtB,OAAO,CAACkB,MAAM,CAAC;MAE/B,MAAMK,UAAU,GAAGH,KAAK,CAACI,MAAM;MAC/B,MAAMC,YAAY,GAAGH,OAAO,CAACE,MAAM;MAEnCvB,IAAI,CAACyB,MAAM,CACPH,UAAU,KAAKE,YAAY,EAC3B,MAAM,uDAAAE,MAAA,CACCJ,UAAU,gCAAAI,MAAA,CAA6BF,YAAY,MAAG,cAC9C,CAAC;MAEpB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,UAAU,EAAEK,CAAC,EAAE,EAAE;QACnC,MAAMC,GAAG,GAAGT,KAAK,CAACQ,CAAC,CAAC;QACpB,MAAMhB,KAAK,GAAGU,OAAO,CAACM,CAAC,CAAC;QAExBhC,IAAI,CAACgB,KAAK,CAAC;QACX,IAAI,CAACL,SAAS,CAACuB,GAAG,CAACD,GAAG,EAAEjB,KAAK,CAAC;;MAGhC,OAAO,IAAI,CAACN,MAAM;IACpB,CAAC,CAAC;EACJ;EAEA;;;;;;;;;;;;;;;EAeA,MAAMyB,IAAIA,CAACd,IAAY,EAAEe,YAAoB;IAC3C,IAAI,CAACb,sBAAsB,CAACF,IAAI,EAAEe,YAAY,CAAC;IAE/C,MAAMZ,KAAK,GAAG,MAAMH,IAAI,CAACI,IAAI,EAAE;IAE/B,OAAOtB,IAAI,CAAC,MAAK;MACf,MAAMkC,MAAM,GAAa,EAAE;MAE3B,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,KAAK,CAACI,MAAM,EAAEI,CAAC,EAAE,EAAE;QACrC,MAAMC,GAAG,GAAGT,KAAK,CAACQ,CAAC,CAAC;QAEpB,MAAMhB,KAAK,GAAG,IAAI,CAACsB,eAAe,CAACL,GAAG,EAAEG,YAAY,CAAC;QACrDC,MAAM,CAACE,IAAI,CAACvB,KAAK,CAAC;;MAGpB,OAAOd,KAAK,CAACmC,MAAM,CAAC;IACtB,CAAC,CAAC;EACJ;EAEA;EACQC,eAAeA,CAACL,GAAQ,EAAEG,YAAoB;IACpD,MAAMC,MAAM,GAAG,IAAI,CAAC1B,SAAS,CAAC6B,GAAG,CAACP,GAAG,CAAC;IAEtC,OAAOI,MAAM,IAAI,IAAI,GAAGA,MAAM,GAAGD,YAAY;EAC/C;EAEQb,sBAAsBA,CAACU,GAAW,EAAEjB,KAAa;IACvD,IAAIiB,GAAG,CAACQ,KAAK,KAAK,IAAI,CAACjC,QAAQ,EAAE;MAC/B,MAAM,IAAIkC,KAAK,CACX,oBAAAX,MAAA,CAAoB,IAAI,CAACvB,QAAQ,qBAAAuB,MAAA,CAC9BE,GAAG,CAACQ,KAAK,CAAE,CAAC;;IAGrB,IAAIzB,KAAK,CAACyB,KAAK,KAAK,IAAI,CAAChC,UAAU,EAAE;MACnC,MAAM,IAAIiC,KAAK,CACX,sBAAAX,MAAA,CAAsB,IAAI,CAACtB,UAAU,qBAAAsB,MAAA,CAClCf,KAAK,CAACyB,KAAK,CAAE,CAAC;;EAEzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}