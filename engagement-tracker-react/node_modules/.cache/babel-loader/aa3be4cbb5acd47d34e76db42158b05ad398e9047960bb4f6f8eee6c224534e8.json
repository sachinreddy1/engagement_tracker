{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SliceProgram {\n  constructor(destSize) {\n    this.variableNames = ['source'];\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    const dtype = getCoordsDataType(this.rank);\n    const uniformPart = `uniform int start[${this.rank}];`;\n    const sourceCoords = getCoords(this.rank);\n    let body;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      ${uniformPart}\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n  getCustomSetupFunc(start) {\n    if (start.length !== this.rank) {\n      throw Error(`The rank (${this.rank}) of the program must match the ` + `length of start (${start.length})`);\n    }\n    return (gpgpu, webGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n}\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\nfunction getCoords(rank) {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}","map":{"version":3,"names":["getCoordsDataType","SliceProgram","constructor","destSize","variableNames","outputShape","rank","length","dtype","uniformPart","sourceCoords","getCoords","body","coordSum","map","_","i","coords","join","userCode","getCustomSetupFunc","start","Error","gpgpu","webGLProgram","startLoc","getUniformLocationNoThrow","gl","uniform1iv","slice","x"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\slice_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  // Caching uniform location for speed.\n  startLoc: WebGLUniformLocation;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    const uniformPart = `uniform int start[${this.rank}];`;\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      ${uniformPart}\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(start: number[]) {\n    if (start.length !== this.rank) {\n      throw Error(\n          `The rank (${this.rank}) of the program must match the ` +\n          `length of start (${start.length})`);\n    }\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.startLoc == null) {\n        this.startLoc = gpgpu.getUniformLocationNoThrow(webGLProgram, 'start');\n        if (this.startLoc == null) {\n          // This means the compiler has optimized and realized it doesn't need\n          // the uniform.\n          return;\n        }\n      }\n      gpgpu.gl.uniform1iv(this.startLoc, start);\n    };\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAmBA,SAAQA,iBAAiB,QAAO,mBAAmB;AAEnD,OAAM,MAAOC,YAAY;EASvBC,YAAYC,QAAkB;IAR9B,KAAAC,aAAa,GAAG,CAAC,QAAQ,CAAC;IASxB,IAAI,CAACC,WAAW,GAAGF,QAAQ;IAC3B,IAAI,CAACG,IAAI,GAAGH,QAAQ,CAACI,MAAM;IAE3B,MAAMC,KAAK,GAAGR,iBAAiB,CAAC,IAAI,CAACM,IAAI,CAAC;IAC1C,MAAMG,WAAW,GAAG,qBAAqB,IAAI,CAACH,IAAI,IAAI;IACtD,MAAMI,YAAY,GAAGC,SAAS,CAAC,IAAI,CAACL,IAAI,CAAC;IAEzC,IAAIM,IAAY;IAChB,MAAMC,QAAQ,GAAGV,QAAQ,CAACW,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;MACrC,OAAO,aAAaC,MAAM,CAACD,CAAC,CAAC,YAAYA,CAAC,cAAcC,MAAM,CAACD,CAAC,CAAC,GAAG;IACtE,CAAC,CAAC;IACFJ,IAAI,GAAG;UACDJ,KAAK;UACLA,KAAK;UACLK,QAAQ,CAACK,IAAI,CAAC,IAAI,CAAC;OACtB;IACH,IAAI,CAACC,QAAQ,GAAG;QACZV,WAAW;;UAETG,IAAI;8BACgBF,YAAY;;KAErC;EACH;EAEAU,kBAAkBA,CAACC,KAAe;IAChC,IAAIA,KAAK,CAACd,MAAM,KAAK,IAAI,CAACD,IAAI,EAAE;MAC9B,MAAMgB,KAAK,CACP,aAAa,IAAI,CAAChB,IAAI,kCAAkC,GACxD,oBAAoBe,KAAK,CAACd,MAAM,GAAG,CAAC;;IAE1C,OAAO,CAACgB,KAAmB,EAAEC,YAA0B,KAAI;MACzD,IAAI,IAAI,CAACC,QAAQ,IAAI,IAAI,EAAE;QACzB,IAAI,CAACA,QAAQ,GAAGF,KAAK,CAACG,yBAAyB,CAACF,YAAY,EAAE,OAAO,CAAC;QACtE,IAAI,IAAI,CAACC,QAAQ,IAAI,IAAI,EAAE;UACzB;UACA;UACA;;;MAGJF,KAAK,CAACI,EAAE,CAACC,UAAU,CAAC,IAAI,CAACH,QAAQ,EAAEJ,KAAK,CAAC;IAC3C,CAAC;EACH;;AAGF,MAAMJ,MAAM,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAE7C,SAASN,SAASA,CAACL,IAAY;EAC7B,IAAIA,IAAI,KAAK,CAAC,EAAE;IACd,OAAO,WAAW;GACnB,MAAM,IAAIA,IAAI,IAAI,CAAC,EAAE;IACpB,OAAOW,MAAM,CAACY,KAAK,CAAC,CAAC,EAAEvB,IAAI,CAAC,CAACQ,GAAG,CAACgB,CAAC,IAAI,YAAY,GAAGA,CAAC,CAAC,CAACZ,IAAI,CAAC,GAAG,CAAC;GAClE,MAAM;IACL,MAAMI,KAAK,CAAC,oBAAoBhB,IAAI,uBAAuB,CAAC;;AAEhE"},"metadata":{},"sourceType":"module","externalDependencies":[]}