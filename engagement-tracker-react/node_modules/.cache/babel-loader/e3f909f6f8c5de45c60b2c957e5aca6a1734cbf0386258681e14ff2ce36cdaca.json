{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape, util } from '@tensorflow/tfjs-core';\nimport { packedReshape } from '../kernel_utils/reshape';\nimport { isReshapeFree } from '../webgl_util';\nexport function reshape(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const webglBackend = backend;\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n  util.assert(xSize === $xSize, () => \"The new shape (\".concat($shape, \") has \").concat($xSize, \" elements and the old \") + \"shape (\".concat(x.shape, \") has \").concat(xSize, \" elements. The new shape and old \") + \"shape must have the same number of elements.\");\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) && !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n  webglBackend.incRef(x.dataId);\n  return {\n    dataId: x.dataId,\n    shape: $shape,\n    dtype: x.dtype\n  };\n}\nexport const reshapeConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape\n};","map":{"version":3,"names":["Reshape","util","packedReshape","isReshapeFree","reshape","args","inputs","backend","attrs","x","shape","webglBackend","xSize","sizeFromShape","$shape","inferFromImplicitShape","$xSize","assert","concat","xTexData","texData","get","dataId","isPacked","texture","incRef","dtype","reshapeConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\Reshape.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {packedReshape} from '../kernel_utils/reshape';\nimport {isReshapeFree} from '../webgl_util';\n\nexport function reshape(args: {\n  inputs: ReshapeInputs,\n  backend: MathBackendWebGL,\n  attrs: ReshapeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n  const webglBackend = backend;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n      !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape as {} as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,OAAO,EAA2CC,IAAI,QAAO,uBAAuB;AAGtH,SAAQC,aAAa,QAAO,yBAAyB;AACrD,SAAQC,aAAa,QAAO,eAAe;AAE3C,OAAM,SAAUC,OAAOA,CAACC,IAIvB;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI;EAAC,CAAC,GAAGH,MAAM;EAClB,MAAM;IAACI;EAAK,CAAC,GAAGF,KAAK;EACrB,MAAMG,YAAY,GAAGJ,OAAO;EAE5B,MAAMK,KAAK,GAAGX,IAAI,CAACY,aAAa,CAACJ,CAAC,CAACC,KAAK,CAAC;EACzC,MAAMI,MAAM,GAAGb,IAAI,CAACc,sBAAsB,CAACL,KAAK,EAAEE,KAAK,CAAC;EACxD,MAAMI,MAAM,GAAGf,IAAI,CAACY,aAAa,CAACC,MAAM,CAAC;EAEzCb,IAAI,CAACgB,MAAM,CACPL,KAAK,KAAKI,MAAM,EAChB,MAAM,kBAAAE,MAAA,CAAkBJ,MAAM,YAAAI,MAAA,CAASF,MAAM,wCAAAE,MAAA,CAC/BT,CAAC,CAACC,KAAK,YAAAQ,MAAA,CAASN,KAAK,sCAAmC,iDACpB,CAAC;EAEvD,MAAMO,QAAQ,GAAGR,YAAY,CAACS,OAAO,CAACC,GAAG,CAACZ,CAAC,CAACa,MAAM,CAAC;EACnD,IAAIH,QAAQ,CAACI,QAAQ,IAAI,CAACpB,aAAa,CAACM,CAAC,CAACC,KAAK,EAAEI,MAAM,CAAC,IACpD,EAAEK,QAAQ,CAACK,OAAO,KAAK,IAAI,IAAIrB,aAAa,CAACgB,QAAQ,CAACT,KAAK,EAAEI,MAAM,CAAC,CAAC,EAAE;IACzE,OAAOZ,aAAa,CAACO,CAAC,EAAEK,MAAM,EAAEH,YAAY,CAAC;;EAG/CA,YAAY,CAACc,MAAM,CAAChB,CAAC,CAACa,MAAM,CAAC;EAE7B,OAAO;IAACA,MAAM,EAAEb,CAAC,CAACa,MAAM;IAAEZ,KAAK,EAAEI,MAAM;IAAEY,KAAK,EAAEjB,CAAC,CAACiB;EAAK,CAAC;AAC1D;AAEA,OAAO,MAAMC,aAAa,GAAiB;EACzCC,UAAU,EAAE5B,OAAO;EACnB6B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAE1B;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}