{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function scatterImpl(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n  const indicesData = indices.values;\n  const updatesData = updates.values;\n  if (outputSize === 0) {\n    return buffer(shape, updates.dtype);\n  }\n  const outBuf = buffer(flattenShape, updates.dtype);\n  outBuf.values.fill(defaultValue);\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        outBuf.values[flattenIndex * sliceSize + k] += updatesData[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ? updatesData[0] : updatesData[i * sliceSize + k];\n      }\n    }\n  }\n  return outBuf;\n}","map":{"version":3,"names":["buffer","scatterImpl","indices","updates","shape","outputSize","sliceSize","numUpdates","sliceRank","strides","defaultValue","sumDupeIndices","flattenShape","indicesData","values","updatesData","dtype","outBuf","fill","i","index","flattenIndex","j","dim","push","Error","k","rank"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\Scatter_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function scatterImpl<R extends Rank>(\n    indices: TensorBuffer<R>, updates: TensorBuffer<R>, shape: number[],\n    outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: number,\n    sumDupeIndices: boolean): TensorBuffer<R> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values as TypedArray;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  (outBuf.values as TypedArray).fill(defaultValue);\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        outBuf.values[flattenIndex * sliceSize + k] +=\n            updatesData[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAM,QAAiD,uBAAuB;AAEtF,OAAM,SAAUC,WAAWA,CACvBC,OAAwB,EAAEC,OAAwB,EAAEC,KAAe,EACnEC,UAAkB,EAAEC,SAAiB,EAAEC,UAAkB,EACzDC,SAAiB,EAAEC,OAAiB,EAAEC,YAAoB,EAC1DC,cAAuB;EACzB,MAAMC,YAAY,GAAG,CAACP,UAAU,GAAGC,SAAS,EAAEA,SAAS,CAAC;EAExD,MAAMO,WAAW,GAAGX,OAAO,CAACY,MAAoB;EAChD,MAAMC,WAAW,GAAGZ,OAAO,CAACW,MAAoB;EAEhD,IAAIT,UAAU,KAAK,CAAC,EAAE;IACpB,OAAOL,MAAM,CAACI,KAAoB,EAAED,OAAO,CAACa,KAAK,CAAC;;EAGpD,MAAMC,MAAM,GAAGjB,MAAM,CAACY,YAAY,EAAET,OAAO,CAACa,KAAK,CAAC;EACjDC,MAAM,CAACH,MAAqB,CAACI,IAAI,CAACR,YAAY,CAAC;EAEhD,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,UAAU,EAAEY,CAAC,EAAE,EAAE;IACnC,MAAMC,KAAK,GAAG,EAAE;IAChB,IAAIC,YAAY,GAAG,CAAC;IACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,SAAS,EAAEc,CAAC,EAAE,EAAE;MAClC,MAAMC,GAAG,GAAGV,WAAW,CAACM,CAAC,GAAGX,SAAS,GAAGc,CAAC,CAAC;MAC1CF,KAAK,CAACI,IAAI,CAACD,GAAG,CAAC;MACfF,YAAY,IAAIE,GAAG,GAAGd,OAAO,CAACa,CAAC,CAAC;;IAGlC,IAAID,YAAY,GAAG,CAAC,IAAIA,YAAY,IAAIhB,UAAU,GAAGC,SAAS,EAAE;MAC9D,MAAM,IAAImB,KAAK,CAAC,oBAAoBL,KAAK,wBAAwBhB,KAAK,EAAE,CAAC;;IAG3E,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,SAAS,EAAEoB,CAAC,EAAE,EAAE;MAClC,IAAIf,cAAc,EAAE;QAClBM,MAAM,CAACH,MAAM,CAACO,YAAY,GAAGf,SAAS,GAAGoB,CAAC,CAAC,IACvCX,WAAW,CAACI,CAAC,GAAGb,SAAS,GAAGoB,CAAC,CAAC;OACnC,MAAM;QACLT,MAAM,CAACH,MAAM,CAACO,YAAY,GAAGf,SAAS,GAAGoB,CAAC,CAAC,GAAGvB,OAAO,CAACwB,IAAI,KAAK,CAAC,GAC5DZ,WAAW,CAAC,CAAC,CAAC,GACdA,WAAW,CAACI,CAAC,GAAGb,SAAS,GAAGoB,CAAC,CAAC;;;;EAKxC,OAAOT,MAAyB;AAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}