{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment';\nimport * as util from '../util';\nimport { decodeWeights } from './io_utils';\nimport { monitorPromisesProgress } from './progress';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\nexport async function loadWeightsAsArrayBuffer(fetchURLs, loadOptions) {\n  if (loadOptions == null) {\n    loadOptions = {};\n  }\n  const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch : loadOptions.fetchFunc;\n  // Create the requests for all of the weights in parallel.\n  const requests = fetchURLs.map(fetchURL => fetchFunc(fetchURL, loadOptions.requestInit, {\n    isBinary: true\n  }));\n  const fetchStartFraction = 0;\n  const fetchEndFraction = 0.5;\n  const responses = loadOptions.onProgress == null ? await Promise.all(requests) : await monitorPromisesProgress(requests, loadOptions.onProgress, fetchStartFraction, fetchEndFraction);\n  const bufferPromises = responses.map(response => response.arrayBuffer());\n  const bufferStartFraction = 0.5;\n  const bufferEndFraction = 1;\n  const buffers = loadOptions.onProgress == null ? await Promise.all(bufferPromises) : await monitorPromisesProgress(bufferPromises, loadOptions.onProgress, bufferStartFraction, bufferEndFraction);\n  return buffers;\n}\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\nexport async function loadWeights(manifest) {\n  let filePathPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let weightNames = arguments.length > 2 ? arguments[2] : undefined;\n  let requestInit = arguments.length > 3 ? arguments[3] : undefined;\n  // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n  // single weight from a group, the whole group will be fetched. At a future\n  // date, we should support fetching only the individual shards within a\n  // group that are needed to reconstruct the requested weight.\n  // TODO(cais): Use `decodeWeights` for implementation.\n  const fetchWeights = fetchUrls => loadWeightsAsArrayBuffer(fetchUrls, {\n    requestInit\n  });\n  const loadWeights = weightsLoaderFactory(fetchWeights);\n  return loadWeights(manifest, filePathPrefix, weightNames);\n}\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\nexport function weightsLoaderFactory(fetchWeightsFunction) {\n  return async function (manifest) {\n    let filePathPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let weightNames = arguments.length > 2 ? arguments[2] : undefined;\n    // Collect all the groups, weights, and their relative offsets to be\n    // fetched.\n    const groupIndicesToFetchMap = manifest.map(() => false);\n    const groupWeightsToFetch = {};\n    const weightsFound = weightNames != null ? weightNames.map(() => false) : [];\n    const allManifestWeightNames = [];\n    manifest.forEach((manifestGroupConfig, groupIndex) => {\n      let groupOffset = 0;\n      manifestGroupConfig.weights.forEach(weightsEntry => {\n        const rawDtype = 'quantization' in weightsEntry ? weightsEntry.quantization.dtype : weightsEntry.dtype;\n        const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] * util.sizeFromShape(weightsEntry.shape);\n        const enqueueWeightsForFetchingFn = () => {\n          groupIndicesToFetchMap[groupIndex] = true;\n          if (groupWeightsToFetch[groupIndex] == null) {\n            groupWeightsToFetch[groupIndex] = [];\n          }\n          groupWeightsToFetch[groupIndex].push({\n            manifestEntry: weightsEntry,\n            groupOffset,\n            sizeBytes: weightsBytes\n          });\n        };\n        if (weightNames != null) {\n          weightNames.forEach((weightName, weightIndex) => {\n            if (weightName === weightsEntry.name) {\n              enqueueWeightsForFetchingFn();\n              weightsFound[weightIndex] = true;\n            }\n          });\n        } else {\n          enqueueWeightsForFetchingFn();\n        }\n        allManifestWeightNames.push(weightsEntry.name);\n        groupOffset += weightsBytes;\n      });\n    });\n    if (!weightsFound.every(found => found)) {\n      const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n      throw new Error(\"Could not find weights in manifest with names: \" + \"\".concat(weightsNotFound.join(', '), \". \\n\") + \"Manifest JSON has weights with names: \" + \"\".concat(allManifestWeightNames.join(', '), \".\"));\n    }\n    // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n    // IDs.\n    const groupIndicesToFetch = groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n      if (shouldFetch) {\n        accumulator.push(i);\n      }\n      return accumulator;\n    }, []);\n    const fetchUrls = [];\n    groupIndicesToFetch.forEach(i => {\n      manifest[i].paths.forEach(filepath => {\n        const fetchUrl = filePathPrefix + (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n        fetchUrls.push(fetchUrl);\n      });\n    });\n    const buffers = await fetchWeightsFunction(fetchUrls);\n    const weightsTensorMap = {};\n    let bufferIndexOffset = 0;\n    groupIndicesToFetch.forEach(i => {\n      const numBuffers = manifest[i].paths.length;\n      let groupBytes = 0;\n      for (let i = 0; i < numBuffers; i++) {\n        groupBytes += buffers[bufferIndexOffset + i].byteLength;\n      }\n      // Create a buffer for the whole group.\n      const groupBuffer = new ArrayBuffer(groupBytes);\n      const groupByteBuffer = new Uint8Array(groupBuffer);\n      let groupBufferOffset = 0;\n      for (let i = 0; i < numBuffers; i++) {\n        const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);\n        groupByteBuffer.set(buffer, groupBufferOffset);\n        groupBufferOffset += buffer.byteLength;\n      }\n      const weightsEntries = groupWeightsToFetch[i];\n      weightsEntries.forEach(weightsEntry => {\n        const byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n        const nameToTensorMap = decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n        for (const name in nameToTensorMap) {\n          weightsTensorMap[name] = nameToTensorMap[name];\n        }\n      });\n      bufferIndexOffset += numBuffers;\n    });\n    return weightsTensorMap;\n  };\n}","map":{"version":3,"names":["env","util","decodeWeights","monitorPromisesProgress","DTYPE_VALUE_SIZE_MAP","loadWeightsAsArrayBuffer","fetchURLs","loadOptions","fetchFunc","platform","fetch","requests","map","fetchURL","requestInit","isBinary","fetchStartFraction","fetchEndFraction","responses","onProgress","Promise","all","bufferPromises","response","arrayBuffer","bufferStartFraction","bufferEndFraction","buffers","loadWeights","manifest","filePathPrefix","arguments","length","undefined","weightNames","fetchWeights","fetchUrls","weightsLoaderFactory","fetchWeightsFunction","groupIndicesToFetchMap","groupWeightsToFetch","weightsFound","allManifestWeightNames","forEach","manifestGroupConfig","groupIndex","groupOffset","weights","weightsEntry","rawDtype","quantization","dtype","weightsBytes","sizeFromShape","shape","enqueueWeightsForFetchingFn","push","manifestEntry","sizeBytes","weightName","weightIndex","name","every","found","weightsNotFound","filter","_","i","Error","concat","join","groupIndicesToFetch","reduce","accumulator","shouldFetch","paths","filepath","fetchUrl","endsWith","weightsTensorMap","bufferIndexOffset","numBuffers","groupBytes","byteLength","groupBuffer","ArrayBuffer","groupByteBuffer","Uint8Array","groupBufferOffset","buffer","set","weightsEntries","byteBuffer","slice","nameToTensorMap"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-core\\src\\io\\weights_loader.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '../environment';\n\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\nimport {decodeWeights} from './io_utils';\nimport {monitorPromisesProgress} from './progress';\nimport {DTYPE_VALUE_SIZE_MAP, LoadOptions, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\n/**\n * Reads binary weights data from a number of URLs.\n *\n * @param fetchURLs URLs to send the HTTP requests at, using `fetch` calls.\n * @param requestOptions RequestInit (options) for the HTTP requests.\n * @param fetchFunc Optional overriding value for the `window.fetch` function.\n * @param onProgress Optional, progress callback function, fired periodically\n *   before the load is completed.\n * @returns A `Promise` of an Array of `ArrayBuffer`. The Array has the same\n *   length as `fetchURLs`.\n */\nexport async function loadWeightsAsArrayBuffer(\n    fetchURLs: string[], loadOptions?: LoadOptions): Promise<ArrayBuffer[]> {\n  if (loadOptions == null) {\n    loadOptions = {};\n  }\n\n  const fetchFunc = loadOptions.fetchFunc == null ? env().platform.fetch :\n                                                    loadOptions.fetchFunc;\n\n  // Create the requests for all of the weights in parallel.\n  const requests = fetchURLs.map(\n      fetchURL =>\n          fetchFunc(fetchURL, loadOptions.requestInit, {isBinary: true}));\n\n  const fetchStartFraction = 0;\n  const fetchEndFraction = 0.5;\n\n  const responses = loadOptions.onProgress == null ?\n      await Promise.all(requests) :\n      await monitorPromisesProgress(\n          requests, loadOptions.onProgress, fetchStartFraction,\n          fetchEndFraction);\n\n  const bufferPromises = responses.map(response => response.arrayBuffer());\n\n  const bufferStartFraction = 0.5;\n  const bufferEndFraction = 1;\n\n  const buffers = loadOptions.onProgress == null ?\n      await Promise.all(bufferPromises) :\n      await monitorPromisesProgress(\n          bufferPromises, loadOptions.onProgress, bufferStartFraction,\n          bufferEndFraction);\n  return buffers;\n}\n\n/**\n * Reads a weights manifest JSON configuration, fetches the weights and\n * returns them as `Tensor`s.\n *\n * @param manifest The weights manifest JSON.\n * @param filePathPrefix The path prefix for filenames given in the manifest.\n *     Defaults to the empty string.\n * @param weightNames The names of the weights to be fetched.\n */\nexport async function loadWeights(\n    manifest: WeightsManifestConfig, filePathPrefix = '',\n    weightNames?: string[],\n    requestInit?: RequestInit): Promise<NamedTensorMap> {\n  // TODO(nsthorat): Groups are currently fetched atomically. If you need a\n  // single weight from a group, the whole group will be fetched. At a future\n  // date, we should support fetching only the individual shards within a\n  // group that are needed to reconstruct the requested weight.\n  // TODO(cais): Use `decodeWeights` for implementation.\n\n  const fetchWeights = (fetchUrls: string[]) =>\n      loadWeightsAsArrayBuffer(fetchUrls, {requestInit});\n  const loadWeights = weightsLoaderFactory(fetchWeights);\n\n  return loadWeights(manifest, filePathPrefix, weightNames);\n}\n\n/**\n * Creates a function, which reads a weights manifest JSON configuration,\n * fetches the weight files using the specified function and returns them as\n * `Tensor`s.\n *\n * ```js\n * // example for creating a nodejs weight loader, which reads the weight files\n * // from disk using fs.readFileSync\n *\n * import * as fs from 'fs'\n *\n * const fetchWeightsFromDisk = (filePaths: string[]) =>\n *   filePaths.map(filePath => fs.readFileSync(filePath).buffer)\n *\n * const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n *\n * const manifest = JSON.parse(\n *   fs.readFileSync('./my_model-weights_manifest').toString()\n * )\n * const weightMap = await loadWeights(manifest, './')\n * ```\n * @param fetchWeightsFunction The function used for fetching the weight files.\n * @returns Weight loading function.\n */\nexport function weightsLoaderFactory(\n    fetchWeightsFunction: (fetchUrls: string[]) => Promise<ArrayBuffer[]>):\n    (manifest: WeightsManifestConfig, filePathPrefix?: string,\n     weightNames?: string[]) => Promise<NamedTensorMap> {\n  return async(\n             manifest: WeightsManifestConfig, filePathPrefix = '',\n             weightNames?: string[]): Promise<NamedTensorMap> => {\n    // Collect all the groups, weights, and their relative offsets to be\n    // fetched.\n    const groupIndicesToFetchMap = manifest.map(() => false);\n    const groupWeightsToFetch: {\n      [group: number]: Array<{\n        manifestEntry: WeightsManifestEntry; groupOffset: number;\n        sizeBytes: number;\n      }>\n    } = {};\n    const weightsFound =\n        weightNames != null ? weightNames.map(() => false) : [];\n    const allManifestWeightNames: string[] = [];\n    manifest.forEach((manifestGroupConfig, groupIndex) => {\n      let groupOffset = 0;\n      manifestGroupConfig.weights.forEach(weightsEntry => {\n        const rawDtype = ('quantization' in weightsEntry) ?\n            weightsEntry.quantization.dtype :\n            weightsEntry.dtype;\n\n        const weightsBytes = DTYPE_VALUE_SIZE_MAP[rawDtype] *\n            util.sizeFromShape(weightsEntry.shape);\n\n        const enqueueWeightsForFetchingFn = () => {\n          groupIndicesToFetchMap[groupIndex] = true;\n          if (groupWeightsToFetch[groupIndex] == null) {\n            groupWeightsToFetch[groupIndex] = [];\n          }\n\n          groupWeightsToFetch[groupIndex].push({\n            manifestEntry: weightsEntry,\n            groupOffset,\n            sizeBytes: weightsBytes\n          });\n        };\n\n        if (weightNames != null) {\n          weightNames.forEach((weightName, weightIndex) => {\n            if (weightName === weightsEntry.name) {\n              enqueueWeightsForFetchingFn();\n              weightsFound[weightIndex] = true;\n            }\n          });\n        } else {\n          enqueueWeightsForFetchingFn();\n        }\n\n        allManifestWeightNames.push(weightsEntry.name);\n        groupOffset += weightsBytes;\n      });\n    });\n\n    if (!weightsFound.every(found => found)) {\n      const weightsNotFound = weightNames.filter((_, i) => !weightsFound[i]);\n      throw new Error(\n          `Could not find weights in manifest with names: ` +\n          `${weightsNotFound.join(', ')}. \\n` +\n          `Manifest JSON has weights with names: ` +\n          `${allManifestWeightNames.join(', ')}.`);\n    }\n\n    // Convert the one-hot boolean groupId => shouldFetch map to a list of group\n    // IDs.\n    const groupIndicesToFetch =\n        groupIndicesToFetchMap.reduce((accumulator, shouldFetch, i) => {\n          if (shouldFetch) {\n            accumulator.push(i);\n          }\n          return accumulator;\n        }, []);\n\n    const fetchUrls: string[] = [];\n    groupIndicesToFetch.forEach(i => {\n      manifest[i].paths.forEach(filepath => {\n        const fetchUrl = filePathPrefix +\n            (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n        fetchUrls.push(fetchUrl);\n      });\n    });\n    const buffers = await fetchWeightsFunction(fetchUrls);\n\n    const weightsTensorMap: NamedTensorMap = {};\n    let bufferIndexOffset = 0;\n    groupIndicesToFetch.forEach(i => {\n      const numBuffers = manifest[i].paths.length;\n\n      let groupBytes = 0;\n      for (let i = 0; i < numBuffers; i++) {\n        groupBytes += buffers[bufferIndexOffset + i].byteLength;\n      }\n\n      // Create a buffer for the whole group.\n      const groupBuffer = new ArrayBuffer(groupBytes);\n      const groupByteBuffer = new Uint8Array(groupBuffer);\n      let groupBufferOffset = 0;\n      for (let i = 0; i < numBuffers; i++) {\n        const buffer = new Uint8Array(buffers[bufferIndexOffset + i]);\n        groupByteBuffer.set(buffer, groupBufferOffset);\n        groupBufferOffset += buffer.byteLength;\n      }\n\n      const weightsEntries = groupWeightsToFetch[i];\n      weightsEntries.forEach(weightsEntry => {\n        const byteBuffer = groupBuffer.slice(\n            weightsEntry.groupOffset,\n            weightsEntry.groupOffset + weightsEntry.sizeBytes);\n        const nameToTensorMap =\n            decodeWeights(byteBuffer, [weightsEntry.manifestEntry]);\n        for (const name in nameToTensorMap) {\n          weightsTensorMap[name] = nameToTensorMap[name];\n        }\n      });\n\n      bufferIndexOffset += numBuffers;\n    });\n\n    return weightsTensorMap;\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}