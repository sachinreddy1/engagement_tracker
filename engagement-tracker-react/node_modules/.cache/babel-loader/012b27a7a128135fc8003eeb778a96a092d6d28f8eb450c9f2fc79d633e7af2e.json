{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Neg } from '@tensorflow/tfjs-core';\nimport { negImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nconst NEG = \"return -x;\";\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] = negImplCPU(xData.values, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n  let program;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const negConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg\n};","map":{"version":3,"names":["env","Neg","negImplCPU","UnaryOpProgram","UnaryOpPackedProgram","NEG","neg","args","inputs","backend","x","shouldExecuteOnCPU","xData","texData","get","dataId","outValues","newShape","values","shape","dtype","makeTensorInfo","program","getBool","runWebGLProgram","negConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\kernels\\Neg.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {negImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst NEG = `return -x;`;\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg as {} as KernelFunc\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,GAAG,EAA4BC,GAAG,QAA0C,uBAAuB;AAE3G,SAAQC,UAAU,QAAO,wBAAwB;AACjD,SAAQC,cAAc,QAAO,gBAAgB;AAC7C,SAAQC,oBAAoB,QAAO,uBAAuB;AAE1D,MAAMC,GAAG,eAAe;AAExB;AACA;AACA,OAAM,SAAUC,GAAGA,CAACC,IAAoD;EAEtE,MAAM;IAACC,MAAM;IAAEC;EAAO,CAAC,GAAGF,IAAI;EAC9B,MAAM;IAACG;EAAC,CAAC,GAAGF,MAAM;EAElB,IAAIC,OAAO,CAACE,kBAAkB,CAAC,CAACD,CAAC,CAAC,CAAC,EAAE;IACnC,MAAME,KAAK,GAAGH,OAAO,CAACI,OAAO,CAACC,GAAG,CAACJ,CAAC,CAACK,MAAM,CAAC;IAC3C,MAAM,CAACC,SAAS,EAAEC,QAAQ,CAAC,GACvBf,UAAU,CAACU,KAAK,CAACM,MAAoB,EAAER,CAAC,CAACS,KAAK,EAAET,CAAC,CAACU,KAAK,CAAC;IAC5D,OAAOX,OAAO,CAACY,cAAc,CAACJ,QAAQ,EAAEP,CAAC,CAACU,KAAK,EAAEJ,SAAS,CAAC;;EAG7D,IAAIM,OAA4C;EAChD,IAAItB,GAAG,EAAE,CAACuB,OAAO,CAAC,6BAA6B,CAAC,EAAE;IAChDD,OAAO,GAAG,IAAIlB,oBAAoB,CAACM,CAAC,CAACS,KAAK,EAAEd,GAAG,CAAC;GACjD,MAAM;IACLiB,OAAO,GAAG,IAAInB,cAAc,CAACO,CAAC,CAACS,KAAK,EAAEd,GAAG,CAAC;;EAG5C,OAAOI,OAAO,CAACe,eAAe,CAACF,OAAO,EAAE,CAACZ,CAAC,CAAC,EAAEA,CAAC,CAACU,KAAK,CAAC;AACvD;AAEA,OAAO,MAAMK,SAAS,GAAiB;EACrCC,UAAU,EAAEzB,GAAG;EACf0B,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEtB;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}