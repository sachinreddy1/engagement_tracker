{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class RotateProgram {\n  constructor(imageShape, radians, fillValue, center) {\n    this.variableNames = ['Image'];\n    this.outputShape = [];\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    const sinFactor = Math.sin(radians).toFixed(3);\n    const cosFactor = Math.cos(radians).toFixed(3);\n    this.outputShape = imageShape;\n    const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const centerXString = centerX.toFixed(3);\n    const centerYString = centerY.toFixed(3);\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${centerXString}) * ${cosFactor} - (float(y) - ${centerYString}) * ${sinFactor};\n          float coordYFloat = (float(x) - ${centerXString}) * ${sinFactor} + (float(y) - ${centerYString}) * ${cosFactor};\n          int coordX = int(round(coordXFloat + ${centerXString}));\n          int coordY = int(round(coordYFloat + ${centerYString}));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}","map":{"version":3,"names":["backend_util","RotateProgram","constructor","imageShape","radians","fillValue","center","variableNames","outputShape","imageHeight","imageWidth","sinFactor","Math","sin","toFixed","cosFactor","cos","centerX","centerY","getImageCenter","centerXString","centerYString","fillSnippet","join","userCode"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\rotate_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], radians: number,\n      fillValue: number|[number, number, number],\n      center: number|[number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    const sinFactor = Math.sin(radians).toFixed(3);\n    const cosFactor = Math.cos(radians).toFixed(3);\n    this.outputShape = imageShape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const centerXString = centerX.toFixed(3);\n    const centerYString = centerY.toFixed(3);\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${centerXString}) * ${\n        cosFactor} - (float(y) - ${centerYString}) * ${sinFactor};\n          float coordYFloat = (float(x) - ${centerXString}) * ${\n        sinFactor} + (float(y) - ${centerYString}) * ${cosFactor};\n          int coordX = int(round(coordXFloat + ${centerXString}));\n          int coordY = int(round(coordYFloat + ${centerYString}));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,QAAO,uBAAuB;AAIlD,OAAM,MAAOC,aAAa;EAKxBC,YACIC,UAA4C,EAAEC,OAAe,EAC7DC,SAA0C,EAC1CC,MAA+B;IAPnC,KAAAC,aAAa,GAAG,CAAC,OAAO,CAAC;IACzB,KAAAC,WAAW,GAAa,EAAE;IAOxB,MAAMC,WAAW,GAAGN,UAAU,CAAC,CAAC,CAAC;IACjC,MAAMO,UAAU,GAAGP,UAAU,CAAC,CAAC,CAAC;IAChC,MAAMQ,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACT,OAAO,CAAC,CAACU,OAAO,CAAC,CAAC,CAAC;IAC9C,MAAMC,SAAS,GAAGH,IAAI,CAACI,GAAG,CAACZ,OAAO,CAAC,CAACU,OAAO,CAAC,CAAC,CAAC;IAC9C,IAAI,CAACN,WAAW,GAAGL,UAAU;IAE7B,MAAM,CAACc,OAAO,EAAEC,OAAO,CAAC,GACpBlB,YAAY,CAACmB,cAAc,CAACb,MAAM,EAAEG,WAAW,EAAEC,UAAU,CAAC;IAChE,MAAMU,aAAa,GAAGH,OAAO,CAACH,OAAO,CAAC,CAAC,CAAC;IACxC,MAAMO,aAAa,GAAGH,OAAO,CAACJ,OAAO,CAAC,CAAC,CAAC;IAExC,IAAIQ,WAAW,GAAG,EAAE;IACpB,IAAI,OAAOjB,SAAS,KAAK,QAAQ,EAAE;MACjCiB,WAAW,GAAG,uBAAuBjB,SAAS,CAACS,OAAO,CAAC,CAAC,CAAC,GAAG;KAC7D,MAAM;MACLQ,WAAW,GAAG;2BACOjB,SAAS,CAACkB,IAAI,CAAC,GAAG,CAAC;6CACD;;IAGzC,IAAI,CAACC,QAAQ,GAAG;;;;;4CAKwBJ,aAAa,OACjDL,SAAS,kBAAkBM,aAAa,OAAOV,SAAS;4CACpBS,aAAa,OACjDT,SAAS,kBAAkBU,aAAa,OAAON,SAAS;iDACfK,aAAa;iDACbC,aAAa;YAClDC,WAAW;uCACgBZ,UAAU,+BACzCD,WAAW;;;;;KAKd;EACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}