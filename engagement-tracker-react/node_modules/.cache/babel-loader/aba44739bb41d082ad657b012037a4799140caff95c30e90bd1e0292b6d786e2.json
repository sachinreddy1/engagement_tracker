{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { computeStrides, isString, rightPad, sizeFromShape } from './util';\n// Maximum number of values before we decide to show ellipsis.\nconst FORMAT_LIMIT_NUM_VALS = 20;\n// Number of first and last values to show when displaying a, b,...,y, z.\nconst FORMAT_NUM_FIRST_LAST_VALS = 3;\n// Number of significant digits to show.\nconst FORMAT_NUM_SIG_DIGITS = 7;\nexport function tensorToString(vals, shape, dtype, verbose) {\n  const strides = computeStrides(shape);\n  const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);\n  const rank = shape.length;\n  const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);\n  const lines = ['Tensor'];\n  if (verbose) {\n    lines.push(\"  dtype: \".concat(dtype));\n    lines.push(\"  rank: \".concat(rank));\n    lines.push(\"  shape: [\".concat(shape, \"]\"));\n    lines.push(\"  values:\");\n  }\n  lines.push(valsLines.map(l => '    ' + l).join('\\n'));\n  return lines.join('\\n');\n}\nfunction computeMaxSizePerColumn(vals, shape, dtype, strides) {\n  const n = sizeFromShape(shape);\n  const numCols = strides[strides.length - 1];\n  const padPerCol = new Array(numCols).fill(0);\n  const rank = shape.length;\n  const valuesOrTuples = dtype === 'complex64' ? createComplexTuples(vals) : vals;\n  if (rank > 1) {\n    for (let row = 0; row < n / numCols; row++) {\n      const offset = row * numCols;\n      for (let j = 0; j < numCols; j++) {\n        padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);\n      }\n    }\n  }\n  return padPerCol;\n}\nfunction valToString(val, pad, dtype) {\n  let valStr;\n  if (Array.isArray(val)) {\n    valStr = \"\".concat(parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS)), \" + \") + \"\".concat(parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS)), \"j\");\n  } else if (isString(val)) {\n    valStr = \"'\".concat(val, \"'\");\n  } else if (dtype === 'bool') {\n    valStr = boolNumToString(val);\n  } else {\n    valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();\n  }\n  return rightPad(valStr, pad);\n}\nfunction boolNumToString(v) {\n  return v === 0 ? 'false' : 'true';\n}\nfunction subTensorToString(vals, shape, dtype, strides, padPerCol) {\n  let isLast = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n  const storagePerElement = dtype === 'complex64' ? 2 : 1;\n  const size = shape[0];\n  const rank = shape.length;\n  if (rank === 0) {\n    if (dtype === 'complex64') {\n      const complexTuple = createComplexTuples(vals);\n      return [valToString(complexTuple[0], 0, dtype)];\n    }\n    if (dtype === 'bool') {\n      return [boolNumToString(vals[0])];\n    }\n    return [vals[0].toString()];\n  }\n  if (rank === 1) {\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n      const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;\n      let firstVals = Array.from(vals.slice(0, firstValsSize));\n      let lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));\n      if (dtype === 'complex64') {\n        firstVals = createComplexTuples(firstVals);\n        lastVals = createComplexTuples(lastVals);\n      }\n      return ['[' + firstVals.map((x, i) => valToString(x, padPerCol[i], dtype)).join(', ') + ', ..., ' + lastVals.map((x, i) => valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype)).join(', ') + ']'];\n    }\n    const displayVals = dtype === 'complex64' ? createComplexTuples(vals) : Array.from(vals);\n    return ['[' + displayVals.map((x, i) => valToString(x, padPerCol[i], dtype)).join(', ') + ']'];\n  }\n  // The array is rank 2 or more.\n  const subshape = shape.slice(1);\n  const substrides = strides.slice(1);\n  const stride = strides[0] * storagePerElement;\n  const lines = [];\n  if (size > FORMAT_LIMIT_NUM_VALS) {\n    for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false /* isLast */));\n    }\n    lines.push('...');\n    for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));\n    }\n  } else {\n    for (let i = 0; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));\n    }\n  }\n  const sep = rank === 2 ? ',' : '';\n  lines[0] = '[' + lines[0] + sep;\n  for (let i = 1; i < lines.length - 1; i++) {\n    lines[i] = ' ' + lines[i] + sep;\n  }\n  let newLineSep = ',\\n';\n  for (let i = 2; i < rank; i++) {\n    newLineSep += '\\n';\n  }\n  lines[lines.length - 1] = ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\n  return lines;\n}\nfunction createComplexTuples(vals) {\n  const complexTuples = [];\n  for (let i = 0; i < vals.length; i += 2) {\n    complexTuples.push([vals[i], vals[i + 1]]);\n  }\n  return complexTuples;\n}","map":{"version":3,"names":["computeStrides","isString","rightPad","sizeFromShape","FORMAT_LIMIT_NUM_VALS","FORMAT_NUM_FIRST_LAST_VALS","FORMAT_NUM_SIG_DIGITS","tensorToString","vals","shape","dtype","verbose","strides","padPerCol","computeMaxSizePerColumn","rank","length","valsLines","subTensorToString","lines","push","concat","map","l","join","n","numCols","Array","fill","valuesOrTuples","createComplexTuples","row","offset","j","Math","max","valToString","val","pad","valStr","isArray","parseFloat","toFixed","boolNumToString","toString","v","isLast","arguments","undefined","storagePerElement","size","complexTuple","firstValsSize","firstVals","from","slice","lastVals","x","i","displayVals","subshape","substrides","stride","start","end","sep","newLineSep","complexTuples"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-core\\src\\tensor_format.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray} from './types';\nimport {computeStrides, isString, rightPad, sizeFromShape} from './util';\n\n// Maximum number of values before we decide to show ellipsis.\nconst FORMAT_LIMIT_NUM_VALS = 20;\n// Number of first and last values to show when displaying a, b,...,y, z.\nconst FORMAT_NUM_FIRST_LAST_VALS = 3;\n// Number of significant digits to show.\nconst FORMAT_NUM_SIG_DIGITS = 7;\n\nexport function tensorToString(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    verbose: boolean) {\n  const strides = computeStrides(shape);\n  const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);\n  const rank = shape.length;\n  const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);\n  const lines = ['Tensor'];\n  if (verbose) {\n    lines.push(`  dtype: ${dtype}`);\n    lines.push(`  rank: ${rank}`);\n    lines.push(`  shape: [${shape}]`);\n    lines.push(`  values:`);\n  }\n  lines.push(valsLines.map(l => '    ' + l).join('\\n'));\n  return lines.join('\\n');\n}\n\nfunction computeMaxSizePerColumn(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    strides: number[]): number[] {\n  const n = sizeFromShape(shape);\n  const numCols = strides[strides.length - 1];\n  const padPerCol = new Array(numCols).fill(0);\n  const rank = shape.length;\n  const valuesOrTuples =\n      dtype === 'complex64' ? createComplexTuples(vals) : vals;\n\n  if (rank > 1) {\n    for (let row = 0; row < n / numCols; row++) {\n      const offset = row * numCols;\n      for (let j = 0; j < numCols; j++) {\n        padPerCol[j] = Math.max(\n            padPerCol[j],\n            valToString(valuesOrTuples[offset + j], 0, dtype).length);\n      }\n    }\n  }\n  return padPerCol;\n}\n\nfunction valToString(\n    val: number|string|[number, number], pad: number, dtype: DataType) {\n  let valStr: string;\n  if (Array.isArray(val)) {\n    valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` +\n        `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;\n  } else if (isString(val)) {\n    valStr = `'${val}'`;\n  } else if (dtype === 'bool') {\n    valStr = boolNumToString(val);\n  } else {\n    valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();\n  }\n\n  return rightPad(valStr, pad);\n}\n\nfunction boolNumToString(v: number): string {\n  return v === 0 ? 'false' : 'true';\n}\n\nfunction subTensorToString(\n    vals: TypedArray|string[], shape: number[], dtype: DataType,\n    strides: number[], padPerCol: number[], isLast = true): string[] {\n  const storagePerElement = dtype === 'complex64' ? 2 : 1;\n\n  const size = shape[0];\n  const rank = shape.length;\n  if (rank === 0) {\n    if (dtype === 'complex64') {\n      const complexTuple = createComplexTuples(vals);\n      return [valToString(complexTuple[0], 0, dtype)];\n    }\n    if (dtype === 'bool') {\n      return [boolNumToString(vals[0] as number)];\n    }\n    return [vals[0].toString()];\n  }\n\n  if (rank === 1) {\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n      const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;\n\n      let firstVals = Array.from<number|string|[number, number]>(\n          vals.slice(0, firstValsSize));\n      let lastVals = Array.from<number|string|[number, number]>(vals.slice(\n          (size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement,\n          size * storagePerElement));\n      if (dtype === 'complex64') {\n        firstVals = createComplexTuples(firstVals);\n        lastVals = createComplexTuples(lastVals);\n      }\n      return [\n        '[' +\n        firstVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n            .join(', ') +\n        ', ..., ' +\n        lastVals\n            .map(\n                (x, i) => valToString(\n                    x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype))\n            .join(', ') +\n        ']'\n      ];\n    }\n    const displayVals: Array<number|string|[number, number]> =\n        dtype === 'complex64' ? createComplexTuples(vals) :\n                                Array.from<number|string>(vals);\n\n    return [\n      '[' +\n      displayVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n          .join(', ') +\n      ']'\n    ];\n  }\n\n  // The array is rank 2 or more.\n  const subshape = shape.slice(1);\n  const substrides = strides.slice(1);\n  const stride = strides[0] * storagePerElement;\n  const lines: string[] = [];\n  if (size > FORMAT_LIMIT_NUM_VALS) {\n    for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          false /* isLast */));\n    }\n    lines.push('...');\n    for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          i === size - 1 /* isLast */));\n    }\n  } else {\n    for (let i = 0; i < size; i++) {\n      const start = i * stride;\n      const end = start + stride;\n      lines.push(...subTensorToString(\n          vals.slice(start, end), subshape, dtype, substrides, padPerCol,\n          i === size - 1 /* isLast */));\n    }\n  }\n  const sep = rank === 2 ? ',' : '';\n  lines[0] = '[' + lines[0] + sep;\n  for (let i = 1; i < lines.length - 1; i++) {\n    lines[i] = ' ' + lines[i] + sep;\n  }\n  let newLineSep = ',\\n';\n  for (let i = 2; i < rank; i++) {\n    newLineSep += '\\n';\n  }\n  lines[lines.length - 1] =\n      ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\n  return lines;\n}\n\nfunction createComplexTuples(vals: Array<{}>|\n                             TypedArray): Array<[number, number]> {\n  const complexTuples: Array<[number, number]> = [];\n  for (let i = 0; i < vals.length; i += 2) {\n    complexTuples.push([vals[i], vals[i + 1]] as [number, number]);\n  }\n  return complexTuples;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}