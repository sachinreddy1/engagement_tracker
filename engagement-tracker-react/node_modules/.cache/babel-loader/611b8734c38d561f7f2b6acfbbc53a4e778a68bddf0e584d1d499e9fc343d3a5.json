{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from '../kernels/Cast';\nimport { complex } from '../kernels/Complex';\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {\n  if (complexImpl == null) {\n    return _ref => {\n      let {\n        inputs,\n        backend\n      } = _ref;\n      const {\n        a,\n        b\n      } = inputs;\n      const cpuBackend = backend;\n      assertNotComplex([a, b], name);\n      const aVals = cpuBackend.data.get(a.dataId).values;\n      const bVals = cpuBackend.data.get(b.dataId).values;\n      const $dtype = dtype || a.dtype;\n      const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n  return _ref2 => {\n    let {\n      inputs,\n      backend\n    } = _ref2;\n    const {\n      a,\n      b\n    } = inputs;\n    const cpuBackend = backend;\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast({\n        inputs: {\n          x: a\n        },\n        backend: cpuBackend,\n        attrs: {\n          dtype: 'complex64'\n        }\n      });\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n      const aRealVals = cpuBackend.data.get(aReal.dataId).values;\n      const aImagVals = cpuBackend.data.get(aImag.dataId).values;\n      const $bComplex = cast({\n        inputs: {\n          x: b\n        },\n        backend: cpuBackend,\n        attrs: {\n          dtype: 'complex64'\n        }\n      });\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n      const bRealVals = cpuBackend.data.get(bReal.dataId).values;\n      const bImagVals = cpuBackend.data.get(bImag.dataId).values;\n      const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n      const resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n      const resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n      const result = complex({\n        inputs: {\n          real: resultReal,\n          imag: resultImag\n        },\n        backend: cpuBackend\n      });\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values;\n      const bVals = cpuBackend.data.get(b.dataId).values;\n      const $dtype = dtype || a.dtype;\n      const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op) {\n  return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n        const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n        const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}","map":{"version":3,"names":["backend_util","util","assertNotComplex","cast","complex","binaryKernelFunc","name","simpleImpl","complexImpl","dtype","_ref","inputs","backend","a","b","cpuBackend","aVals","data","get","dataId","values","bVals","$dtype","resultData","resultShape","shape","makeTensorInfo","_ref2","$aComplex","x","attrs","$aComplexVals","aReal","complexTensorInfos","real","aImag","imag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","result","disposeIntermediateTensorInfo","createComplexBinaryKernelImpl","op","aShape","bShape","assertAndGetBroadcastShape","resultSize","sizeFromShape","resultRank","length","resultStrides","computeStrides","resultRealVals","getTypedArrayFromDType","resultImagVals","aBroadcastDims","getBroadcastDims","bBroadcastDims","mergeRealAndImagArrays","aRank","aStrides","bRank","bStrides","i","aIdx","bIdx","loc","indexToLoc","aLoc","slice","forEach","d","aIndex","locToIndex","bLoc","bIndex","opResult"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\utils\\binary_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}