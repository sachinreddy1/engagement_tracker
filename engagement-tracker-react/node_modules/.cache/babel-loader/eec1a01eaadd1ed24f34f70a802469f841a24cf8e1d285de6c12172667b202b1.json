{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { SGDOptimizer } from './sgd_optimizer';\n/** @doclink Optimizer */\nexport class MomentumOptimizer extends SGDOptimizer {\n  constructor(learningRate, momentum) {\n    let useNesterov = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super(learningRate);\n    this.learningRate = learningRate;\n    this.momentum = momentum;\n    this.useNesterov = useNesterov;\n    this.accumulations = [];\n    this.m = scalar(this.momentum);\n  }\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulations[i] == null) {\n        const trainable = false;\n        this.accumulations[i] = {\n          originalName: \"\".concat(name, \"/momentum\"),\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n      const accumulation = this.accumulations[i].variable;\n      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n      tidy(() => {\n        let newValue;\n        const newAccumulation = add(mul(this.m, accumulation), gradient);\n        if (this.useNesterov) {\n          newValue = add(mul(this.c, add(gradient, mul(newAccumulation, this.m))), value);\n        } else {\n          newValue = add(mul(this.c, newAccumulation), value);\n        }\n        accumulation.assign(newAccumulation);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n  dispose() {\n    this.m.dispose();\n    if (this.accumulations != null) {\n      dispose(this.accumulations.map(v => v.variable));\n    }\n  }\n  /**\n   * Sets the momentum of the optimizer.\n   *\n   * @param momentum\n   */\n  setMomentum(momentum) {\n    this.momentum = momentum;\n  }\n  async getWeights() {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulations.map(v => ({\n      name: v.originalName,\n      tensor: v.variable\n    })));\n  }\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulations = weightValues.map(v => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n  }\n  getConfig() {\n    return {\n      'learningRate': this.learningRate,\n      'momentum': this.momentum,\n      'useNesterov': this.useNesterov\n    };\n  }\n  /** @nocollapse */\n  static fromConfig(cls, config) {\n    return new cls(config['learningRate'], config['momentum'], config['useNesterov']);\n  }\n}\n/** @nocollapse */\nMomentumOptimizer.className = 'Momentum'; // Name matters for Python compatibility.\nregisterClass(MomentumOptimizer);","map":{"version":3,"names":["ENGINE","dispose","tidy","add","mul","scalar","zerosLike","registerClass","SGDOptimizer","MomentumOptimizer","constructor","learningRate","momentum","useNesterov","arguments","length","undefined","accumulations","m","applyGradients","variableGradients","variableNames","Array","isArray","map","item","name","Object","keys","forEach","i","value","registeredVariables","trainable","originalName","concat","variable","accumulation","gradient","tensor","newValue","newAccumulation","c","assign","incrementIterations","v","setMomentum","getWeights","saveIterations","setWeights","weightValues","extractIterations","getConfig","fromConfig","cls","config","className"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-core\\src\\optimizers\\momentum_optimizer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {mul} from '../ops/mul';\nimport {scalar} from '../ops/scalar';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Scalar, Tensor} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {OptimizerVariable} from './optimizer';\nimport {SGDOptimizer} from './sgd_optimizer';\n\n/** @doclink Optimizer */\nexport class MomentumOptimizer extends SGDOptimizer {\n  /** @nocollapse */\n  static className = 'Momentum';  // Name matters for Python compatibility.\n  private m: Scalar;\n  private accumulations: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, private momentum: number,\n      private useNesterov = false) {\n    super(learningRate);\n    this.m = scalar(this.momentum);\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulations[i] == null) {\n        const trainable = false;\n        this.accumulations[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const accumulation = this.accumulations[i].variable;\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      tidy(() => {\n        let newValue: Tensor;\n        const newAccumulation = add(mul(this.m, accumulation), gradient);\n        if (this.useNesterov) {\n          newValue = add(\n              mul(this.c, add(gradient, mul(newAccumulation, this.m))), value);\n        } else {\n          newValue = add(mul(this.c, newAccumulation), value);\n        }\n        accumulation.assign(newAccumulation);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    this.m.dispose();\n    if (this.accumulations != null) {\n      dispose(this.accumulations.map(v => v.variable));\n    }\n  }\n\n  /**\n   * Sets the momentum of the optimizer.\n   *\n   * @param momentum\n   */\n  setMomentum(momentum: number) {\n    this.momentum = momentum;\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulations.map(\n        v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulations = weightValues.map(\n        v => ({originalName: v.name, variable: v.tensor.variable(trainable)}));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'momentum': this.momentum,\n      'useNesterov': this.useNesterov\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['momentum'], config['useNesterov']);\n  }\n}\nregisterClass(MomentumOptimizer);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}