{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Normalization layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { moments, serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Applies batch normalization on x given mean, var, beta and gamma.\n *\n * I.e. returns:\n *   `output = (x - mean) / (sqrt(var) + epsilon) * gamma + beta`\n *\n * @param x Input tensor.\n * @param mean Mean of batch.\n * @param variance Variance of batch.\n * @param beta Tensor with which to center the input.\n * @param gamma Tensor by which to scale the input.\n * @param epsilon Fuzz factor.\n * @returns The result of the batch normalization.\n */\nexport function batchNormalization(x, mean, variance, beta, gamma, epsilon = 1e-3) {\n  let out;\n  if (x.rank === 2) {\n    out = tfc.batchNorm2d(x, mean, variance, beta, gamma, epsilon);\n  } else if (x.rank === 3) {\n    // TODO(cais): Check rank; give proper error message.\n    out = tfc.batchNorm3d(x, mean, variance, beta, gamma, epsilon);\n  } else if (x.rank === 4) {\n    out = tfc.batchNorm4d(x, mean, variance, beta, gamma, epsilon);\n  } else {\n    throw new NotImplementedError(`batchNormalization is not implemented for array of rank ${x.rank} ` + `yet`);\n  }\n  return out;\n}\n/**\n * Non-broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {\n  return tidy(() => {\n    const meanAndVariance = tfc.moments(x, reductionAxes);\n    const mean = meanAndVariance.mean;\n    const variance = meanAndVariance.variance;\n    const normed = batchNormalization(x, mean, variance, beta, gamma, epsilon);\n    return [normed, mean, variance];\n  });\n}\n/**\n * Broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {\n  return tidy(() => {\n    const meanAndVariance = tfc.moments(x, reductionAxes);\n    const mean = meanAndVariance.mean;\n    const variance = meanAndVariance.variance;\n    const targetShape = [];\n    for (const axis of math_utils.range(0, x.rank)) {\n      if (reductionAxes.indexOf(axis) !== -1) {\n        targetShape.push(1);\n      } else {\n        targetShape.push(x.shape[axis]);\n      }\n    }\n    const broadcastMean = mean.reshape(targetShape);\n    const broadcastVariance = variance.reshape(targetShape);\n    const broadcastGamma = gamma == null ? null : gamma.reshape(targetShape);\n    const broadcastBeta = beta == null ? null : beta.reshape(targetShape);\n    const normed = batchNormalization(x, broadcastMean, broadcastVariance, broadcastBeta, broadcastGamma, epsilon);\n    return [normed, mean, variance];\n  });\n}\n/**\n * Batch normalization for use in training (not inference).\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nexport function normalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {\n  if (util.arraysEqual(reductionAxes.slice().sort(), math_utils.range(0, x.rank - 1))) {\n    return regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);\n  } else {\n    return broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);\n  }\n}\nexport class BatchNormalization extends Layer {\n  constructor(args) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n    this.supportsMasking = true;\n    this.axis = args.axis == null ? -1 : args.axis;\n    this.momentum = args.momentum == null ? 0.99 : args.momentum;\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    this.movingMeanInitializer = getInitializer(args.movingMeanInitializer || 'zeros');\n    this.movingVarianceInitializer = getInitializer(args.movingVarianceInitializer || 'ones');\n    this.betaConstraint = getConstraint(args.betaConstraint);\n    this.gammaConstraint = getConstraint(args.gammaConstraint);\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const axis = this.axis >= 0 ? this.axis : this.axis + inputShape.length;\n    const dim = inputShape[axis];\n    if (dim == null) {\n      throw new ValueError(`Axis ${axis} of input tensor should have a defined dimension but ` + `the layer received an input with shape ` + `${JSON.stringify(inputShape)}.`);\n    }\n    this.inputSpec = [new InputSpec({\n      ndim: inputShape.length,\n      axes: {\n        [axis]: dim\n      }\n    })];\n    const shape = [dim];\n    if (this.scale) {\n      this.gamma = this.addWeight('gamma', shape, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint);\n    }\n    if (this.center) {\n      this.beta = this.addWeight('beta', shape, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint);\n    }\n    this.movingMean = this.addWeight('moving_mean', shape, null, this.movingMeanInitializer, null, false);\n    this.movingVariance = this.addWeight('moving_variance', shape, null, this.movingVarianceInitializer, null, false);\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      const input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n      const ndim = inputShape.length;\n      const reductionAxes = math_utils.range(0, ndim);\n      const axis = this.axis >= 0 ? this.axis : this.axis + ndim;\n      reductionAxes.splice(axis, 1);\n      const broadcastShape = generic_utils.pyListRepeat(1, ndim);\n      broadcastShape[axis] = inputShape[axis];\n      const sortedReductionAxes = reductionAxes.slice();\n      sortedReductionAxes.sort();\n      const needsBroadcasting = !util.arraysEqual(sortedReductionAxes, math_utils.range(0, ndim).slice(0, ndim - 1));\n      const normalizeInference = () => {\n        if (needsBroadcasting) {\n          const broadcastMovingMean = this.movingMean.read().reshape(broadcastShape);\n          const broadcastMovingVariance = this.movingVariance.read().reshape(broadcastShape);\n          const broadcastBeta = this.center ? this.beta.read().reshape(broadcastShape) : null;\n          const broadcastGamma = this.scale ? this.gamma.read().reshape(broadcastShape) : null;\n          return batchNormalization(input, broadcastMovingMean, broadcastMovingVariance, broadcastBeta, broadcastGamma, this.epsilon);\n        } else {\n          return batchNormalization(input, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);\n        }\n      };\n      if (!training) {\n        return normalizeInference();\n      }\n      const [normedTraining, mean, variance] = normalizeBatchInTraining(input, this.gamma.read(), this.beta.read(), reductionAxes, this.epsilon);\n      const doMovingAverage = (variable, value, momentum) => {\n        tfc.tidy(() => {\n          const decay = 1 - momentum;\n          const origValue = variable.read();\n          const updateDelta = origValue.sub(value).mul(decay);\n          variable.write(origValue.sub(updateDelta));\n        });\n      };\n      // Perform updates to moving mean and moving variance for training.\n      // Porting Note: In PyKeras, these updates to `movingMean` and\n      //   `movingAverage` are done as a deferred Graph, added to the `Layer`'s\n      //   `update`s using the `add_update()` method. Here we do it imperatively\n      //   and encapsulate the updates in a function that is invoked\n      //   immediately.\n      const updateMovingMeanAndVariance = () => {\n        doMovingAverage(this.movingMean, mean, this.momentum);\n        doMovingAverage(this.movingVariance, variance, this.momentum);\n      };\n      updateMovingMeanAndVariance();\n      return normedTraining;\n    });\n  }\n  getConfig() {\n    const config = {\n      axis: this.axis,\n      momentum: this.momentum,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      movingMeanInitializer: serializeInitializer(this.movingMeanInitializer),\n      movingVarianceInitializer: serializeInitializer(this.movingVarianceInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer),\n      betaConstraint: serializeConstraint(this.betaConstraint),\n      gammaConstraint: serializeConstraint(this.gammaConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n/** @nocollapse */\nBatchNormalization.className = 'BatchNormalization';\nserialization.registerClass(BatchNormalization);\nexport class LayerNormalization extends Layer {\n  constructor(args) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n    this.axis = args.axis == null ? -1 : args.axis;\n    if (typeof this.axis === 'number') {\n      if (!Number.isInteger(this.axis)) {\n        throw new Error(`Expected axis to be an integer, but received ${this.axis}`);\n      }\n    } else if (Array.isArray(this.axis)) {\n      for (const axis of this.axis) {\n        if (!Number.isInteger(axis)) {\n          throw new Error(`Expected axis to be an array of integers, ` + `but received ${JSON.stringify(this.axis)}`);\n        }\n      }\n    } else {\n      throw new Error(`Expected axis to be an integer or an array of integers, ` + `but received ${JSON.stringify(this.axis)}`);\n    }\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n    this.supportsMasking = true;\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const nDims = inputShape.length;\n    // Convert axis to array and resolve negatives.\n    if (typeof this.axis === 'number') {\n      this.axis = [this.axis];\n    }\n    for (let i = 0; i < this.axis.length; ++i) {\n      if (this.axis[i] < 0) {\n        this.axis[i] += nDims;\n      }\n    }\n    // Further validate axes.\n    for (const axis of this.axis) {\n      if (axis < 0 || axis >= nDims) {\n        throw new Error(`Invalid axis: ${axis}`);\n      }\n    }\n    if (this.axis.length !== generic_utils.unique(this.axis).length) {\n      throw new Error(`Found duplicate axes in: ${this.axis}`);\n    }\n    const paramShape = this.axis.map(axis => inputShape[axis]);\n    const trainable = true;\n    if (this.scale) {\n      this.gamma = this.addWeight('gamma', paramShape, 'float32', this.gammaInitializer, this.gammaRegularizer, trainable);\n    } else {\n      this.gamma = null;\n    }\n    if (this.center) {\n      this.beta = this.addWeight('beta', paramShape, 'float32', this.betaInitializer, this.betaRegularizer, trainable);\n    } else {\n      this.beta = null;\n    }\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    const input = getExactlyOneTensor(inputs);\n    const inputShape = input.shape;\n    const nDims = inputShape.length;\n    return tidy(() => {\n      const keepDims = true;\n      let {\n        mean,\n        variance\n      } = moments(input, this.axis, keepDims);\n      const broadcastShape = generic_utils.pyListRepeat(1, nDims);\n      for (const dim of this.axis) {\n        broadcastShape[dim] = inputShape[dim];\n      }\n      const broadcast = v => {\n        if (v != null && v.shape.length !== nDims && this.axis !== [nDims - 1]) {\n          return v.reshape(broadcastShape);\n        } else {\n          return v;\n        }\n      };\n      let scale = broadcast(this.gamma.read());\n      let offset = broadcast(this.beta.read());\n      // TODO(https://github.com/tensorflow/tfjs/issues/2120): The tiling below\n      // is a workaround for the limitation of core's batchNormalization?d don't\n      // support broadcasting in their gradients. In addition, the tiling is\n      // necessary to ensure correctness on the browser CPU backend regardless\n      // of forward or backward computation. Remove this workaround once the\n      // limitation is addressed. See .\n      const momentsTiling = [];\n      const scaleOffsetTiling = [];\n      for (let i = 0; i < nDims; ++i) {\n        if (this.axis.indexOf(i) !== -1) {\n          momentsTiling.push(inputShape[i]);\n          scaleOffsetTiling.push(1);\n        } else {\n          momentsTiling.push(1);\n          scaleOffsetTiling.push(inputShape[i]);\n        }\n      }\n      mean = mean.tile(momentsTiling);\n      variance = variance.tile(momentsTiling);\n      scale = scale.tile(scaleOffsetTiling);\n      offset = offset.tile(scaleOffsetTiling);\n      return batchNormalization(input, mean, variance, offset, scale, this.epsilon);\n    });\n  }\n  getConfig() {\n    const config = {\n      axis: this.axis,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n/** @nocollapse */\nLayerNormalization.className = 'LayerNormalization';\nserialization.registerClass(LayerNormalization);","map":{"version":3,"names":["tfc","moments","serialization","tidy","util","getConstraint","serializeConstraint","InputSpec","Layer","NotImplementedError","ValueError","getInitializer","serializeInitializer","getRegularizer","serializeRegularizer","generic_utils","math_utils","getExactlyOneShape","getExactlyOneTensor","batchNormalization","x","mean","variance","beta","gamma","epsilon","out","rank","batchNorm2d","batchNorm3d","batchNorm4d","regularNormalizeBatchInTraining","reductionAxes","meanAndVariance","normed","broadcastNormalizeBatchInTraining","targetShape","axis","range","indexOf","push","shape","broadcastMean","reshape","broadcastVariance","broadcastGamma","broadcastBeta","normalizeBatchInTraining","arraysEqual","slice","sort","BatchNormalization","constructor","args","supportsMasking","momentum","center","scale","betaInitializer","gammaInitializer","movingMeanInitializer","movingVarianceInitializer","betaConstraint","gammaConstraint","betaRegularizer","gammaRegularizer","build","inputShape","length","dim","JSON","stringify","inputSpec","ndim","axes","addWeight","movingMean","movingVariance","built","call","inputs","kwargs","training","input","splice","broadcastShape","pyListRepeat","sortedReductionAxes","needsBroadcasting","normalizeInference","broadcastMovingMean","read","broadcastMovingVariance","normedTraining","doMovingAverage","variable","value","decay","origValue","updateDelta","sub","mul","write","updateMovingMeanAndVariance","getConfig","config","baseConfig","Object","assign","className","registerClass","LayerNormalization","Number","isInteger","Error","Array","isArray","nDims","i","unique","paramShape","map","trainable","keepDims","broadcast","v","offset","momentsTiling","scaleOffsetTiling","tile"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-layers\\src\\layers\\normalization.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Normalization layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {moments, serialization, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\n/**\n * Applies batch normalization on x given mean, var, beta and gamma.\n *\n * I.e. returns:\n *   `output = (x - mean) / (sqrt(var) + epsilon) * gamma + beta`\n *\n * @param x Input tensor.\n * @param mean Mean of batch.\n * @param variance Variance of batch.\n * @param beta Tensor with which to center the input.\n * @param gamma Tensor by which to scale the input.\n * @param epsilon Fuzz factor.\n * @returns The result of the batch normalization.\n */\nexport function batchNormalization(\n    x: Tensor, mean: Tensor, variance: Tensor, beta?: Tensor, gamma?: Tensor,\n    epsilon = 1e-3): Tensor {\n  let out: Tensor;\n  if (x.rank === 2) {\n    out = tfc.batchNorm2d(\n        x as Tensor2D, mean as Tensor2D | Tensor1D,\n        variance as Tensor2D | Tensor1D, beta as Tensor2D | Tensor1D,\n        gamma as Tensor2D | Tensor1D, epsilon);\n  } else if (x.rank === 3) {\n    // TODO(cais): Check rank; give proper error message.\n    out = tfc.batchNorm3d(\n        x as Tensor3D, mean as Tensor3D | Tensor1D,\n        variance as Tensor3D | Tensor1D, beta as Tensor3D | Tensor1D,\n        gamma as Tensor3D | Tensor1D, epsilon);\n  } else if (x.rank === 4) {\n    out = tfc.batchNorm4d(\n        x as Tensor4D, mean as Tensor4D | Tensor1D,\n        variance as Tensor4D | Tensor1D, beta as Tensor4D | Tensor1D,\n        gamma as Tensor4D | Tensor1D, epsilon);\n  } else {\n    throw new NotImplementedError(\n        `batchNormalization is not implemented for array of rank ${x.rank} ` +\n        `yet`);\n  }\n  return out;\n}\n\n/**\n * Non-broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction regularNormalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  return tidy(() => {\n           const meanAndVariance = tfc.moments(x, reductionAxes);\n           const mean = meanAndVariance.mean;\n           const variance = meanAndVariance.variance;\n           const normed =\n               batchNormalization(x, mean, variance, beta, gamma, epsilon);\n           return [normed, mean, variance];\n         }) as [Tensor, Tensor, Tensor];\n}\n\n/**\n * Broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction broadcastNormalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  return tidy(() => {\n           const meanAndVariance = tfc.moments(x, reductionAxes);\n           const mean = meanAndVariance.mean;\n           const variance = meanAndVariance.variance;\n           const targetShape: number[] = [];\n           for (const axis of math_utils.range(0, x.rank)) {\n             if (reductionAxes.indexOf(axis) !== -1) {\n               targetShape.push(1);\n             } else {\n               targetShape.push(x.shape[axis]);\n             }\n           }\n           const broadcastMean = mean.reshape(targetShape);\n           const broadcastVariance = variance.reshape(targetShape);\n           const broadcastGamma =\n               gamma == null ? null : gamma.reshape(targetShape);\n           const broadcastBeta =\n               beta == null ? null : beta.reshape(targetShape);\n           const normed = batchNormalization(\n               x, broadcastMean, broadcastVariance, broadcastBeta,\n               broadcastGamma, epsilon);\n           return [normed, mean, variance];\n         }) as [Tensor, Tensor, Tensor];\n}\n\n/**\n * Batch normalization for use in training (not inference).\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nexport function normalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  if (util.arraysEqual(\n          reductionAxes.slice().sort(), math_utils.range(0, x.rank - 1))) {\n    return regularNormalizeBatchInTraining(\n        x, gamma, beta, reductionAxes, epsilon);\n  } else {\n    return broadcastNormalizeBatchInTraining(\n        x, gamma, beta, reductionAxes, epsilon);\n  }\n}\n\nexport declare interface BatchNormalizationLayerArgs extends LayerArgs {\n  /**\n   * The integer axis that should be normalized (typically the features axis).\n   * Defaults to -1.\n   *\n   * For instance, after a `Conv2D` layer with `data_format=\"channels_first\"`,\n   * set `axis=1` in `batchNormalization`.\n   */\n  axis?: number;\n\n  /**\n   * Momentum of the moving average. Defaults to 0.99.\n   */\n  momentum?: number;\n\n  /**\n   * Small float added to the variance to avoid dividing by zero. Defaults to\n   * 1e-3.\n   */\n  epsilon?: number;\n\n  /**\n   * If `true`, add offset of `beta` to normalized tensor.\n   * If `false`, `beta` is ignored.\n   * Defaults to `true`.\n   */\n  center?: boolean;\n\n  /**\n   * If `true`, multiply by `gamma`.\n   * If `false`, `gamma` is not used.\n   * When the next layer is linear (also e.g. `nn.relu`),\n   * this can be disabled since the scaling will be done by the next layer.\n   * Defaults to `true`.\n   */\n  scale?: boolean;\n\n  /**\n   * Initializer for the beta weight.\n   *  Defaults to 'zeros'.\n   */\n  betaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the gamma weight.\n   *  Defaults to `ones`.\n   */\n  gammaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the moving mean.\n   * Defaults to `zeros`\n   */\n  movingMeanInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the moving variance.\n   *  Defaults to 'Ones'.\n   */\n  movingVarianceInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the beta weight.\n   */\n  betaConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for gamma weight.\n   */\n  gammaConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer for the beta weight.\n   */\n  betaRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer for the gamma weight.\n   */\n  gammaRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport class BatchNormalization extends Layer {\n  /** @nocollapse */\n  static className = 'BatchNormalization';\n  private readonly axis: number;\n  private readonly momentum: number;\n  private readonly epsilon: number;\n  private readonly center: boolean;\n  private readonly scale: boolean;\n  private readonly betaInitializer: Initializer;\n  private readonly gammaInitializer: Initializer;\n  private readonly movingMeanInitializer: Initializer;\n  private readonly movingVarianceInitializer: Initializer;\n  private readonly betaConstraint: Constraint;\n  private readonly gammaConstraint: Constraint;\n  private readonly betaRegularizer: Regularizer;\n  private readonly gammaRegularizer: Regularizer;\n  private gamma: LayerVariable;\n  private beta: LayerVariable;\n  private movingMean: LayerVariable;\n  private movingVariance: LayerVariable;\n\n  constructor(args?: BatchNormalizationLayerArgs) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n\n    this.supportsMasking = true;\n    this.axis = args.axis == null ? -1 : args.axis;\n    this.momentum = args.momentum == null ? 0.99 : args.momentum;\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    this.movingMeanInitializer =\n        getInitializer(args.movingMeanInitializer || 'zeros');\n    this.movingVarianceInitializer =\n        getInitializer(args.movingVarianceInitializer || 'ones');\n    this.betaConstraint = getConstraint(args.betaConstraint);\n    this.gammaConstraint = getConstraint(args.gammaConstraint);\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const axis = this.axis >= 0 ? this.axis : (this.axis + inputShape.length);\n    const dim = inputShape[axis];\n    if (dim == null) {\n      throw new ValueError(\n          `Axis ${axis} of input tensor should have a defined dimension but ` +\n          `the layer received an input with shape ` +\n          `${JSON.stringify(inputShape)}.`);\n    }\n    this.inputSpec =\n        [new InputSpec({ndim: inputShape.length, axes: {[axis]: dim}})];\n    const shape = [dim];\n    if (this.scale) {\n      this.gamma = this.addWeight(\n          'gamma', shape, null, this.gammaInitializer, this.gammaRegularizer,\n          true, this.gammaConstraint);\n    }\n    if (this.center) {\n      this.beta = this.addWeight(\n          'beta', shape, null, this.betaInitializer, this.betaRegularizer, true,\n          this.betaConstraint);\n    }\n    this.movingMean = this.addWeight(\n        'moving_mean', shape, null, this.movingMeanInitializer, null, false);\n    this.movingVariance = this.addWeight(\n        'moving_variance', shape, null, this.movingVarianceInitializer, null,\n        false);\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      const input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n      const ndim = inputShape.length;\n      const reductionAxes = math_utils.range(0, ndim);\n      const axis = this.axis >= 0 ? this.axis : (this.axis + ndim);\n      reductionAxes.splice(axis, 1);\n      const broadcastShape = generic_utils.pyListRepeat(1, ndim);\n      broadcastShape[axis] = inputShape[axis];\n\n      const sortedReductionAxes = reductionAxes.slice();\n      sortedReductionAxes.sort();\n      const needsBroadcasting = !util.arraysEqual(\n          sortedReductionAxes, math_utils.range(0, ndim).slice(0, ndim - 1));\n\n      const normalizeInference: () => Tensor = () => {\n        if (needsBroadcasting) {\n          const broadcastMovingMean =\n              this.movingMean.read().reshape(broadcastShape);\n          const broadcastMovingVariance =\n              this.movingVariance.read().reshape(broadcastShape);\n          const broadcastBeta =\n              this.center ? this.beta.read().reshape(broadcastShape) : null;\n          const broadcastGamma =\n              this.scale ? this.gamma.read().reshape(broadcastShape) : null;\n          return batchNormalization(\n              input, broadcastMovingMean, broadcastMovingVariance,\n              broadcastBeta, broadcastGamma, this.epsilon);\n        } else {\n          return batchNormalization(\n              input, this.movingMean.read(), this.movingVariance.read(),\n              this.beta == null ? null : this.beta.read(),\n              this.gamma == null ? null : this.gamma.read(), this.epsilon);\n        }\n      };\n\n      if (!training) {\n        return normalizeInference();\n      }\n\n      const [normedTraining, mean, variance] = normalizeBatchInTraining(\n          input, this.gamma.read(), this.beta.read(), reductionAxes,\n          this.epsilon);\n\n      const doMovingAverage =\n          (variable: LayerVariable, value: Tensor, momentum: number): void => {\n            tfc.tidy(() => {\n              const decay = 1 - momentum;\n              const origValue = variable.read();\n              const updateDelta = origValue.sub(value).mul(decay);\n              variable.write(origValue.sub(updateDelta));\n            });\n          };\n\n      // Perform updates to moving mean and moving variance for training.\n      // Porting Note: In PyKeras, these updates to `movingMean` and\n      //   `movingAverage` are done as a deferred Graph, added to the `Layer`'s\n      //   `update`s using the `add_update()` method. Here we do it imperatively\n      //   and encapsulate the updates in a function that is invoked\n      //   immediately.\n      const updateMovingMeanAndVariance = () => {\n        doMovingAverage(this.movingMean, mean, this.momentum);\n        doMovingAverage(this.movingVariance, variance, this.momentum);\n      };\n      updateMovingMeanAndVariance();\n\n      return normedTraining;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      axis: this.axis,\n      momentum: this.momentum,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      movingMeanInitializer: serializeInitializer(this.movingMeanInitializer),\n      movingVarianceInitializer:\n          serializeInitializer(this.movingVarianceInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer),\n      betaConstraint: serializeConstraint(this.betaConstraint),\n      gammaConstraint: serializeConstraint(this.gammaConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(BatchNormalization);\n\nexport interface LayerNormalizationLayerArgs extends LayerArgs {\n  /**\n   * The axis or axes that should be normalized (typically, the feature axis.)\n   * Defaults to -1 (the last axis.)\n   */\n  axis?: number|number[];\n\n  /**\n   * A small positive float added to variance to avoid divison by zero.\n   * Defaults to 1e-3.\n   */\n  epsilon?: number;\n\n  /**\n   * If `true`, add offset of `beta` to normalized tensor.\n   * If `false`, `beta` is ignored.\n   * Default: `true`.\n   */\n  center?: boolean;\n\n  /**\n   * If `true`, multiply output by `gamma`.\n   * If `false`, `gamma` is not used.\n   * When the next layer is linear, this can be disabled since scaling will\n   * be done by the next layer.\n   * Default: `true`.\n   */\n  scale?: boolean;\n\n  /**\n   * Initializer for the beta weight.\n   * Default: `'zeros'`.\n   */\n  betaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the gamma weight.\n   * Default: `'ones'`.\n   */\n  gammaInitializer?: InitializerIdentifier|Initializer;\n\n  /** Regularizer for the beta weight. */\n  betaRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /** Regularizer for the gamma weight. */\n  gammaRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport class LayerNormalization extends Layer {\n  /** @nocollapse */\n  static className = 'LayerNormalization';\n\n  private axis: number|number[];\n  readonly epsilon: number;\n  readonly center: boolean;\n  readonly scale: boolean;\n  readonly betaInitializer: Initializer;\n  readonly gammaInitializer: Initializer;\n  readonly betaRegularizer: Regularizer;\n  readonly gammaRegularizer: Regularizer;\n\n  private gamma: LayerVariable;\n  private beta: LayerVariable;\n\n  constructor(args?: LayerNormalizationLayerArgs) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n\n    this.axis = args.axis == null ? -1 : args.axis;\n    if (typeof this.axis === 'number') {\n      if (!Number.isInteger(this.axis)) {\n        throw new Error(\n            `Expected axis to be an integer, but received ${this.axis}`);\n      }\n    } else if (Array.isArray(this.axis)) {\n      for (const axis of this.axis) {\n        if (!Number.isInteger(axis)) {\n          throw new Error(\n              `Expected axis to be an array of integers, ` +\n              `but received ${JSON.stringify(this.axis)}`);\n        }\n      }\n    } else {\n      throw new Error(\n          `Expected axis to be an integer or an array of integers, ` +\n          `but received ${JSON.stringify(this.axis)}`);\n    }\n\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n\n    this.supportsMasking = true;\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const nDims = inputShape.length;\n\n    // Convert axis to array and resolve negatives.\n    if (typeof this.axis === 'number') {\n      this.axis = [this.axis];\n    }\n    for (let i = 0; i < this.axis.length; ++i) {\n      if (this.axis[i] < 0) {\n        this.axis[i] += nDims;\n      }\n    }\n\n    // Further validate axes.\n    for (const axis of this.axis) {\n      if (axis < 0 || axis >= nDims) {\n        throw new Error(`Invalid axis: ${axis}`);\n      }\n    }\n    if (this.axis.length !== generic_utils.unique(this.axis).length) {\n      throw new Error(`Found duplicate axes in: ${this.axis}`);\n    }\n\n    const paramShape = this.axis.map(axis => inputShape[axis]) as number[];\n\n    const trainable = true;\n    if (this.scale) {\n      this.gamma = this.addWeight(\n          'gamma', paramShape, 'float32', this.gammaInitializer,\n          this.gammaRegularizer, trainable);\n    } else {\n      this.gamma = null;\n    }\n    if (this.center) {\n      this.beta = this.addWeight(\n          'beta', paramShape, 'float32', this.betaInitializer,\n          this.betaRegularizer, trainable);\n    } else {\n      this.beta = null;\n    }\n\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const input = getExactlyOneTensor(inputs);\n    const inputShape = input.shape;\n    const nDims = inputShape.length;\n\n    return tidy(() => {\n      const keepDims = true;\n      let {mean, variance} = moments(input, this.axis, keepDims);\n      const broadcastShape = generic_utils.pyListRepeat(1, nDims);\n      for (const dim of this.axis as number[]) {\n        broadcastShape[dim] = inputShape[dim];\n      }\n\n      const broadcast = (v: Tensor) => {\n        if (v != null && v.shape.length !== nDims &&\n            this.axis !== [nDims - 1]) {\n          return v.reshape(broadcastShape);\n        } else {\n          return v;\n        }\n      };\n\n      let scale = broadcast(this.gamma.read());\n      let offset = broadcast(this.beta.read());\n\n      // TODO(https://github.com/tensorflow/tfjs/issues/2120): The tiling below\n      // is a workaround for the limitation of core's batchNormalization?d don't\n      // support broadcasting in their gradients. In addition, the tiling is\n      // necessary to ensure correctness on the browser CPU backend regardless\n      // of forward or backward computation. Remove this workaround once the\n      // limitation is addressed. See .\n      const momentsTiling: number[] = [];\n      const scaleOffsetTiling: number[] = [];\n      for (let i = 0; i < nDims; ++i) {\n        if ((this.axis as number[]).indexOf(i) !== -1) {\n          momentsTiling.push(inputShape[i]);\n          scaleOffsetTiling.push(1);\n        } else {\n          momentsTiling.push(1);\n          scaleOffsetTiling.push(inputShape[i]);\n        }\n      }\n      mean = mean.tile(momentsTiling);\n      variance = variance.tile(momentsTiling);\n      scale = scale.tile(scaleOffsetTiling);\n      offset = offset.tile(scaleOffsetTiling);\n\n      return batchNormalization(\n          input, mean, variance, offset, scale, this.epsilon);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      axis: this.axis,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(LayerNormalization);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}