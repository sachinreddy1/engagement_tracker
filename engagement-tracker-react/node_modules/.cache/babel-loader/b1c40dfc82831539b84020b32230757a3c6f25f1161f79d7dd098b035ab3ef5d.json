{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat } from '../concat';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { enclosingPowerOfTwo } from '../signal_ops_util';\nimport { slice } from '../slice';\nimport { rfft } from '../spectral/rfft';\nimport { frame } from './frame';\nimport { hannWindow } from './hann_window';\n/**\n * Computes the Short-time Fourier Transform of signals\n * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform\n *\n * ```js\n * const input = tf.tensor1d([1, 1, 1, 1, 1])\n * tf.signal.stft(input, 3, 1).print();\n * ```\n * @param signal 1-dimensional real value tensor.\n * @param frameLength The window length of samples.\n * @param frameStep The number of samples to step.\n * @param fftLength The size of the FFT to apply.\n * @param windowFn A callable that takes a window length and returns 1-d tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction stft_(signal, frameLength, frameStep, fftLength) {\n  let windowFn = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : hannWindow;\n  if (fftLength == null) {\n    fftLength = enclosingPowerOfTwo(frameLength);\n  }\n  const framedSignal = frame(signal, frameLength, frameStep);\n  const windowedSignal = mul(framedSignal, windowFn(frameLength));\n  const output = [];\n  for (let i = 0; i < framedSignal.shape[0]; i++) {\n    output.push(rfft(slice(windowedSignal, [i, 0], [1, frameLength]), fftLength));\n  }\n  return concat(output);\n}\nexport const stft = op({\n  stft_\n});","map":{"version":3,"names":["concat","mul","op","enclosingPowerOfTwo","slice","rfft","frame","hannWindow","stft_","signal","frameLength","frameStep","fftLength","windowFn","arguments","length","undefined","framedSignal","windowedSignal","output","i","shape","push","stft"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\signal\\stft.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D} from '../../tensor';\nimport {concat} from '../concat';\nimport {mul} from '../mul';\nimport {op} from '../operation';\nimport {enclosingPowerOfTwo} from '../signal_ops_util';\nimport {slice} from '../slice';\nimport {rfft} from '../spectral/rfft';\n\nimport {frame} from './frame';\nimport {hannWindow} from './hann_window';\n\n/**\n * Computes the Short-time Fourier Transform of signals\n * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform\n *\n * ```js\n * const input = tf.tensor1d([1, 1, 1, 1, 1])\n * tf.signal.stft(input, 3, 1).print();\n * ```\n * @param signal 1-dimensional real value tensor.\n * @param frameLength The window length of samples.\n * @param frameStep The number of samples to step.\n * @param fftLength The size of the FFT to apply.\n * @param windowFn A callable that takes a window length and returns 1-d tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction stft_(\n    signal: Tensor1D, frameLength: number, frameStep: number,\n    fftLength?: number,\n    windowFn: (length: number) => Tensor1D = hannWindow): Tensor {\n  if (fftLength == null) {\n    fftLength = enclosingPowerOfTwo(frameLength);\n  }\n  const framedSignal = frame(signal, frameLength, frameStep);\n  const windowedSignal = mul(framedSignal, windowFn(frameLength));\n  const output: Tensor[] = [];\n  for (let i = 0; i < framedSignal.shape[0]; i++) {\n    output.push(\n        rfft(slice(windowedSignal, [i, 0], [1, frameLength]), fftLength));\n  }\n  return concat(output);\n}\nexport const stft = op({stft_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,GAAG,QAAO,QAAQ;AAC1B,SAAQC,EAAE,QAAO,cAAc;AAC/B,SAAQC,mBAAmB,QAAO,oBAAoB;AACtD,SAAQC,KAAK,QAAO,UAAU;AAC9B,SAAQC,IAAI,QAAO,kBAAkB;AAErC,SAAQC,KAAK,QAAO,SAAS;AAC7B,SAAQC,UAAU,QAAO,eAAe;AAExC;;;;;;;;;;;;;;;;AAgBA,SAASC,KAAKA,CACVC,MAAgB,EAAEC,WAAmB,EAAEC,SAAiB,EACxDC,SAAkB,EACiC;EAAA,IAAnDC,QAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyCP,UAAU;EACrD,IAAIK,SAAS,IAAI,IAAI,EAAE;IACrBA,SAAS,GAAGT,mBAAmB,CAACO,WAAW,CAAC;;EAE9C,MAAMO,YAAY,GAAGX,KAAK,CAACG,MAAM,EAAEC,WAAW,EAAEC,SAAS,CAAC;EAC1D,MAAMO,cAAc,GAAGjB,GAAG,CAACgB,YAAY,EAAEJ,QAAQ,CAACH,WAAW,CAAC,CAAC;EAC/D,MAAMS,MAAM,GAAa,EAAE;EAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,YAAY,CAACI,KAAK,CAAC,CAAC,CAAC,EAAED,CAAC,EAAE,EAAE;IAC9CD,MAAM,CAACG,IAAI,CACPjB,IAAI,CAACD,KAAK,CAACc,cAAc,EAAE,CAACE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEV,WAAW,CAAC,CAAC,EAAEE,SAAS,CAAC,CAAC;;EAEvE,OAAOZ,MAAM,CAACmB,MAAM,CAAC;AACvB;AACA,OAAO,MAAMI,IAAI,GAAGrB,EAAE,CAAC;EAACM;AAAK,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}