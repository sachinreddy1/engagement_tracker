{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { isPromise } from '../util';\nexport const OP_SCOPE_SUFFIX = '__op';\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\nexport function op(f) {\n  const keys = Object.keys(f);\n  if (keys.length !== 1) {\n    throw new Error(\"Please provide an object with a single key \" + \"(operation name) mapping to a function. Got an object with \" + \"\".concat(keys.length, \" keys.\"));\n  }\n  let opName = keys[0];\n  const fn = f[opName];\n  // Strip the underscore from the end of the function name.\n  if (opName.endsWith('_')) {\n    opName = opName.substring(0, opName.length - 1);\n  }\n  // add an __op suffix to distinguish ops from kernels in tf.profile\n  opName = opName + OP_SCOPE_SUFFIX;\n  // tslint:disable-next-line:no-any\n  const f2 = function () {\n    ENGINE.startScope(opName);\n    try {\n      const result = fn(...arguments);\n      if (isPromise(result)) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n      ENGINE.endScope(result);\n      return result;\n    } catch (ex) {\n      ENGINE.endScope(null);\n      throw ex;\n    }\n  };\n  Object.defineProperty(f2, 'name', {\n    value: opName,\n    configurable: true\n  });\n  // tslint:disable-next-line:no-any\n  return f2;\n}","map":{"version":3,"names":["ENGINE","isPromise","OP_SCOPE_SUFFIX","op","f","keys","Object","length","Error","concat","opName","fn","endsWith","substring","f2","startScope","result","arguments","console","error","endScope","ex","defineProperty","value","configurable"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\operation.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {isPromise} from '../util';\n\nexport const OP_SCOPE_SUFFIX = '__op';\n\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\nexport function op<T extends Function>(f: {[name: string]: T}): T {\n  const keys = Object.keys(f);\n  if (keys.length !== 1) {\n    throw new Error(\n        `Please provide an object with a single key ` +\n        `(operation name) mapping to a function. Got an object with ` +\n        `${keys.length} keys.`);\n  }\n\n  let opName = keys[0];\n  const fn = f[opName];\n\n  // Strip the underscore from the end of the function name.\n  if (opName.endsWith('_')) {\n    opName = opName.substring(0, opName.length - 1);\n  }\n\n  // add an __op suffix to distinguish ops from kernels in tf.profile\n  opName = opName + OP_SCOPE_SUFFIX;\n\n  // tslint:disable-next-line:no-any\n  const f2 = (...args: any[]) => {\n    ENGINE.startScope(opName);\n    try {\n      const result = fn(...args);\n      if (isPromise(result)) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n      ENGINE.endScope(result);\n      return result;\n    } catch (ex) {\n      ENGINE.endScope(null);\n      throw ex;\n    }\n  };\n  Object.defineProperty(f2, 'name', {value: opName, configurable: true});\n\n  // tslint:disable-next-line:no-any\n  return f2 as any as T;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,SAAS,QAAO,SAAS;AAEjC,OAAO,MAAMC,eAAe,GAAG,MAAM;AAErC;;;;;AAKA,OAAM,SAAUC,EAAEA,CAAqBC,CAAsB;EAC3D,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACD,CAAC,CAAC;EAC3B,IAAIC,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;IACrB,MAAM,IAAIC,KAAK,CACX,6GAC6D,MAAAC,MAAA,CAC1DJ,IAAI,CAACE,MAAM,WAAQ,CAAC;;EAG7B,IAAIG,MAAM,GAAGL,IAAI,CAAC,CAAC,CAAC;EACpB,MAAMM,EAAE,GAAGP,CAAC,CAACM,MAAM,CAAC;EAEpB;EACA,IAAIA,MAAM,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;IACxBF,MAAM,GAAGA,MAAM,CAACG,SAAS,CAAC,CAAC,EAAEH,MAAM,CAACH,MAAM,GAAG,CAAC,CAAC;;EAGjD;EACAG,MAAM,GAAGA,MAAM,GAAGR,eAAe;EAEjC;EACA,MAAMY,EAAE,GAAG,SAAAA,CAAA,EAAmB;IAC5Bd,MAAM,CAACe,UAAU,CAACL,MAAM,CAAC;IACzB,IAAI;MACF,MAAMM,MAAM,GAAGL,EAAE,CAAC,GAAAM,SAAO,CAAC;MAC1B,IAAIhB,SAAS,CAACe,MAAM,CAAC,EAAE;QACrBE,OAAO,CAACC,KAAK,CAAC,yCAAyC,CAAC;;MAE1DnB,MAAM,CAACoB,QAAQ,CAACJ,MAAM,CAAC;MACvB,OAAOA,MAAM;KACd,CAAC,OAAOK,EAAE,EAAE;MACXrB,MAAM,CAACoB,QAAQ,CAAC,IAAI,CAAC;MACrB,MAAMC,EAAE;;EAEZ,CAAC;EACDf,MAAM,CAACgB,cAAc,CAACR,EAAE,EAAE,MAAM,EAAE;IAACS,KAAK,EAAEb,MAAM;IAAEc,YAAY,EAAE;EAAI,CAAC,CAAC;EAEtE;EACA,OAAOV,EAAc;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}