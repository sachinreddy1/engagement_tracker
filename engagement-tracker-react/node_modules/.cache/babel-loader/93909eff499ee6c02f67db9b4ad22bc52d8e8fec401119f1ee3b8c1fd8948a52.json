{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nconst {\n  getBroadcastDims\n} = backend_util;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, userCode, usesPackedTextures) {\n  const prefixSnippets = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n  });\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n  const inputSamplingSnippet = inputsInfo.map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures)).join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet;\n  let floatTextureSetOutputSnippet;\n  let shaderPrefix = getShaderPrefix(glsl);\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n  if (usesPackedTextures) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n  const source = [shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode].join('\\n');\n  return source;\n}\nfunction getSamplerFromInInfo(inInfo) {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo);\n    case 1:\n      return getSampler1D(inInfo);\n    case 2:\n      return getSampler2D(inInfo);\n    case 3:\n      return getSampler3D(inInfo);\n    case 4:\n      return getSampler4D(inInfo);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(`${shape.length}-D input sampling` + ` is not yet supported`);\n  }\n}\nfunction getPackedSamplerFromInInfo(inInfo) {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo);\n    case 2:\n      return getPackedSampler2D(inInfo);\n    case 3:\n      return getPackedSampler3D(inInfo);\n    default:\n      return getPackedSamplerND(inInfo);\n  }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false) {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo);\n  } else {\n    res += getSamplerFromInInfo(inInfo);\n  }\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape, outTexShape);\n    case 2:\n      return getOutputPacked2DCoords(outShape, outTexShape);\n    case 3:\n      return getOutputPacked3DCoords(outShape, outTexShape);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape);\n  }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape, outTexShape);\n    case 2:\n      return getOutput2DCoords(outShape, outTexShape);\n    case 3:\n      return getOutput3DCoords(outShape, outTexShape);\n    case 4:\n      return getOutput4DCoords(outShape, outTexShape);\n    case 5:\n      return getOutput5DCoords(outShape, outTexShape);\n    case 6:\n      return getOutput6DCoords(outShape, outTexShape);\n    default:\n      throw new Error(`${outShape.length}-D output sampling is not yet supported`);\n  }\n}\nfunction getFloatTextureSampleSnippet(glsl) {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\nfunction getFloatTextureSetRSnippet(glsl) {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\nfunction getFloatTextureSetRGBASnippet(glsl) {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\nfunction getShaderPrefix(glsl) {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n  return SHADER_PREFIX;\n}\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\nfunction getOutputPacked1DCoords(shape, texShape) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n  if (packedTexShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\nfunction getOutput1DCoords(shape, texShape) {\n  if (texShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\nfunction getOutputPacked3DCoords(shape, texShape) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\nfunction getOutput3DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\nfunction getOutputPackedNDCoords(shape, texShape) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\nfunction getOutput4DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\nfunction getOutput5DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\nfunction getOutput6DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\nfunction getOutputPacked2DCoords(shape, texShape) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      }\n    `;\n  }\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getOutput2DCoords(shape, texShape) {\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getFlatOffsetUniformName(texName) {\n  return `offset${texName}`;\n}\nfunction getPackedSamplerScalar(inputInfo) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\nfunction getSamplerScalar(inputInfo) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler1D(inputInfo) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler1D(inputInfo) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler2D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler2D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\nfunction getPackedSampler3D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler3D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\nfunction getPackedSamplerND(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler4D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler5D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler6D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getUniformSampler(inputInfo) {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n  }\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` + `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n  }\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\nexport function getCoordsDataType(rank) {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nfunction squeezeInputInfo(inInfo, squeezedShape) {\n  // Deep copy.\n  const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n  return keptDims.map(d => params[d]).join(', ');\n}","map":{"version":3,"names":["backend_util","util","getBroadcastDims","getGlslDifferences","shader_util","makeShader","inputsInfo","outputShape","userCode","usesPackedTextures","prefixSnippets","forEach","x","size","sizeFromShape","shapeInfo","logicalShape","isUniform","push","name","inputPrefixSnippet","join","inputSamplingSnippet","map","getInputSamplingSnippet","outTexShape","texShape","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","getShaderPrefix","isPacked","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","source","getSamplerFromInInfo","inInfo","shape","length","getSamplerScalar","getSampler1D","getSampler2D","getSampler3D","getSampler4D","getSampler5D","getSampler6D","Error","getPackedSamplerFromInInfo","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","outShapeInfo","res","inShape","outShape","getPackedSamplerAtOutputCoords","getSamplerAtOutputCoords","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","getOutput1DCoords","getOutput2DCoords","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","texture2D","output","SHADER_PREFIX","version","varyingFs","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","packedTexShape","Math","ceil","texelsInLogicalRow","texelsInBatch","coordsFromIndexSnippet","getLogicalCoordinatesFromFlatIndex","texelsInBatchN","batches","coords","b","arraysEqual","getFlatOffsetUniformName","texName","inputInfo","funcName","charAt","toUpperCase","slice","texNumR","texNumC","tNumR","tNumC","offset","getUniformSampler","valuesPerRow","newShape","keptDims","squeezeShape","squeezedShape","newInputInfo","squeezeInputInfo","params","getSqueezedParams","stride0","stride1","flatOffset","rank","index","stride2","stride3","stride4","inSize","texFuncSnippet","inRank","outRank","broadcastDims","type","getCoordsDataType","rankDiff","coordsSnippet","fields","d","unpackedCoordsSnippet","s","i","isInputScalar","outSize","isOutputScalar","rows","cols","indexOf","inTexShape","JSON","parse","stringify"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\shader_compiler.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo, userCode: string,\n    usesPackedTextures: boolean): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n  });\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet =\n      inputsInfo\n          .map(x => getInputSamplingSnippet(x, outputShape, usesPackedTextures))\n          .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet =\n        getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet =\n        getOutputSamplingSnippet(outputShape.logicalShape, outTexShape);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (usesPackedTextures) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo);\n    case 1:\n      return getSampler1D(inInfo);\n    case 2:\n      return getSampler2D(inInfo);\n    case 3:\n      return getSampler3D(inInfo);\n    case 4:\n      return getSampler4D(inInfo);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(inInfo: InputInfo): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo);\n    case 2:\n      return getPackedSampler2D(inInfo);\n    case 3:\n      return getPackedSampler3D(inInfo);\n    default:\n      return getPackedSamplerND(inInfo);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo,\n    usesPackedTextures = false): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo);\n  } else {\n    res += getSamplerFromInInfo(inInfo);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutputPacked2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number]): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape as [number], outTexShape);\n    case 2:\n      return getOutput2DCoords(outShape as [number, number], outTexShape);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number]): string {\n  if (texShape[0] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number]): string {\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number]): string {\n  if (util.arraysEqual(shape, texShape)) {\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  const glsl = getGlslDifferences();\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nfunction squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}