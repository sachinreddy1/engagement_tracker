{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Cumsum, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function cumsum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    exclusive,\n    reverse\n  } = attrs;\n  assertNotComplex(x, 'cumsum');\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\"backend.cumsum in CPU expects an inner-most \" + \"axis=\".concat($x.shape.length - 1, \" but got axis=\").concat(permutedAxis));\n  }\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(util.sizeFromShape($x.shape), resultDtype);\n  const aVals = backend.data.get($x.dataId).values;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ? (i, j) => i + finalDim - j - 1 : (i, j) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] : aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        perm: reversePermutation\n      }\n    });\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n    return reverseTransposedResult;\n  }\n  return result;\n}\nexport const cumsumConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum\n};","map":{"version":3,"names":["backend_util","Cumsum","upcastType","util","assertNotComplex","transpose","cumsum","args","inputs","backend","attrs","x","axis","exclusive","reverse","permutation","getAxesPermutation","shape","length","$x","perm","permutedAxis","getInnerMostAxes","Error","concat","resultDtype","dtype","vals","makeZerosTypedArray","sizeFromShape","aVals","data","get","dataId","values","finalDim","indexAdjuster","i","j","idx","prevIdx","result","makeTensorInfo","reversePermutation","getUndoAxesPermutation","reverseTransposedResult","disposeIntermediateTensorInfo","cumsumConfig","kernelName","backendName","kernelFunc"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-cpu\\src\\kernels\\Cumsum.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}