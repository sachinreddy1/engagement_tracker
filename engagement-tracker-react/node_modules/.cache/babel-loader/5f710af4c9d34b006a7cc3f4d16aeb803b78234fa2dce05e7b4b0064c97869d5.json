{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { scalar, tensor1d } from '@tensorflow/tfjs-core';\nimport { ValueError } from '../errors';\n/**\n * Determine if a number is an integer.\n */\nexport function isInteger(x) {\n  return x === parseInt(x.toString(), 10);\n}\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\nexport function arrayProd(array, begin, end) {\n  if (begin == null) {\n    begin = 0;\n  }\n  if (end == null) {\n    end = array.length;\n  }\n  let prod = 1;\n  for (let i = begin; i < end; ++i) {\n    prod *= array[i];\n  }\n  return prod;\n}\n/**\n * A helper function transforms the two input types to an instance of Tensor1D,\n * so the return value can be fed directly into various TF.js Core functions.\n * @param array\n */\nfunction toArray1D(array) {\n  array = Array.isArray(array) ? new Float32Array(array) : array;\n  return tensor1d(array);\n}\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\nexport function min(array) {\n  return tfc.min(toArray1D(array)).dataSync()[0];\n}\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\nexport function max(array) {\n  return tfc.max(toArray1D(array)).dataSync()[0];\n}\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\nexport function sum(array) {\n  return tfc.sum(toArray1D(array)).dataSync()[0];\n}\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\nexport function mean(array) {\n  return sum(array) / array.length;\n}\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\nexport function variance(array) {\n  const demeaned = tfc.sub(toArray1D(array), scalar(mean(array)));\n  const sumSquare = tfc.sum(tfc.mul(demeaned, demeaned)).dataSync()[0];\n  return sumSquare / array.length;\n}\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\nexport function median(array) {\n  const arraySorted = array.slice().sort((a, b) => a - b);\n  const lowIdx = Math.floor((arraySorted.length - 1) / 2);\n  const highIdx = Math.ceil((arraySorted.length - 1) / 2);\n  if (lowIdx === highIdx) {\n    return arraySorted[lowIdx];\n  }\n  return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\nexport function range(begin, end) {\n  if (end < begin) {\n    throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n  }\n  const out = [];\n  for (let i = begin; i < end; ++i) {\n    out.push(i);\n  }\n  return out;\n}","map":{"version":3,"names":["tfc","scalar","tensor1d","ValueError","isInteger","x","parseInt","toString","arrayProd","array","begin","end","length","prod","i","toArray1D","Array","isArray","Float32Array","min","dataSync","max","sum","mean","variance","demeaned","sub","sumSquare","mul","median","arraySorted","slice","sort","a","b","lowIdx","Math","floor","highIdx","ceil","range","out","push"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-layers\\src\\utils\\math_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar, Tensor1D, tensor1d} from '@tensorflow/tfjs-core';\nimport {ValueError} from '../errors';\n\nexport type ArrayTypes = Uint8Array|Int32Array|Float32Array;\n\n/**\n * Determine if a number is an integer.\n */\nexport function isInteger(x: number): boolean {\n  return x === parseInt(x.toString(), 10);\n}\n\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\nexport function arrayProd(\n    array: number[]|ArrayTypes, begin?: number, end?: number): number {\n  if (begin == null) {\n    begin = 0;\n  }\n  if (end == null) {\n    end = array.length;\n  }\n\n  let prod = 1;\n  for (let i = begin; i < end; ++i) {\n    prod *= array[i];\n  }\n  return prod;\n}\n\n/**\n * A helper function transforms the two input types to an instance of Tensor1D,\n * so the return value can be fed directly into various TF.js Core functions.\n * @param array\n */\nfunction toArray1D(array: number[]|Float32Array): Tensor1D {\n  array = Array.isArray(array) ? new Float32Array(array) : array;\n  return tensor1d(array);\n}\n\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\nexport function min(array: number[]|Float32Array): number {\n  return tfc.min(toArray1D(array)).dataSync()[0];\n}\n\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\nexport function max(array: number[]|Float32Array): number {\n  return tfc.max(toArray1D(array)).dataSync()[0];\n}\n\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\nexport function sum(array: number[]|Float32Array): number {\n  return tfc.sum(toArray1D(array)).dataSync()[0];\n}\n\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\nexport function mean(array: number[]|Float32Array): number {\n  return sum(array) / array.length;\n}\n\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\nexport function variance(array: number[]|Float32Array): number {\n  const demeaned = tfc.sub(toArray1D(array), scalar(mean(array)));\n  const sumSquare = tfc.sum(tfc.mul(demeaned, demeaned)).dataSync()[0];\n  return sumSquare / array.length;\n}\n\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\nexport function median(array: number[]|Float32Array): number {\n  const arraySorted = array.slice().sort((a, b) => a - b);\n  const lowIdx = Math.floor((arraySorted.length - 1) / 2);\n  const highIdx = Math.ceil((arraySorted.length - 1) / 2);\n  if (lowIdx === highIdx) {\n    return arraySorted[lowIdx];\n  }\n  return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\n\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\nexport function range(begin: number, end: number): number[] {\n  if (end < begin) {\n    throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n  }\n  const out: number[] = [];\n  for (let i = begin; i < end; ++i) {\n    out.push(i);\n  }\n  return out;\n}\n"],"mappings":"AAAA;;;;;;;;;AAUA;;;;;;;;;;AAWA,OAAO,KAAKA,GAAG,MAAM,uBAAuB;AAC5C,SAAQC,MAAM,EAAYC,QAAQ,QAAO,uBAAuB;AAChE,SAAQC,UAAU,QAAO,WAAW;AAIpC;;;AAGA,OAAM,SAAUC,SAASA,CAACC,CAAS;EACjC,OAAOA,CAAC,KAAKC,QAAQ,CAACD,CAAC,CAACE,QAAQ,EAAE,EAAE,EAAE,CAAC;AACzC;AAEA;;;;;;;AAOA,OAAM,SAAUC,SAASA,CACrBC,KAA0B,EAAEC,KAAc,EAAEC,GAAY;EAC1D,IAAID,KAAK,IAAI,IAAI,EAAE;IACjBA,KAAK,GAAG,CAAC;;EAEX,IAAIC,GAAG,IAAI,IAAI,EAAE;IACfA,GAAG,GAAGF,KAAK,CAACG,MAAM;;EAGpB,IAAIC,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAGJ,KAAK,EAAEI,CAAC,GAAGH,GAAG,EAAE,EAAEG,CAAC,EAAE;IAChCD,IAAI,IAAIJ,KAAK,CAACK,CAAC,CAAC;;EAElB,OAAOD,IAAI;AACb;AAEA;;;;;AAKA,SAASE,SAASA,CAACN,KAA4B;EAC7CA,KAAK,GAAGO,KAAK,CAACC,OAAO,CAACR,KAAK,CAAC,GAAG,IAAIS,YAAY,CAACT,KAAK,CAAC,GAAGA,KAAK;EAC9D,OAAOP,QAAQ,CAACO,KAAK,CAAC;AACxB;AAEA;;;;;AAKA,OAAM,SAAUU,GAAGA,CAACV,KAA4B;EAC9C,OAAOT,GAAG,CAACmB,GAAG,CAACJ,SAAS,CAACN,KAAK,CAAC,CAAC,CAACW,QAAQ,EAAE,CAAC,CAAC,CAAC;AAChD;AAEA;;;;;AAKA,OAAM,SAAUC,GAAGA,CAACZ,KAA4B;EAC9C,OAAOT,GAAG,CAACqB,GAAG,CAACN,SAAS,CAACN,KAAK,CAAC,CAAC,CAACW,QAAQ,EAAE,CAAC,CAAC,CAAC;AAChD;AAEA;;;;;AAKA,OAAM,SAAUE,GAAGA,CAACb,KAA4B;EAC9C,OAAOT,GAAG,CAACsB,GAAG,CAACP,SAAS,CAACN,KAAK,CAAC,CAAC,CAACW,QAAQ,EAAE,CAAC,CAAC,CAAC;AAChD;AAEA;;;;;AAKA,OAAM,SAAUG,IAAIA,CAACd,KAA4B;EAC/C,OAAOa,GAAG,CAACb,KAAK,CAAC,GAAGA,KAAK,CAACG,MAAM;AAClC;AAEA;;;;;AAKA,OAAM,SAAUY,QAAQA,CAACf,KAA4B;EACnD,MAAMgB,QAAQ,GAAGzB,GAAG,CAAC0B,GAAG,CAACX,SAAS,CAACN,KAAK,CAAC,EAAER,MAAM,CAACsB,IAAI,CAACd,KAAK,CAAC,CAAC,CAAC;EAC/D,MAAMkB,SAAS,GAAG3B,GAAG,CAACsB,GAAG,CAACtB,GAAG,CAAC4B,GAAG,CAACH,QAAQ,EAAEA,QAAQ,CAAC,CAAC,CAACL,QAAQ,EAAE,CAAC,CAAC,CAAC;EACpE,OAAOO,SAAS,GAAGlB,KAAK,CAACG,MAAM;AACjC;AAEA;;;;;AAKA,OAAM,SAAUiB,MAAMA,CAACpB,KAA4B;EACjD,MAAMqB,WAAW,GAAGrB,KAAK,CAACsB,KAAK,EAAE,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EACvD,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACP,WAAW,CAAClB,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC;EACvD,MAAM0B,OAAO,GAAGF,IAAI,CAACG,IAAI,CAAC,CAACT,WAAW,CAAClB,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC;EACvD,IAAIuB,MAAM,KAAKG,OAAO,EAAE;IACtB,OAAOR,WAAW,CAACK,MAAM,CAAC;;EAE5B,OAAO,CAACL,WAAW,CAACK,MAAM,CAAC,GAAGL,WAAW,CAACQ,OAAO,CAAC,IAAI,CAAC;AACzD;AAEA;;;;;;;AAOA,OAAM,SAAUE,KAAKA,CAAC9B,KAAa,EAAEC,GAAW;EAC9C,IAAIA,GAAG,GAAGD,KAAK,EAAE;IACf,MAAM,IAAIP,UAAU,CAAC,QAAQQ,GAAG,cAAcD,KAAK,iBAAiB,CAAC;;EAEvE,MAAM+B,GAAG,GAAa,EAAE;EACxB,KAAK,IAAI3B,CAAC,GAAGJ,KAAK,EAAEI,CAAC,GAAGH,GAAG,EAAE,EAAEG,CAAC,EAAE;IAChC2B,GAAG,CAACC,IAAI,CAAC5B,CAAC,CAAC;;EAEb,OAAO2B,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}