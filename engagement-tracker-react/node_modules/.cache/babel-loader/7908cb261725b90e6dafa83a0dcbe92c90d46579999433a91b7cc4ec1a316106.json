{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Transpose } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction transpose_(x, perm) {\n  const $x = convertToTensor(x, 'x', 'transpose');\n  if (perm == null) {\n    perm = $x.shape.map((s, i) => i).reverse();\n  }\n  util.assert($x.rank === perm.length, () => \"Error in transpose: rank of input \".concat($x.rank, \" \") + \"must match length of perm \".concat(perm, \".\"));\n  perm.forEach(axis => {\n    util.assert(axis >= 0 && axis < $x.rank, () => \"All entries in 'perm' must be between 0 and \".concat($x.rank - 1) + \" but got \".concat(perm));\n  });\n  if ($x.rank <= 1) {\n    return $x.clone();\n  }\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    perm\n  };\n  return ENGINE.runKernel(Transpose, inputs, attrs);\n}\nexport const transpose = op({\n  transpose_\n});","map":{"version":3,"names":["ENGINE","Transpose","convertToTensor","util","op","transpose_","x","perm","$x","shape","map","s","i","reverse","assert","rank","length","concat","forEach","axis","clone","inputs","attrs","runKernel","transpose"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\transpose.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Transpose, TransposeAttrs, TransposeInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction transpose_<T extends Tensor>(x: T|TensorLike, perm?: number[]): T {\n  const $x = convertToTensor(x, 'x', 'transpose');\n\n  if (perm == null) {\n    perm = $x.shape.map((s, i) => i).reverse();\n  }\n  util.assert(\n      $x.rank === perm.length,\n      () => `Error in transpose: rank of input ${$x.rank} ` +\n          `must match length of perm ${perm}.`);\n  perm.forEach(axis => {\n    util.assert(\n        axis >= 0 && axis < $x.rank,\n        () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` +\n            ` but got ${perm}`);\n  });\n\n  if ($x.rank <= 1) {\n    return $x.clone();\n  }\n\n  const inputs: TransposeInputs = {x: $x};\n  const attrs: TransposeAttrs = {perm};\n\n  return ENGINE.runKernel(\n      Transpose, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const transpose = op({transpose_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,SAAS,QAAwC,iBAAiB;AAI1E,SAAQC,eAAe,QAAO,oBAAoB;AAElD,OAAO,KAAKC,IAAI,MAAM,SAAS;AAE/B,SAAQC,EAAE,QAAO,aAAa;AAE9B;;;;;;;;;;;;;;;;;;;AAmBA,SAASC,UAAUA,CAAmBC,CAAe,EAAEC,IAAe;EACpE,MAAMC,EAAE,GAAGN,eAAe,CAACI,CAAC,EAAE,GAAG,EAAE,WAAW,CAAC;EAE/C,IAAIC,IAAI,IAAI,IAAI,EAAE;IAChBA,IAAI,GAAGC,EAAE,CAACC,KAAK,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAACC,OAAO,EAAE;;EAE5CV,IAAI,CAACW,MAAM,CACPN,EAAE,CAACO,IAAI,KAAKR,IAAI,CAACS,MAAM,EACvB,MAAM,qCAAAC,MAAA,CAAqCT,EAAE,CAACO,IAAI,sCAAAE,MAAA,CACjBV,IAAI,MAAG,CAAC;EAC7CA,IAAI,CAACW,OAAO,CAACC,IAAI,IAAG;IAClBhB,IAAI,CAACW,MAAM,CACPK,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAGX,EAAE,CAACO,IAAI,EAC3B,MAAM,+CAAAE,MAAA,CAA+CT,EAAE,CAACO,IAAI,GAAG,CAAC,gBAAAE,MAAA,CAChDV,IAAI,CAAE,CAAC;EAC7B,CAAC,CAAC;EAEF,IAAIC,EAAE,CAACO,IAAI,IAAI,CAAC,EAAE;IAChB,OAAOP,EAAE,CAACY,KAAK,EAAE;;EAGnB,MAAMC,MAAM,GAAoB;IAACf,CAAC,EAAEE;EAAE,CAAC;EACvC,MAAMc,KAAK,GAAmB;IAACf;EAAI,CAAC;EAEpC,OAAOP,MAAM,CAACuB,SAAS,CACnBtB,SAAS,EAAEoB,MAA8B,EAAEC,KAA2B,CAAC;AAC7E;AAEA,OAAO,MAAME,SAAS,GAAGpB,EAAE,CAAC;EAACC;AAAU,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}