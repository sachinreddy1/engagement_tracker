{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as util from './util';\nexport class Profiler {\n  constructor(backendTimer, logger) {\n    this.backendTimer = backendTimer;\n    this.logger = logger;\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n  profileKernel(kernelName, inputs, f) {\n    let outputs;\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n    const timer = this.backendTimer.time(holdResultWrapperFn);\n    if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i];\n        // Dangling promise here because we don't want to propagate up\n        // asynchronicity.\n        output.data().then(tensorVals => {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      }\n    }\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ? timing.getExtraProfileInfo() : '')\n    };\n    return kernelProfile;\n  }\n  logKernelProfile(kernelProfile) {\n    const {\n      kernelName,\n      outputs,\n      timeMs,\n      inputs,\n      extraInfo\n    } = kernelProfile;\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n      });\n    });\n  }\n}\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i];\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n  return false;\n}\nexport class Logger {\n  logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) : timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n    for (const name in inputs) {\n      const input = inputs[name];\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription += `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n      }\n    }\n    console.log(`%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${inputShapesDescription}\\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n  }\n}","map":{"version":3,"names":["env","util","Profiler","constructor","backendTimer","logger","Logger","profileKernel","kernelName","inputs","f","outputs","holdResultWrapperFn","timer","time","getBool","i","length","output","data","then","tensorVals","checkComputationForErrors","dtype","kernelProfile","timeMs","timing","kernelMs","extraInfo","getExtraProfileInfo","logKernelProfile","forEach","result","Promise","all","valueContainer","vals","num","isNaN","isFinite","console","warn","name","rightPad","paddedName","rank","size","shape","toString","inputShapesDescription","input","inputShape","inputRank","log"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-core\\src\\profiler.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimer} from './backends/backend';\nimport {env} from './environment';\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {DataType, DataTypeMap, TypedArray} from './types';\nimport * as util from './util';\n\nexport type KernelProfile = {\n  kernelName: string,\n  outputs: Tensor[],\n  inputs: NamedTensorMap,\n  timeMs: Promise<number|{error: string}>,\n  extraInfo: Promise<string>\n};\n\nexport class Profiler {\n  constructor(private backendTimer: BackendTimer, private logger?: Logger) {\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel(kernelName: string, inputs: NamedTensorMap, f: () => Tensor[]):\n      KernelProfile {\n    let outputs: Tensor[];\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n    const timer = this.backendTimer.time(holdResultWrapperFn);\n\n    if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i];\n        // Dangling promise here because we don't want to propagate up\n        // asynchronicity.\n        output.data().then(tensorVals => {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      }\n    }\n\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(\n          timing => timing.getExtraProfileInfo != null ?\n              timing.getExtraProfileInfo() :\n              '')\n    };\n    return kernelProfile;\n  }\n\n  logKernelProfile(kernelProfile: KernelProfile): void {\n    const {kernelName, outputs, timeMs, inputs, extraInfo} = kernelProfile;\n\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(\n            kernelName, result, valueContainer[0], valueContainer[1], inputs,\n            valueContainer[2]);\n      });\n    });\n  }\n}\n\nexport function checkComputationForErrors<D extends DataType>(\n    vals: DataTypeMap[D], dtype: D, kernelName: string): boolean {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class Logger {\n  logKernelProfile(\n      name: string, result: Tensor, vals: TypedArray,\n      timeMs: number|{error: string}, inputs: NamedTensorMap,\n      extraInfo?: string) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\n                                              timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const input = inputs[name];\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription +=\n            `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n      }\n    }\n\n    console.log(\n        `%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${\n            inputShapesDescription}\\t%c${extraInfo}`,\n        'font-weight:bold', 'color:red', 'color:blue', 'color: orange',\n        'color: green', 'color: steelblue');\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,GAAG,QAAO,eAAe;AAIjC,OAAO,KAAKC,IAAI,MAAM,QAAQ;AAU9B,OAAM,MAAOC,QAAQ;EACnBC,YAAoBC,YAA0B,EAAUC,MAAe;IAAnD,KAAAD,YAAY,GAAZA,YAAY;IAAwB,KAAAC,MAAM,GAANA,MAAM;IAC5D,IAAIA,MAAM,IAAI,IAAI,EAAE;MAClB,IAAI,CAACA,MAAM,GAAG,IAAIC,MAAM,EAAE;;EAE9B;EAEAC,aAAaA,CAACC,UAAkB,EAAEC,MAAsB,EAAEC,CAAiB;IAEzE,IAAIC,OAAiB;IACrB,MAAMC,mBAAmB,GAAGA,CAAA,KAAK;MAC/BD,OAAO,GAAGD,CAAC,EAAE;IACf,CAAC;IACD,MAAMG,KAAK,GAAG,IAAI,CAACT,YAAY,CAACU,IAAI,CAACF,mBAAmB,CAAC;IAEzD,IAAIZ,GAAG,EAAE,CAACe,OAAO,CAAC,8BAA8B,CAAC,EAAE;MACjD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,OAAO,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;QACvC,MAAME,MAAM,GAAGP,OAAO,CAACK,CAAC,CAAC;QACzB;QACA;QACAE,MAAM,CAACC,IAAI,EAAE,CAACC,IAAI,CAACC,UAAU,IAAG;UAC9BC,yBAAyB,CAACD,UAAU,EAAEH,MAAM,CAACK,KAAK,EAAEf,UAAU,CAAC;QACjE,CAAC,CAAC;;;IAIN,MAAMgB,aAAa,GAAG;MACpBhB,UAAU;MACVG,OAAO;MACPF,MAAM;MACNgB,MAAM,EAAEZ,KAAK,CAACO,IAAI,CAACM,MAAM,IAAIA,MAAM,CAACC,QAAQ,CAAC;MAC7CC,SAAS,EAAEf,KAAK,CAACO,IAAI,CACjBM,MAAM,IAAIA,MAAM,CAACG,mBAAmB,IAAI,IAAI,GACxCH,MAAM,CAACG,mBAAmB,EAAE,GAC5B,EAAE;KACX;IACD,OAAOL,aAAa;EACtB;EAEAM,gBAAgBA,CAACN,aAA4B;IAC3C,MAAM;MAAChB,UAAU;MAAEG,OAAO;MAAEc,MAAM;MAAEhB,MAAM;MAAEmB;IAAS,CAAC,GAAGJ,aAAa;IAEtEb,OAAO,CAACoB,OAAO,CAACC,MAAM,IAAG;MACvBC,OAAO,CAACC,GAAG,CAAC,CAACF,MAAM,CAACb,IAAI,EAAE,EAAEM,MAAM,EAAEG,SAAS,CAAC,CAAC,CAACR,IAAI,CAACe,cAAc,IAAG;QACpE,IAAI,CAAC9B,MAAM,CAACyB,gBAAgB,CACxBtB,UAAU,EAAEwB,MAAM,EAAEG,cAAc,CAAC,CAAC,CAAC,EAAEA,cAAc,CAAC,CAAC,CAAC,EAAE1B,MAAM,EAChE0B,cAAc,CAAC,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AAGF,OAAM,SAAUb,yBAAyBA,CACrCc,IAAoB,EAAEb,KAAQ,EAAEf,UAAkB;EACpD,IAAIe,KAAK,KAAK,SAAS,EAAE;IACvB;IACA,OAAO,KAAK;;EAEd,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoB,IAAI,CAACnB,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,MAAMqB,GAAG,GAAGD,IAAI,CAACpB,CAAC,CAAW;IAC7B,IAAIsB,KAAK,CAACD,GAAG,CAAC,IAAI,CAACE,QAAQ,CAACF,GAAG,CAAC,EAAE;MAChC;MACAG,OAAO,CAACC,IAAI,CAAC,SAASJ,GAAG,sBAAsB7B,UAAU,GAAG,CAAC;MAC7D,OAAO,IAAI;;;EAGf,OAAO,KAAK;AACd;AAEA,OAAM,MAAOF,MAAM;EACjBwB,gBAAgBA,CACZY,IAAY,EAAEV,MAAc,EAAEI,IAAgB,EAC9CX,MAA8B,EAAEhB,MAAsB,EACtDmB,SAAkB;IACpB,MAAMd,IAAI,GAAG,OAAOW,MAAM,KAAK,QAAQ,GAAGxB,IAAI,CAAC0C,QAAQ,CAAC,GAAGlB,MAAM,IAAI,EAAE,CAAC,CAAC,GAC/BA,MAAM,CAAC,OAAO,CAAC;IACzD,MAAMmB,UAAU,GAAG3C,IAAI,CAAC0C,QAAQ,CAACD,IAAI,EAAE,EAAE,CAAC;IAC1C,MAAMG,IAAI,GAAGb,MAAM,CAACa,IAAI;IACxB,MAAMC,IAAI,GAAGd,MAAM,CAACc,IAAI;IACxB,MAAMC,KAAK,GAAG9C,IAAI,CAAC0C,QAAQ,CAACX,MAAM,CAACe,KAAK,CAACC,QAAQ,EAAE,EAAE,EAAE,CAAC;IACxD,IAAIC,sBAAsB,GAAG,EAAE;IAE/B,KAAK,MAAMP,IAAI,IAAIjC,MAAM,EAAE;MACzB,MAAMyC,KAAK,GAAGzC,MAAM,CAACiC,IAAI,CAAC;MAC1B,IAAIQ,KAAK,IAAI,IAAI,EAAE;QACjB;QACA;QACA,MAAMC,UAAU,GAAGD,KAAK,CAACH,KAAK,IAAIf,MAAM,CAACe,KAAK;QAC9C,MAAMK,SAAS,GAAGD,UAAU,CAAClC,MAAM;QACnCgC,sBAAsB,IAClB,GAAGP,IAAI,KAAKU,SAAS,KAAKA,SAAS,GAAG,CAAC,GAAGD,UAAU,GAAG,EAAE,GAAG;;;IAIpEX,OAAO,CAACa,GAAG,CACP,KAAKT,UAAU,OAAO9B,IAAI,OAAO+B,IAAI,KAAKE,KAAK,OAAOD,IAAI,OACtDG,sBAAsB,OAAOrB,SAAS,EAAE,EAC5C,kBAAkB,EAAE,WAAW,EAAE,YAAY,EAAE,eAAe,EAC9D,cAAc,EAAE,kBAAkB,CAAC;EACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}