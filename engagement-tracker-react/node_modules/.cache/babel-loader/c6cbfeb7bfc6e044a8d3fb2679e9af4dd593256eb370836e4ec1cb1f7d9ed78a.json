{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext, setWebGLContext } from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport class GPGPUContext {\n  constructor(gl) {\n    this.outputTexture = null;\n    this.program = null;\n    this.disposed = false;\n    this.vertexAttrsAreBound = false;\n    this.itemsToPoll = [];\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n      this.textureFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support half float textures, yet the ' + 'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support color renderable half floats, yet ' + 'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n    this.textureConfig = tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n  get debug() {\n    return env().getBool('DEBUG');\n  }\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' + ' This is probably a resource leak, delete the program with ' + 'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn('Disposing a GPGPUContext that still has a bound output matrix ' + 'texture.  This is probably a resource leak, delete the output ' + 'matrix texture with GPGPUContext.deleteMatrixTexture before ' + 'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n  createFloat32MatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  createFloat16MatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  createUnsignedBytesMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  uploadPixelDataToTexture(texture, pixels) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n  uploadDenseMatrixToTexture(texture, width, height, data) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n  }\n  createFloat16PackedMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  createPackedMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  deleteMatrixTexture(texture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n  downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n    return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));\n  }\n  downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n  }\n  downloadFloat32MatrixFromBuffer(buffer, size) {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n  createBufferFromTexture(texture, rows, columns) {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n  createAndWaitForFence() {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n  createFence(gl) {\n    let query;\n    let isFencePassed;\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl;\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n      query = sync;\n    } else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n    return {\n      query,\n      isFencePassed\n    };\n  }\n  downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n    return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));\n  }\n  createProgram(fragmentShaderSource) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    const fragmentShader = webgl_util.createFragmentShader(gl, fragmentShaderSource);\n    const vertexShader = gpgpu_util.createVertexShader(gl);\n    const program = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(gl, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n  deleteProgram(program) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n  setProgram(program) {\n    this.throwIfDisposed();\n    this.program = program;\n    if (this.program != null && this.debug) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n  getUniformLocation(program, uniformName) {\n    let shouldThrow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n    }\n  }\n  getAttributeLocation(program, attribute) {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n  getUniformLocationNoThrow(program, uniformName) {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n  setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n  setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n  setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n    this.throwIfDisposed();\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n  setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n    this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n  }\n  setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n  debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n  executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n  blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n  getQueryTimerExtension() {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension = webgl_util.getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ? 'EXT_disjoint_timer_query_webgl2' : 'EXT_disjoint_timer_query');\n    }\n    return this.disjointQueryTimerExtension;\n  }\n  getQueryTimerExtensionWebGL2() {\n    return this.getQueryTimerExtension();\n  }\n  getQueryTimerExtensionWebGL1() {\n    return this.getQueryTimerExtension();\n  }\n  beginQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT();\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n  async waitForQueryAndGetTime(query) {\n    await util.repeatedTry(() => this.disposed ||\n    // while testing contexts are created / disposed\n    // in rapid succession, so without this check we\n    // may poll for the query timer indefinitely\n    this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n  getQueryTime(query, queryTimerVersion) {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl;\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n      const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n  isQueryAvailable(query, queryTimerVersion) {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n      const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n      return available && !this.disjoint;\n    }\n  }\n  pollFence(fenceContext) {\n    return new Promise(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n  pollItems() {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {\n        resolveFn\n      } = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n  addItemToPoll(isDoneFn, resolveFn) {\n    this.itemsToPoll.push({\n      isDoneFn,\n      resolveFn\n    });\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n  bindTextureToFrameBuffer(texture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n  unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n  downloadMatrixDriver(texture, downloadAndDecode) {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n  setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n  setOutputMatrixWriteRegionDriver(x, y, width, height) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n  throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n  throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr) {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}","map":{"version":3,"names":["env","util","getWebGLContext","setWebGLContext","gpgpu_util","tex_util","webgl_util","GPGPUContext","constructor","gl","outputTexture","program","disposed","vertexAttrsAreBound","itemsToPoll","glVersion","getNumber","COLOR_BUFFER_FLOAT","COLOR_BUFFER_HALF_FLOAT","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","textureFloatExtension","getExtensionOrThrow","hasExtension","textureHalfFloatExtension","get","Error","colorBufferFloatExtension","getExtension","colorBufferHalfFloatExtension","vertexBuffer","createVertexBuffer","indexBuffer","createIndexBuffer","framebuffer","createFramebuffer","textureConfig","getTextureConfig","debug","getBool","dispose","console","warn","callAndCheck","finish","bindFramebuffer","FRAMEBUFFER","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","deleteBuffer","createFloat32MatrixTexture","rows","columns","throwIfDisposed","createFloat16MatrixTexture","createUnsignedBytesMatrixTexture","uploadPixelDataToTexture","texture","pixels","uploadDenseMatrixToTexture","width","height","data","createFloat16PackedMatrixTexture","createPackedMatrixTexture","deleteMatrixTexture","unbindColorTextureFromFramebuffer","deleteTexture","downloadByteEncodedFloatMatrixFromOutputTexture","downloadMatrixDriver","downloadPackedMatrixFromBuffer","buffer","batch","physicalRows","physicalCols","downloadFloat32MatrixFromBuffer","size","createBufferFromTexture","bindTextureToFrameBuffer","result","createBufferFromOutputTexture","unbindTextureToFrameBuffer","createAndWaitForFence","fenceContext","createFence","pollFence","query","isFencePassed","gl2","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","downloadMatrixFromPackedTexture","downloadMatrixFromPackedOutputTexture","createProgram","fragmentShaderSource","fragmentShader","createFragmentShader","vertexShader","createVertexShader","attachShader","linkProgram","validateProgram","setProgram","bindVertexProgramAttributeStreams","deleteProgram","useProgram","getUniformLocation","uniformName","shouldThrow","arguments","length","undefined","getProgramUniformLocationOrThrow","getProgramUniformLocation","getAttributeLocation","attribute","getAttribLocation","getUniformLocationNoThrow","setInputMatrixTexture","inputMatrixTexture","uniformLocation","textureUnit","throwIfNoProgram","bindTextureToProgramUniformSampler","setOutputMatrixTexture","outputMatrixTexture","setOutputMatrixTextureDriver","setOutputPackedMatrixTexture","outputPackedMatrixTexture","getPackedMatrixTextureShapeWidthHeight","setOutputMatrixWriteRegion","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","setOutputPackedMatrixWriteRegion","debugValidate","validateFramebuffer","executeProgram","drawElements","TRIANGLES","UNSIGNED_SHORT","blockUntilAllProgramsCompleted","getQueryTimerExtension","disjointQueryTimerExtension","getQueryTimerExtensionWebGL2","getQueryTimerExtensionWebGL1","ext","createQuery","TIME_ELAPSED_EXT","createQueryEXT","beginQueryEXT","endQueryEXT","waitForQueryAndGetTime","repeatedTry","getQueryTime","queryTimerVersion","timeElapsedNanos","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","getParameter","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","Promise","resolve","addItemToPoll","pollItems","index","linearSearchLastTrue","map","x","isDoneFn","i","resolveFn","slice","push","bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","viewport","scissor","y","arr","isDone"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\gpgpu_context.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: WebGLProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  textureConfig: TextureConfig;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  private vertexAttrsAreBound = false;\n\n  public createProgram(fragmentShaderSource: string): WebGLProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    const fragmentShader: WebGLShader =\n        webgl_util.createFragmentShader(gl, fragmentShaderSource);\n    const vertexShader: WebGLShader = gpgpu_util.createVertexShader(gl);\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(\n          gl, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n\n  public deleteProgram(program: WebGLProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  public setProgram(program: WebGLProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n    if ((this.program != null) && this.debug) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}