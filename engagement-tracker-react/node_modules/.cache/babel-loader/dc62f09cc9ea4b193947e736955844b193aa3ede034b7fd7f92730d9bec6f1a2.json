{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n  if (env().global.screen == null) {\n    return 1024; // 1 GB.\n  }\n  return env().global.screen.height * env().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\nexport class MathBackendWebGL extends KernelBackend {\n  constructor(gpgpu) {\n    super();\n    // Maps data ids that have a pending read operation, to list of subscribers.\n    this.pendingRead = new WeakMap();\n    // List of data ids that are scheduled for disposal, but are waiting on a\n    // pending read operation.\n    this.pendingDisposal = new WeakSet();\n    // Used to count the number of 'shallow' sliced tensors that point to the\n    // same data id.\n    this.dataRefCount = new WeakMap();\n    this.numBytesInGPU = 0;\n    // Accumulated time spent (including blocking) in uploading data to webgl.\n    this.uploadWaitMs = 0;\n    // Accumulated time spent (including blocking in downloading data from webgl.\n    this.downloadWaitMs = 0;\n    this.warnedAboutMemory = false;\n    this.warnedAboutCPUBackend = false;\n    this.pendingDeletes = 0;\n    this.disposed = false;\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n    if (gpgpu == null) {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpu = gpgpu;\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n  numDataIds() {\n    return this.texData.numDataIds() + (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) - this.pendingDeletes;\n  }\n  write(values, shape, dtype) {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\"Cannot write to a complex64 dtype. \" + \"Please use tf.complex(real, imag).\");\n    }\n    const dataId = {};\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount: 1,\n      complexParentRefCount: 0\n    });\n    return dataId;\n  }\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId) {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId) {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n  /**\n   * Decrease refCount of a `TextureData` if it is a component of complex\n   * tensor.\n   */\n  decComplexRef(dataId) {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      if (texData.complexParentRefCount > 0) {\n        texData.refCount--;\n      }\n    }\n  }\n  move(dataId, values, shape, dtype) {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\"Cannot write to a complex64 dtype. \" + \"Please use tf.complex(real, imag).\");\n    }\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount: 1,\n      complexParentRefCount: 0\n    });\n  }\n  disposeIntermediateTensorInfo(tensorInfo) {\n    const dataId = tensorInfo.dataId;\n    if (this.texData.has(dataId)) {\n      const textureData = this.texData.get(dataId);\n      textureData.refCount--;\n      if (textureData.refCount < 1) {\n        this.disposeData(dataId);\n      }\n    }\n  }\n  readSync(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      dtype,\n      complexTensorInfos,\n      slice,\n      shape,\n      isPacked\n    } = texData;\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n    let result;\n    if (dtype === 'complex64') {\n      const realValues = this.readSync(complexTensorInfos.real.dataId);\n      const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n  async read(dataId) {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      shape,\n      slice,\n      dtype,\n      complexTensorInfos,\n      isPacked\n    } = texData;\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && env().getNumber('WEBGL_VERSION') === 2) {\n      throw new Error(\"tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and \" + \"WEBGL_VERSION=2 not yet supported.\");\n    }\n    let buffer = null;\n    let tmpDownloadTarget;\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n      buffer = this.gpgpu.createBufferFromTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape));\n    }\n    this.pendingRead.set(dataId, []);\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n    // Download the values from the GPU.\n    let vals;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([this.read(complexTensorInfos.real.dataId), this.read(complexTensorInfos.imag.dataId)]);\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      this.disposeData(dataId);\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n  bufferSync(t) {\n    const data = this.readSync(t.dataId);\n    let decodedData = data;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = data.map(d => util.decodeString(d));\n      } catch (_a) {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape, t.dtype, decodedData);\n  }\n  checkNumericalProblems(values) {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i];\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\"The value \".concat(num, \" cannot be represented with your \") + \"current settings. Consider enabling float32 rendering: \" + \"'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'\");\n        }\n        throw Error(\"The value \".concat(num, \" cannot be represented on this device.\"));\n      }\n    }\n  }\n  getValuesFromTexture(dataId) {\n    const {\n      shape,\n      dtype,\n      isPacked\n    } = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu.downloadMatrixFromPackedTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape)).subarray(0, size);\n      this.disposeIntermediateTensorInfo(tmpTarget);\n      return vals;\n    }\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ? new EncodeFloatPackedProgram(outputShape) : new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(program, [{\n      shape: outputShape,\n      dtype,\n      dataId\n    }], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n    return vals;\n  }\n  async time(f) {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers = [];\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n    f();\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map(d => d.query)).filter(d => d != null);\n    const flattenedActiveTimerNames = util.flatten(this.activeTimers.map(d => d.name)).filter(d => d != null);\n    this.activeTimers = oldActiveTimers;\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n    const res = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null // will be filled by the engine\n    };\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n      res['kernelMs'] = util.sum(kernelMs);\n      res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({\n        name: flattenedActiveTimerNames[i],\n        ms: d\n      })).map(d => \"\".concat(d.name, \": \").concat(d.ms)).join(', ');\n    } else {\n      res['kernelMs'] = {\n        error: 'WebGL query timers are not supported in this environment.'\n      };\n    }\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n  memory() {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    };\n  }\n  startTimer() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {\n      startMs: util.now(),\n      endMs: null\n    };\n  }\n  endTimer(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    query.endMs = util.now();\n    return query;\n  }\n  async getQueryTime(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query);\n    }\n    const timerQuery = query;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n  disposeData(dataId) {\n    if (this.pendingDisposal.has(dataId)) {\n      return;\n    }\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return;\n    }\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return;\n    }\n    // Trying to dispose a textureData that has a 'kept' refCount, e.g. trying\n    // to dispose a tensor whose data bucket is shared with a complex tensor. In\n    // this case we are removing a reference to the textureData, but we\n    // shouldn't actually dispose the texture.\n    if (this.texData.get(dataId).complexParentRefCount > 0) {\n      this.texData.get(dataId).refCount--;\n      return;\n    }\n    this.releaseGPUData(dataId);\n    const {\n      complexTensorInfos\n    } = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.texData.get(complexTensorInfos.real.dataId).complexParentRefCount--;\n      this.disposeIntermediateTensorInfo(complexTensorInfos.real);\n      this.texData.get(complexTensorInfos.imag.dataId).complexParentRefCount--;\n      this.disposeIntermediateTensorInfo(complexTensorInfos.imag);\n    }\n    this.texData.delete(dataId);\n  }\n  releaseGPUData(dataId) {\n    const {\n      texture,\n      dtype,\n      texShape,\n      usage,\n      isPacked,\n      slice\n    } = this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n  getTexture(dataId) {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId) {\n    return this.texData.get(dataId);\n  }\n  getCPUBackend() {\n    if (!env().getBool('WEBGL_CPU_FORWARD')) {\n      return null;\n    }\n    if (this.cpuBackend == null) {\n      this.cpuBackend = engine().findBackend('cpu');\n    }\n    return this.cpuBackend;\n  }\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(inputs) {\n    let sizeThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CPU_HANDOFF_SIZE_THRESHOLD;\n    const cpuBackend = this.getCPUBackend();\n    if (!env().getBool('IS_TEST') && !this.warnedAboutCPUBackend && cpuBackend == null) {\n      console.warn('Your application contains ops that are small enough to be ' + 'executed on the CPU backend, however the CPU backend cannot ' + 'be found. Consider importing the CPU backend ' + '(@tensorflow/tfjs-backend-cpu) for better performance.');\n      this.warnedAboutCPUBackend = true;\n    }\n    return cpuBackend != null && inputs.every(input => this.texData.get(input.dataId).texture == null && util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n  getGPGPUContext() {\n    return this.gpgpu;\n  }\n  where(condition) {\n    backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n  packedUnaryOp(x, op, dtype) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    return this.compileAndRun(program, [x], dtype);\n  }\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs(x) {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    return this.compileAndRun(program, [x]);\n  }\n  makeTensorInfo(shape, dtype, values) {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 && util.isString(values[0])) {\n      const encodedValues = values.map(d => util.encodeString(d));\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values, shape, dtype);\n    }\n    this.texData.get(dataId).usage = null;\n    return {\n      dataId,\n      shape,\n      dtype\n    };\n  }\n  makeOutput(shape, dtype, values) {\n    const {\n      dataId\n    } = this.makeTensorInfo(shape, dtype, values);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n  }\n  unpackTensor(input) {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n  packTensor(input) {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(program, [input], input.dtype, null /* customSetup */, preventEagerUnpackingOutput);\n  }\n  packedReshape(input, afterShape) {\n    const input3DShape = [webgl_util.getBatchDim(input.shape), ...webgl_util.getRowsCols(input.shape)];\n    const input3D = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = this.runWebGLProgram(program, [input3D], input.dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n    return {\n      dataId: output.dataId,\n      shape: afterShape,\n      dtype: output.dtype\n    };\n  }\n  decode(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      isPacked,\n      shape,\n      dtype\n    } = texData;\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const out = this.runWebGLProgram(program, [{\n      shape: shapeAs3D,\n      dtype,\n      dataId\n    }], dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n    return {\n      dtype,\n      shape,\n      dataId: out.dataId\n    };\n  }\n  runWebGLProgram(program, inputs, outputDtype, customSetup) {\n    let preventEagerUnpackingOfOutput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2);\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values = util.getTypedArrayFromDType(output.dtype, 0);\n      return output;\n    }\n    const dataToDispose = [];\n    const inputsData = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\"GPGPUProgram does not support complex64 input. For complex64 \" + \"dtypes, please separate the program into real and imaginary \" + \"parts.\");\n      }\n      let texData = this.texData.get(input.dataId);\n      if (texData.texture == null) {\n        if (!program.packedInputs && util.sizeFromShape(input.shape) <= env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values\n          };\n        }\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      } else if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) : this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (texData.isPacked && !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n        const savedInput = input;\n        const targetShape = input.shape;\n        input.shape = texData.shape;\n        input = this.packedReshape(input, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n        savedInput.shape = targetShape;\n      }\n      this.uploadToGPU(input.dataId);\n      return {\n        shape: input.shape,\n        texData,\n        isUniform: false\n      };\n    });\n    this.uploadToGPU(output.dataId);\n    const outputData = {\n      shape: output.shape,\n      texData: outData,\n      isUniform: false\n    };\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n    gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push({\n        name: program.constructor.name,\n        query: this.getQueryTime(query)\n      });\n    }\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n  compileAndRun(program, inputs, outputDtype, customSetup) {\n    let preventEagerUnpackingOfOutput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);\n    return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n  }\n  getAndSaveBinary(key, getBinary) {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n  getTextureManager() {\n    return this.textureManager;\n  }\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n  floatPrecision() {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n  /** Returns the smallest representable number.  */\n  epsilon() {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n  uploadToGPU(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      shape,\n      dtype,\n      values,\n      texture,\n      usage,\n      isPacked\n    } = texData;\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n      let program;\n      let width = texShape[1],\n        height = texShape[0];\n      const isByteArray = values instanceof Uint8Array;\n      if (isPacked) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n        program = new EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n      }\n      const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n      if (isByteArray) {\n        this.texData.get(tempDenseInputHandle.dataId).usage = TextureUsage.PIXELS;\n      } else {\n        this.texData.get(tempDenseInputHandle.dataId).usage = TextureUsage.UPLOAD;\n      }\n      this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      this.texData.delete(encodedOutputTarget.dataId);\n      // Once uploaded, don't store the values on cpu.\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n  convertAndCacheOnCPU(dataId, float32Values) {\n    const texData = this.texData.get(dataId);\n    const {\n      dtype\n    } = texData;\n    this.releaseGPUData(dataId);\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype);\n    }\n    return texData.values;\n  }\n  acquireTexture(texShape, texType, dtype, isPacked) {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\"High memory usage in GPU: \".concat(mb, \" MB, \") + \"most likely due to a memory leak\");\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n  computeBytes(shape, dtype) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n}\nfunction float32ToTypedArray(a, dtype) {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a;\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result;\n  } else {\n    throw new Error(\"Unknown dtype \".concat(dtype));\n  }\n}","map":{"version":3,"names":["backend_util","buffer","DataStorage","engine","env","kernel_impls","KernelBackend","scalar","tidy","util","getWebGLContext","DecodeMatrixProgram","DecodeMatrixPackedProgram","EncodeFloatProgram","EncodeFloatPackedProgram","EncodeMatrixProgram","EncodeMatrixPackedProgram","GPGPUContext","gpgpu_math","simpleAbsImplCPU","PackProgram","ReshapePackedProgram","tex_util","TextureUsage","TextureManager","unary_op","UnaryOpProgram","UnaryOpPackedProgram","UnpackProgram","webgl_util","whereImpl","EPSILON_FLOAT32","EPSILON_FLOAT16","binaryCaches","getBinaryCache","webGLVersion","CPU_HANDOFF_SIZE_THRESHOLD","BEFORE_PAGING_CONSTANT","numMBBeforeWarning","global","screen","height","width","window","devicePixelRatio","MathBackendWebGL","constructor","gpgpu","pendingRead","WeakMap","pendingDisposal","WeakSet","dataRefCount","numBytesInGPU","uploadWaitMs","downloadWaitMs","warnedAboutMemory","warnedAboutCPUBackend","pendingDeletes","disposed","getBool","Error","gl","getNumber","binaryCache","canvas","gpgpuCreatedLocally","textureManager","texData","numDataIds","cpuBackend","write","values","shape","dtype","checkNumericalProblems","dataId","set","usage","UPLOAD","refCount","complexParentRefCount","incRef","get","decRef","has","decComplexRef","move","disposeIntermediateTensorInfo","tensorInfo","textureData","disposeData","readSync","complexTensorInfos","slice","isPacked","program","CLONE","res","runWebGLProgram","data","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","start","now","result","realValues","real","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","read","subscribers","Promise","resolve","push","tmpDownloadTarget","decode","tmpData","createBufferFromTexture","texture","getDenseTexShape","createAndWaitForFence","vals","ps","all","size","sizeFromShape","downloadFloat32MatrixFromBuffer","dTypeVals","delete","forEach","bufferSync","t","decodedData","map","d","decodeString","_a","i","length","num","canBeRepresented","concat","tmpTarget","downloadMatrixFromPackedTexture","subarray","shouldUsePackedProgram","outputShape","getShapeAs3D","output","downloadByteEncodedFloatMatrixFromOutputTexture","texShape","time","f","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","query","filter","flattenedActiveTimerNames","name","kernelMs","wallMs","sum","ms","join","error","memory","unreliable","numBytesInGPUAllocated","numBytesAllocated","numBytesInGPUFree","numBytesFree","startTimer","beginQuery","startMs","endMs","endTimer","endQuery","getQueryTime","waitForQueryAndGetTime","timerQuery","add","releaseGPUData","key","origDataId","computeBytes","releaseTexture","getTexture","uploadToGPU","getDataInfo","getCPUBackend","findBackend","shouldExecuteOnCPU","inputs","sizeThreshold","arguments","undefined","console","warn","every","input","getGPGPUContext","where","condition","condVals","dataSync","packedUnaryOp","x","op","compileAndRun","abs","outValues","makeOutput","ABS","makeTensorInfo","isString","encodedValues","encodeString","makeTensorFromDataId","unpackTensor","packTensor","preventEagerUnpackingOutput","packedReshape","afterShape","input3DShape","getBatchDim","getRowsCols","input3D","afterShapeAs3D","preventEagerUnpackingOfOutput","shapeAs3D","out","outputDtype","customSetup","outData","packedOutput","outPackingScheme","PackingScheme","DENSE","texelShape","outTexUsage","getTypedArrayFromDType","dataToDispose","inputsData","packedInputs","isUniform","uniformValues","isReshapeFree","savedInput","targetShape","outputData","makeShaderKey","binary","getAndSaveBinary","compileProgram","runProgram","info","unpacked","outInfo","getBinary","getTextureManager","dispose","allKeys","Object","keys","deleteProgram","webGLProgram","HTMLCanvasElement","remove","floatPrecision","floatPrecisionValue","debugFlag","underflowCheckValue","epsilon","getTextureShapeFromLogicalShape","isByteArray","Uint8Array","getPackedMatrixTextureShapeWidthHeight","tempDenseInputHandle","PIXELS","uploadDenseMatrixToTexture","preventEagerUnpacking","encodedOutputTarget","outputTexData","newTexture","acquireTexture","float32Values","float32ToTypedArray","texType","mb","toFixed","bytesPerElement","a","Int32Array","Math","round"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\backend_webgl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, MemoryInfo, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n  private cpuBackend: KernelBackend;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n  private warnedAboutCPUBackend = false;\n\n  constructor(gpgpu?: GPGPUContext) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpu = gpgpu;\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n\n    this.texData = new DataStorage(this, engine());\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() +\n        (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -\n        this.pendingDeletes;\n  }\n\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {};\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount: 1,\n      complexParentRefCount: 0\n    });\n    return dataId;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  /**\n   * Decrease refCount of a `TextureData` if it is a component of complex\n   * tensor.\n   */\n  decComplexRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      if (texData.complexParentRefCount > 0) {\n        texData.refCount--;\n      }\n    }\n  }\n\n  move(dataId: DataId, values: BackendValues, shape: number[], dtype: DataType):\n      void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount: 1,\n      complexParentRefCount: 0\n    });\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    const dataId = tensorInfo.dataId;\n\n    if (this.texData.has(dataId)) {\n      const textureData = this.texData.get(dataId);\n\n      textureData.refCount--;\n\n      if (textureData.refCount < 1) {\n        this.disposeData(dataId);\n      }\n    }\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n        env().getNumber('WEBGL_VERSION') === 2) {\n      throw new Error(\n          `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n          `WEBGL_VERSION=2 not yet supported.`);\n    }\n\n    let buffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      this.disposeData(dataId);\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu\n                       .downloadMatrixFromPackedTexture(\n                           tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                       .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals =\n        this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(\n                tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  async time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n      res['kernelMs'] = util.sum(kernelMs);\n      res['getExtraProfileInfo'] = () =>\n          kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n              .map(d => `${d.name}: ${d.ms}`)\n              .join(', ');\n    } else {\n      res['kernelMs'] = {\n        error: 'WebGL query timers are not supported in this environment.'\n      };\n    }\n\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n  memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  disposeData(dataId: DataId): void {\n    if (this.pendingDisposal.has(dataId)) {\n      return;\n    }\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return;\n    }\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return;\n    }\n    // Trying to dispose a textureData that has a 'kept' refCount, e.g. trying\n    // to dispose a tensor whose data bucket is shared with a complex tensor. In\n    // this case we are removing a reference to the textureData, but we\n    // shouldn't actually dispose the texture.\n    if (this.texData.get(dataId).complexParentRefCount > 0) {\n      this.texData.get(dataId).refCount--;\n      return;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.texData.get(complexTensorInfos.real.dataId).complexParentRefCount--;\n      this.disposeIntermediateTensorInfo(complexTensorInfos.real);\n\n      this.texData.get(complexTensorInfos.imag.dataId).complexParentRefCount--;\n      this.disposeIntermediateTensorInfo(complexTensorInfos.imag);\n    }\n    this.texData.delete(dataId);\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  private getCPUBackend(): KernelBackend|null {\n    if (!env().getBool('WEBGL_CPU_FORWARD')) {\n      return null;\n    }\n\n    if (this.cpuBackend == null) {\n      this.cpuBackend = engine().findBackend('cpu');\n    }\n\n    return this.cpuBackend;\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    const cpuBackend = this.getCPUBackend();\n    if (!env().getBool('IS_TEST') && !this.warnedAboutCPUBackend &&\n        cpuBackend == null) {\n      console.warn(\n          'Your application contains ops that are small enough to be ' +\n          'executed on the CPU backend, however the CPU backend cannot ' +\n          'be found. Consider importing the CPU backend ' +\n          '(@tensorflow/tfjs-backend-cpu) for better performance.');\n\n      this.warnedAboutCPUBackend = true;\n    }\n\n    return cpuBackend != null &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    return this.compileAndRun<Tensor>(program, [x], dtype);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    const {dataId} = this.makeTensorInfo(shape, dtype, values);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  private unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  private packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customSetup */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, null /* customSetup */,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId): TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype,\n        null /* customSetup */, preventEagerUnpackingOfOutput);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void,\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      } else if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      this.uploadToGPU(input.dataId);\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(\n        this.gpgpu, binary, inputsData, outputData, customSetup);\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun<K extends TensorInfo>(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customSetup?: (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => void,\n      preventEagerUnpackingOfOutput = false): K {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customSetup,\n        preventEagerUnpackingOfOutput);\n    return engine().makeTensorFromDataId(\n               outInfo.dataId, outInfo.shape, outInfo.dtype) as {} as K;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray = values instanceof Uint8Array;\n\n      if (isPacked) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n        program = new EncodeMatrixPackedProgram(\n            shapeAs3D, [height, width], isByteArray);\n      } else {\n        program =\n            new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n      }\n\n      const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n      if (isByteArray) {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.PIXELS;\n      } else {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.UPLOAD;\n      }\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      this.texData.delete(encodedOutputTarget.dataId);\n\n      // Once uploaded, don't store the values on cpu.\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): WebGLTexture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}