{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class MaxPool2DBackpropProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy', 'maxPos'];\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = \"\\n      const ivec2 pads = ivec2(\".concat(padTop, \", \").concat(padLeft, \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \").concat(effectiveFilterHeight, \";\\n          wR += \").concat(dilationHeight, \") {\\n          float dyR = float(dyRCorner + wR) / \").concat(strideHeight, \".0;\\n\\n          if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight, \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \").concat(effectiveFilterWidth, \"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \").concat(strideWidth, \".0;\\n\\n            if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth, \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n            int maxPosValue = \").concat(lastIndex, \" - int(getMaxPos(b, idyR, idyC, d));\\n\\n            // Get the current value, check it against the value from the\\n            // position matrix.\\n            int curPosValue = wR * \").concat(effectiveFilterWidth, \" + wC;\\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n            dotProd += dyValue * mask;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n  }\n}\nexport class MaxPool3DBackpropProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy', 'maxPos'];\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const lastIndex = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = \"\\n      const ivec3 pads = ivec3(\".concat(padFront, \", \").concat(padTop, \", \").concat(padLeft, \");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < \").concat(effectiveFilterDepth, \";\\n           wD += \").concat(dilationDepth, \") {\\n          float dyD = float(dyDCorner + wD) / \").concat(strideDepth, \".0;\\n\\n          if (dyD < 0.0 || dyD >= \").concat(convInfo.outDepth, \".0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < \").concat(effectiveFilterHeight, \";\\n              wR += \").concat(dilationHeight, \") {\\n            float dyR = float(dyRCorner + wR) / \").concat(strideHeight, \".0;\\n\\n            if (dyR < 0.0 || dyR >= \").concat(convInfo.outHeight, \".0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < \").concat(effectiveFilterWidth, \";\\n                wC += \").concat(dilationWidth, \") {\\n              float dyC = float(dyCCorner + wC) / \").concat(strideWidth, \".0;\\n\\n              if (dyC < 0.0 || dyC >= \").concat(convInfo.outWidth, \".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n              int maxPosValue = \").concat(lastIndex, \" -\\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\\n\\n              // Get the current value, check it against the value from the\\n              // position matrix.\\n              int curPosValue =\\n                  wD * \").concat(effectiveFilterHeight, \" * \").concat(effectiveFilterWidth, \" +\\n                  wR * \").concat(effectiveFilterWidth, \" + wC;\\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n              dotProd += dyValue * mask;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \");\n  }\n}","map":{"version":3,"names":["MaxPool2DBackpropProgram","constructor","convInfo","variableNames","outputShape","inShape","strideHeight","strideWidth","dilationHeight","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","lastIndex","userCode","concat","outHeight","outWidth","MaxPool3DBackpropProgram","strideDepth","dilationDepth","dilationWidth","effectiveFilterDepth","padFront","front","outDepth"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\max_pool_backprop_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}