{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class MultinomialProgram {\n  constructor(batchSize, numOutcomes, numSamples) {\n    this.variableNames = ['probs'];\n    this.outputShape = [batchSize, numSamples];\n    this.userCode = \"\\n      uniform float seed;\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n\\n        float r = random(seed);\\n        float cdf = 0.0;\\n\\n        for (int i = 0; i < \".concat(numOutcomes - 1, \"; i++) {\\n          cdf += getProbs(batch, i);\\n\\n          if (r < cdf) {\\n            setOutput(float(i));\\n            return;\\n          }\\n        }\\n\\n        // If no other event happened, last event happened.\\n        setOutput(float(\").concat(numOutcomes - 1, \"));\\n      }\\n    \");\n  }\n  getCustomSetupFunc(seed) {\n    return (gpgpu, webGLProgram) => {\n      if (this.seedLoc == null) {\n        this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\n      }\n      gpgpu.gl.uniform1f(this.seedLoc, seed);\n    };\n  }\n}","map":{"version":3,"names":["MultinomialProgram","constructor","batchSize","numOutcomes","numSamples","variableNames","outputShape","userCode","concat","getCustomSetupFunc","seed","gpgpu","webGLProgram","seedLoc","getUniformLocation","gl","uniform1f"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\multinomial_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n\n  getCustomSetupFunc(seed: number) {\n    return (gpgpu: GPGPUContext, webGLProgram: WebGLProgram) => {\n      if (this.seedLoc == null) {\n        this.seedLoc = gpgpu.getUniformLocation(webGLProgram, 'seed');\n      }\n      gpgpu.gl.uniform1f(this.seedLoc, seed);\n    };\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAoBA,OAAM,MAAOA,kBAAkB;EAQ7BC,YAAYC,SAAiB,EAAEC,WAAmB,EAAEC,UAAkB;IAPtE,KAAAC,aAAa,GAAG,CAAC,OAAO,CAAC;IAQvB,IAAI,CAACC,WAAW,GAAG,CAACJ,SAAS,EAAEE,UAAU,CAAC;IAE1C,IAAI,CAACG,QAAQ,gOAAAC,MAAA,CAUaL,WAAW,GAAG,CAAC,wPAAAK,MAAA,CAUnBL,WAAW,GAAG,CAAC,uBAEpC;EACH;EAEAM,kBAAkBA,CAACC,IAAY;IAC7B,OAAO,CAACC,KAAmB,EAAEC,YAA0B,KAAI;MACzD,IAAI,IAAI,CAACC,OAAO,IAAI,IAAI,EAAE;QACxB,IAAI,CAACA,OAAO,GAAGF,KAAK,CAACG,kBAAkB,CAACF,YAAY,EAAE,MAAM,CAAC;;MAE/DD,KAAK,CAACI,EAAE,CAACC,SAAS,CAAC,IAAI,CAACH,OAAO,EAAEH,IAAI,CAAC;IACxC,CAAC;EACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}