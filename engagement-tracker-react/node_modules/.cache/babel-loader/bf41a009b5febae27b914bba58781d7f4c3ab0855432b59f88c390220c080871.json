{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Noise Layers.\n */\nimport { greaterEqual, randomUniform, serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { Layer } from '../engine/topology';\nimport { getExactlyOneTensor } from '../utils/types_utils';\nexport class GaussianNoise extends Layer {\n  constructor(args) {\n    super(args);\n    this.supportsMasking = true;\n    this.stddev = args.stddev;\n  }\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      stddev: this.stddev\n    };\n    Object.assign(config, baseConfig);\n    return config;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      const noised = () => K.randomNormal(input.shape, 0, this.stddev).add(input);\n      const output = K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n      return output;\n    });\n  }\n}\n/** @nocollapse */\nGaussianNoise.className = 'GaussianNoise';\nserialization.registerClass(GaussianNoise);\nexport class GaussianDropout extends Layer {\n  constructor(args) {\n    super(args);\n    this.supportsMasking = true;\n    this.rate = args.rate;\n  }\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      rate: this.rate\n    };\n    Object.assign(config, baseConfig);\n    return config;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      this.invokeCallHook(inputs, kwargs);\n      const input = getExactlyOneTensor(inputs);\n      if (this.rate > 0 && this.rate < 1) {\n        const noised = () => {\n          const stddev = Math.sqrt(this.rate / (1 - this.rate));\n          return input.mul(K.randomNormal(input.shape, 1, stddev));\n        };\n        return K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n      }\n      return input;\n    });\n  }\n}\n/** @nocollapse */\nGaussianDropout.className = 'GaussianDropout';\nserialization.registerClass(GaussianDropout);\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n */\nexport class AlphaDropout extends Layer {\n  constructor(args) {\n    super(args);\n    this.supportsMasking = true;\n    this.rate = args.rate;\n    this.noiseShape = args.noiseShape;\n  }\n  _getNoiseShape(inputs) {\n    return this.noiseShape || getExactlyOneTensor(inputs).shape;\n  }\n  computeOutputShape(inputShape) {\n    return inputShape;\n  }\n  getConfig() {\n    const baseConfig = super.getConfig();\n    const config = {\n      rate: this.rate\n    };\n    Object.assign(config, baseConfig);\n    return config;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      if (this.rate < 1 && this.rate > 0) {\n        const noiseShape = this._getNoiseShape(inputs);\n        const droppedInputs = () => {\n          const input = getExactlyOneTensor(inputs);\n          const alpha = 1.6732632423543772848170429916717;\n          const scale = 1.0507009873554804934193349852946;\n          const alphaP = -alpha * scale;\n          let keptIdx = greaterEqual(randomUniform(noiseShape), this.rate);\n          keptIdx = K.cast(keptIdx, 'float32'); // get default dtype.\n          // Get affine transformation params.\n          const a = ((1 - this.rate) * (1 + this.rate * alphaP ** 2)) ** -0.5;\n          const b = -a * alphaP * this.rate;\n          // Apply mask.\n          const x = input.mul(keptIdx).add(keptIdx.add(-1).mul(alphaP));\n          return x.mul(a).add(b);\n        };\n        return K.inTrainPhase(droppedInputs, () => getExactlyOneTensor(inputs), kwargs['training'] || false);\n      }\n      return inputs;\n    });\n  }\n}\n/** @nocollapse */\nAlphaDropout.className = 'AlphaDropout';\nserialization.registerClass(AlphaDropout);","map":{"version":3,"names":["greaterEqual","randomUniform","serialization","tidy","K","Layer","getExactlyOneTensor","GaussianNoise","constructor","args","supportsMasking","stddev","computeOutputShape","inputShape","getConfig","baseConfig","config","Object","assign","call","inputs","kwargs","invokeCallHook","input","noised","randomNormal","shape","add","output","inTrainPhase","className","registerClass","GaussianDropout","rate","Math","sqrt","mul","AlphaDropout","noiseShape","_getNoiseShape","droppedInputs","alpha","scale","alphaP","keptIdx","cast","a","b","x"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-layers\\src\\layers\\noise.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */\r\n\r\n/**\r\n * TensorFlow.js Layers: Noise Layers.\r\n */\r\n\r\nimport {greaterEqual, randomUniform, serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\r\n\r\nimport * as K from '../backend/tfjs_backend';\r\nimport {Layer, LayerArgs} from '../engine/topology';\r\nimport {Shape} from '../keras_format/common';\r\nimport {Kwargs} from '../types';\r\nimport {getExactlyOneTensor} from '../utils/types_utils';\r\n\r\nexport declare interface GaussianNoiseArgs extends LayerArgs {\r\n  /** Standard Deviation.  */\r\n  stddev: number;\r\n}\r\n\r\nexport class GaussianNoise extends Layer {\r\n  /** @nocollapse */\r\n  static className = 'GaussianNoise';\r\n  readonly stddev: number;\r\n\r\n  constructor(args: GaussianNoiseArgs) {\r\n    super(args);\r\n    this.supportsMasking = true;\r\n    this.stddev = args.stddev;\r\n  }\r\n\r\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\r\n    return inputShape;\r\n  }\r\n\r\n  getConfig() {\r\n    const baseConfig = super.getConfig();\r\n    const config = {stddev: this.stddev};\r\n    Object.assign(config, baseConfig);\r\n    return config;\r\n  }\r\n\r\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\r\n    return tidy(() => {\r\n      this.invokeCallHook(inputs, kwargs);\r\n      const input = getExactlyOneTensor(inputs);\r\n      const noised = () =>\r\n          K.randomNormal(input.shape, 0, this.stddev).add(input);\r\n      const output =\r\n          K.inTrainPhase(noised, () => input, kwargs['training'] || false);\r\n      return output;\r\n    });\r\n  }\r\n}\r\nserialization.registerClass(GaussianNoise);\r\n\r\nexport declare interface GaussianDropoutArgs extends LayerArgs {\r\n  /** drop probability.  */\r\n  rate: number;\r\n}\r\n\r\nexport class GaussianDropout extends Layer {\r\n  /** @nocollapse */\r\n  static className = 'GaussianDropout';\r\n  readonly rate: number;\r\n\r\n  constructor(args: GaussianDropoutArgs) {\r\n    super(args);\r\n    this.supportsMasking = true;\r\n    this.rate = args.rate;\r\n  }\r\n\r\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\r\n    return inputShape;\r\n  }\r\n\r\n  getConfig() {\r\n    const baseConfig = super.getConfig();\r\n    const config = {rate: this.rate};\r\n    Object.assign(config, baseConfig);\r\n    return config;\r\n  }\r\n\r\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\r\n    return tidy(() => {\r\n      this.invokeCallHook(inputs, kwargs);\r\n      const input = getExactlyOneTensor(inputs);\r\n      if (this.rate > 0 && this.rate < 1) {\r\n        const noised = () => {\r\n          const stddev = Math.sqrt(this.rate / (1 - this.rate));\r\n          return input.mul(K.randomNormal(input.shape, 1, stddev));\r\n        };\r\n        return K.inTrainPhase(noised, () => input, kwargs['training'] || false);\r\n      }\r\n      return input;\r\n    });\r\n  }\r\n}\r\nserialization.registerClass(GaussianDropout);\r\n\r\nexport declare interface AlphaDropoutArgs extends LayerArgs {\r\n  /** drop probability.  */\r\n  rate: number;\r\n  /**\r\n   * A 1-D `Tensor` of type `int32`, representing the\r\n   * shape for randomly generated keep/drop flags.\r\n   */\r\n  noiseShape?: Shape;\r\n}\r\n\r\n/**\r\n * Applies Alpha Dropout to the input.\r\n *\r\n * As it is a regularization layer, it is only active at training time.\r\n *\r\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\r\n * to their original values, in order to ensure the self-normalizing property\r\n * even after this dropout.\r\n * Alpha Dropout fits well to Scaled Exponential Linear Units\r\n * by randomly setting activations to the negative saturation value.\r\n *\r\n * Arguments:\r\n *   - `rate`: float, drop probability (as with `Dropout`).\r\n *     The multiplicative noise will have\r\n *     standard deviation `sqrt(rate / (1 - rate))`.\r\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\r\n *     shape for randomly generated keep/drop flags.\r\n *\r\n * Input shape:\r\n *   Arbitrary. Use the keyword argument `inputShape`\r\n *   (tuple of integers, does not include the samples axis)\r\n *   when using this layer as the first layer in a model.\r\n *\r\n * Output shape:\r\n *   Same shape as input.\r\n *\r\n * References:\r\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\r\n */\r\nexport class AlphaDropout extends Layer {\r\n  /** @nocollapse */\r\n  static className = 'AlphaDropout';\r\n  readonly rate: number;\r\n  readonly noiseShape: Shape;\r\n\r\n  constructor(args: AlphaDropoutArgs) {\r\n    super(args);\r\n    this.supportsMasking = true;\r\n    this.rate = args.rate;\r\n    this.noiseShape = args.noiseShape;\r\n  }\r\n\r\n  _getNoiseShape(inputs: Tensor|Tensor[]) {\r\n    return this.noiseShape || getExactlyOneTensor(inputs).shape;\r\n  }\r\n\r\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\r\n    return inputShape;\r\n  }\r\n\r\n  getConfig() {\r\n    const baseConfig = super.getConfig();\r\n    const config = {rate: this.rate};\r\n    Object.assign(config, baseConfig);\r\n    return config;\r\n  }\r\n\r\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\r\n    return tidy(() => {\r\n      if (this.rate < 1 && this.rate > 0) {\r\n        const noiseShape = this._getNoiseShape(inputs);\r\n\r\n        const droppedInputs = () => {\r\n          const input = getExactlyOneTensor(inputs);\r\n\r\n          const alpha = 1.6732632423543772848170429916717;\r\n          const scale = 1.0507009873554804934193349852946;\r\n\r\n          const alphaP = -alpha * scale;\r\n\r\n          let keptIdx = greaterEqual(randomUniform(noiseShape), this.rate);\r\n\r\n          keptIdx = K.cast(keptIdx, 'float32');  // get default dtype.\r\n\r\n          // Get affine transformation params.\r\n          const a = ((1 - this.rate) * (1 + this.rate * alphaP ** 2)) ** -0.5;\r\n          const b = -a * alphaP * this.rate;\r\n\r\n          // Apply mask.\r\n          const x = input.mul(keptIdx).add(keptIdx.add(-1).mul(alphaP));\r\n\r\n          return x.mul(a).add(b);\r\n        };\r\n        return K.inTrainPhase(\r\n            droppedInputs, () => getExactlyOneTensor(inputs),\r\n            kwargs['training'] || false);\r\n      }\r\n      return inputs;\r\n    });\r\n  }\r\n}\r\nserialization.registerClass(AlphaDropout);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}