{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts() {\n  if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n    throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' + 'unavailable in the current environment.');\n  }\n  const LS = window.localStorage;\n  const purgedModelPaths = [];\n  for (let i = 0; i < LS.length; ++i) {\n    const key = LS.key(i);\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      const modelName = getModelPathFromKey(key);\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n  return purgedModelPaths;\n}\nfunction getModelKeys(path) {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key) {\n  const items = key.split(PATH_SEPARATOR);\n  if (items.length < 3) {\n    throw new Error(\"Invalid key format: \".concat(key));\n  }\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ? key.slice(BrowserLocalStorage.URL_SCHEME.length) : key;\n}\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nexport class BrowserLocalStorage {\n  constructor(modelPath) {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error('The current environment does not support local storage.');\n    }\n    this.LS = window.localStorage;\n    if (modelPath == null || !modelPath) {\n      throw new Error('For local storage, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n  /**\n   * Save model artifacts to browser local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @param modelArtifacts The model artifacts to be stored.\n   * @returns An instance of SaveResult.\n   */\n  async save(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n    } else {\n      const topology = JSON.stringify(modelArtifacts.modelTopology);\n      const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n      const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n      try {\n        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n        this.LS.setItem(this.keys.topology, topology);\n        this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n        this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData));\n        const result = {\n          format: modelArtifacts.format,\n          generatedBy: modelArtifacts.generatedBy,\n          convertedBy: modelArtifacts.convertedBy\n        };\n        if (modelArtifacts.signature != null) {\n          result.signature = modelArtifacts.signature;\n        }\n        if (modelArtifacts.userDefinedMetadata != null) {\n          result.userDefinedMetadata = modelArtifacts.userDefinedMetadata;\n        }\n        if (modelArtifacts.modelInitializer != null) {\n          result.modelInitializer = modelArtifacts.modelInitializer;\n        }\n        this.LS.setItem(this.keys.modelMetadata, JSON.stringify(result));\n        return {\n          modelArtifactsInfo\n        };\n      } catch (err) {\n        // If saving failed, clean up all items saved so far.\n        this.LS.removeItem(this.keys.info);\n        this.LS.removeItem(this.keys.topology);\n        this.LS.removeItem(this.keys.weightSpecs);\n        this.LS.removeItem(this.keys.weightData);\n        this.LS.removeItem(this.keys.modelMetadata);\n        throw new Error(\"Failed to save model '\".concat(this.modelPath, \"' to local storage: \") + \"size quota being exceeded is a possible cause of this failure: \" + \"modelTopologyBytes=\".concat(modelArtifactsInfo.modelTopologyBytes, \", \") + \"weightSpecsBytes=\".concat(modelArtifactsInfo.weightSpecsBytes, \", \") + \"weightDataBytes=\".concat(modelArtifactsInfo.weightDataBytes, \".\"));\n      }\n    }\n  }\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n  async load() {\n    const info = JSON.parse(this.LS.getItem(this.keys.info));\n    if (info == null) {\n      throw new Error(\"In local storage, there is no model with name '\".concat(this.modelPath, \"'\"));\n    }\n    if (info.modelTopologyType !== 'JSON') {\n      throw new Error('BrowserLocalStorage does not support loading non-JSON model ' + 'topology yet.');\n    }\n    const out = {};\n    // Load topology.\n    const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n    if (topology == null) {\n      throw new Error(\"In local storage, the topology of model '\".concat(this.modelPath, \"' \") + \"is missing.\");\n    }\n    out.modelTopology = topology;\n    // Load weight specs.\n    const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n    if (weightSpecs == null) {\n      throw new Error(\"In local storage, the weight specs of model '\".concat(this.modelPath, \"' \") + \"are missing.\");\n    }\n    out.weightSpecs = weightSpecs;\n    // Load meta-data fields.\n    const metadataString = this.LS.getItem(this.keys.modelMetadata);\n    if (metadataString != null) {\n      const metadata = JSON.parse(metadataString);\n      out.format = metadata['format'];\n      out.generatedBy = metadata['generatedBy'];\n      out.convertedBy = metadata['convertedBy'];\n      if (metadata['signature'] != null) {\n        out.signature = metadata['signature'];\n      }\n      if (metadata['userDefinedMetadata'] != null) {\n        out.userDefinedMetadata = metadata['userDefinedMetadata'];\n      }\n      if (metadata['modelInitializer'] != null) {\n        out.modelInitializer = metadata['modelInitializer'];\n      }\n    }\n    // Load weight data.\n    const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n    if (weightDataBase64 == null) {\n      throw new Error(\"In local storage, the binary weight values of model \" + \"'\".concat(this.modelPath, \"' are missing.\"));\n    }\n    out.weightData = base64StringToArrayBuffer(weightDataBase64);\n    return out;\n  }\n}\nBrowserLocalStorage.URL_SCHEME = 'localstorage://';\nexport const localStorageRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath) {\n  return new BrowserLocalStorage(modelPath);\n}\nexport class BrowserLocalStorageManager {\n  constructor() {\n    assert(env().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');\n    assert(typeof window === 'undefined' || typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');\n    this.LS = window.localStorage;\n  }\n  async listModels() {\n    const out = {};\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n    for (let i = 0; i < this.LS.length; ++i) {\n      const key = this.LS.key(i);\n      if (key.startsWith(prefix) && key.endsWith(suffix)) {\n        const modelPath = getModelPathFromKey(key);\n        out[modelPath] = JSON.parse(this.LS.getItem(key));\n      }\n    }\n    return out;\n  }\n  async removeModel(path) {\n    path = maybeStripScheme(path);\n    const keys = getModelKeys(path);\n    if (this.LS.getItem(keys.info) == null) {\n      throw new Error(\"Cannot find model at path '\".concat(path, \"'\"));\n    }\n    const info = JSON.parse(this.LS.getItem(keys.info));\n    this.LS.removeItem(keys.info);\n    this.LS.removeItem(keys.topology);\n    this.LS.removeItem(keys.weightSpecs);\n    this.LS.removeItem(keys.weightData);\n    return info;\n  }\n}","map":{"version":3,"names":["env","assert","arrayBufferToBase64String","base64StringToArrayBuffer","getModelArtifactsInfoForJSON","IORouterRegistry","PATH_SEPARATOR","PATH_PREFIX","INFO_SUFFIX","MODEL_TOPOLOGY_SUFFIX","WEIGHT_SPECS_SUFFIX","WEIGHT_DATA_SUFFIX","MODEL_METADATA_SUFFIX","purgeLocalStorageArtifacts","getBool","window","localStorage","Error","LS","purgedModelPaths","i","length","key","prefix","startsWith","removeItem","modelName","getModelPathFromKey","indexOf","push","getModelKeys","path","info","join","topology","weightSpecs","weightData","modelMetadata","items","split","concat","slice","maybeStripScheme","BrowserLocalStorage","URL_SCHEME","constructor","modelPath","keys","save","modelArtifacts","modelTopology","ArrayBuffer","JSON","stringify","modelArtifactsInfo","setItem","result","format","generatedBy","convertedBy","signature","userDefinedMetadata","modelInitializer","err","modelTopologyBytes","weightSpecsBytes","weightDataBytes","load","parse","getItem","modelTopologyType","out","metadataString","metadata","weightDataBase64","localStorageRouter","url","Array","isArray","browserLocalStorage","registerSaveRouter","registerLoadRouter","BrowserLocalStorageManager","listModels","suffix","endsWith","removeModel"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-core\\src\\io\\local_storage.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\nimport {env} from '../environment';\n\nimport {assert} from '../util';\nimport {arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelStoreManager, SaveResult} from './types';\n\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts(): string[] {\n  if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n      typeof window.localStorage === 'undefined') {\n    throw new Error(\n        'purgeLocalStorageModels() cannot proceed because local storage is ' +\n        'unavailable in the current environment.');\n  }\n  const LS = window.localStorage;\n  const purgedModelPaths: string[] = [];\n  for (let i = 0; i < LS.length; ++i) {\n    const key = LS.key(i);\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      const modelName = getModelPathFromKey(key);\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n  return purgedModelPaths;\n}\n\nfunction getModelKeys(path: string): {\n  info: string,\n  topology: string,\n  weightSpecs: string,\n  weightData: string,\n  modelMetadata: string\n} {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata:\n        [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\n\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key: string) {\n  const items = key.split(PATH_SEPARATOR);\n  if (items.length < 3) {\n    throw new Error(`Invalid key format: ${key}`);\n  }\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?\n      key.slice(BrowserLocalStorage.URL_SCHEME.length) :\n      key;\n}\n\ndeclare type LocalStorageKeys = {\n  info: string,\n  topology: string,\n  weightSpecs: string,\n  weightData: string,\n  modelMetadata: string\n};\n\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nexport class BrowserLocalStorage implements IOHandler {\n  protected readonly LS: Storage;\n  protected readonly modelPath: string;\n  protected readonly keys: LocalStorageKeys;\n\n  static readonly URL_SCHEME = 'localstorage://';\n\n  constructor(modelPath: string) {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n        typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error(\n          'The current environment does not support local storage.');\n    }\n    this.LS = window.localStorage;\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For local storage, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n\n  /**\n   * Save model artifacts to browser local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @param modelArtifacts The model artifacts to be stored.\n   * @returns An instance of SaveResult.\n   */\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const topology = JSON.stringify(modelArtifacts.modelTopology);\n      const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n\n      const modelArtifactsInfo: ModelArtifactsInfo =\n          getModelArtifactsInfoForJSON(modelArtifacts);\n\n      try {\n        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n        this.LS.setItem(this.keys.topology, topology);\n        this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n        this.LS.setItem(\n            this.keys.weightData,\n            arrayBufferToBase64String(modelArtifacts.weightData));\n        const result: ModelArtifacts = {\n          format: modelArtifacts.format,\n          generatedBy: modelArtifacts.generatedBy,\n          convertedBy: modelArtifacts.convertedBy\n        };\n        if (modelArtifacts.signature != null) {\n          result.signature = modelArtifacts.signature;\n        }\n        if (modelArtifacts.userDefinedMetadata != null) {\n          result.userDefinedMetadata = modelArtifacts.userDefinedMetadata;\n        }\n        if (modelArtifacts.modelInitializer != null) {\n          result.modelInitializer = modelArtifacts.modelInitializer;\n        }\n        this.LS.setItem(this.keys.modelMetadata, JSON.stringify(result));\n\n        return {modelArtifactsInfo};\n      } catch (err) {\n        // If saving failed, clean up all items saved so far.\n        this.LS.removeItem(this.keys.info);\n        this.LS.removeItem(this.keys.topology);\n        this.LS.removeItem(this.keys.weightSpecs);\n        this.LS.removeItem(this.keys.weightData);\n        this.LS.removeItem(this.keys.modelMetadata);\n\n        throw new Error(\n            `Failed to save model '${this.modelPath}' to local storage: ` +\n            `size quota being exceeded is a possible cause of this failure: ` +\n            `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +\n            `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +\n            `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n      }\n    }\n  }\n\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const info =\n        JSON.parse(this.LS.getItem(this.keys.info)) as ModelArtifactsInfo;\n    if (info == null) {\n      throw new Error(\n          `In local storage, there is no model with name '${this.modelPath}'`);\n    }\n\n    if (info.modelTopologyType !== 'JSON') {\n      throw new Error(\n          'BrowserLocalStorage does not support loading non-JSON model ' +\n          'topology yet.');\n    }\n\n    const out: ModelArtifacts = {};\n\n    // Load topology.\n    const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n    if (topology == null) {\n      throw new Error(\n          `In local storage, the topology of model '${this.modelPath}' ` +\n          `is missing.`);\n    }\n    out.modelTopology = topology;\n\n    // Load weight specs.\n    const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n    if (weightSpecs == null) {\n      throw new Error(\n          `In local storage, the weight specs of model '${this.modelPath}' ` +\n          `are missing.`);\n    }\n    out.weightSpecs = weightSpecs;\n\n    // Load meta-data fields.\n    const metadataString = this.LS.getItem(this.keys.modelMetadata);\n    if (metadataString != null) {\n      const metadata = JSON.parse(metadataString) as ModelArtifacts;\n      out.format = metadata['format'];\n      out.generatedBy = metadata['generatedBy'];\n      out.convertedBy = metadata['convertedBy'];\n      if (metadata['signature'] != null) {\n        out.signature = metadata['signature'];\n      }\n      if (metadata['userDefinedMetadata'] != null) {\n        out.userDefinedMetadata = metadata['userDefinedMetadata'];\n      }\n      if (metadata['modelInitializer'] != null) {\n        out.modelInitializer = metadata['modelInitializer'];\n      }\n    }\n\n    // Load weight data.\n    const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n    if (weightDataBase64 == null) {\n      throw new Error(\n          `In local storage, the binary weight values of model ` +\n          `'${this.modelPath}' are missing.`);\n    }\n    out.weightData = base64StringToArrayBuffer(weightDataBase64);\n\n    return out;\n  }\n}\n\nexport const localStorageRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(\n          url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath: string): IOHandler {\n  return new BrowserLocalStorage(modelPath);\n}\n\nexport class BrowserLocalStorageManager implements ModelStoreManager {\n  private readonly LS: Storage;\n\n  constructor() {\n    assert(\n        env().getBool('IS_BROWSER'),\n        () => 'Current environment is not a web browser');\n    assert(\n        typeof window === 'undefined' ||\n            typeof window.localStorage !== 'undefined',\n        () => 'Current browser does not appear to support localStorage');\n    this.LS = window.localStorage;\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    const out: {[path: string]: ModelArtifactsInfo} = {};\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n    for (let i = 0; i < this.LS.length; ++i) {\n      const key = this.LS.key(i);\n      if (key.startsWith(prefix) && key.endsWith(suffix)) {\n        const modelPath = getModelPathFromKey(key);\n        out[modelPath] = JSON.parse(this.LS.getItem(key)) as ModelArtifactsInfo;\n      }\n    }\n    return out;\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    const keys = getModelKeys(path);\n    if (this.LS.getItem(keys.info) == null) {\n      throw new Error(`Cannot find model at path '${path}'`);\n    }\n    const info = JSON.parse(this.LS.getItem(keys.info)) as ModelArtifactsInfo;\n\n    this.LS.removeItem(keys.info);\n    this.LS.removeItem(keys.topology);\n    this.LS.removeItem(keys.weightSpecs);\n    this.LS.removeItem(keys.weightData);\n    return info;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}