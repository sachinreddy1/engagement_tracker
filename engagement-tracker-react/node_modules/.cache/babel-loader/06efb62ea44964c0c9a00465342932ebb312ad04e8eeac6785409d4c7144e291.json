{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'FusedBatchNorm',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scale',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'offset',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'mean',\n    'type': 'tensor'\n  }, {\n    'start': 4,\n    'name': 'variance',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.001\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'FusedBatchNormV2',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scale',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'offset',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'mean',\n    'type': 'tensor'\n  }, {\n    'start': 4,\n    'name': 'variance',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.001\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'FusedBatchNormV3',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scale',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'offset',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'mean',\n    'type': 'tensor'\n  }, {\n    'start': 4,\n    'name': 'variance',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.001\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'LRN',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'depth_radius',\n    'name': 'radius',\n    'type': 'number',\n    'defaultValue': 5\n  }, {\n    'tfName': 'bias',\n    'name': 'bias',\n    'type': 'number',\n    'defaultValue': 1.0\n  }, {\n    'tfName': 'alpha',\n    'name': 'alpha',\n    'type': 'number',\n    'defaultValue': 1.0\n  }, {\n    'tfName': 'beta',\n    'name': 'beta',\n    'type': 'number',\n    'defaultValue': 0.5\n  }]\n}, {\n  'tfOpName': 'Softmax',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'LogSoftmax',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'SparseToDense',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'sparseIndices',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'outputShape',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'sparseValues',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'defaultValue',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'validate_indices',\n    'name': 'validateIndices',\n    'type': 'bool',\n    'defaultValue': true,\n    'notSupported': true\n  }]\n}];","map":{"version":3,"names":["json"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\normalization.ts"],"sourcesContent":["import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0},\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': true,\n      'notSupported': true\n    }]\n  }\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}