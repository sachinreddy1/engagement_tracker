{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class ConcatProgram {\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes) {\n    this.outputShape = [];\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => \"T\".concat(i));\n    const offsets = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n    const snippets = [\"if (yC < \".concat(offsets[0], \") setOutput(getT0(yR, yC));\")];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\"else if (yC < \".concat(offsets[i], \") \") + \"setOutput(getT\".concat(i, \"(yR, yC-\").concat(shift, \"));\"));\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(\"else setOutput(getT\".concat(lastIndex, \"(yR, yC-\").concat(lastShift, \"));\"));\n    this.userCode = \"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int yR = coords.x;\\n        int yC = coords.y;\\n\\n        \".concat(snippets.join('\\n        '), \"\\n      }\\n    \");\n  }\n}","map":{"version":3,"names":["backend_util","ConcatProgram","constructor","shapes","outputShape","computeOutShape","variableNames","map","_","i","concat","offsets","Array","length","snippets","shift","push","lastIndex","lastShift","userCode","join"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-backend-webgl\\src\\concat_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,QAAO,uBAAuB;AAGlD,OAAM,MAAOC,aAAa;EAKxB;EACAC,YAAYC,MAA+B;IAJ3C,KAAAC,WAAW,GAAa,EAAE;IAKxB,IAAI,CAACA,WAAW,GAAGJ,YAAY,CAACK,eAAe,CAACF,MAAM,EAAE,CAAC,CAAC,UAAU,CAAC;IACrE,IAAI,CAACG,aAAa,GAAGH,MAAM,CAACI,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,SAAAC,MAAA,CAASD,CAAC,CAAE,CAAC;IAElD,MAAME,OAAO,GAAa,IAAIC,KAAK,CAACT,MAAM,CAACU,MAAM,GAAG,CAAC,CAAC;IACtDF,OAAO,CAAC,CAAC,CAAC,GAAGR,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzB,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,OAAO,CAACE,MAAM,EAAEJ,CAAC,EAAE,EAAE;MACvCE,OAAO,CAACF,CAAC,CAAC,GAAGE,OAAO,CAACF,CAAC,GAAG,CAAC,CAAC,GAAGN,MAAM,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC;;IAG5C,MAAMK,QAAQ,GAAG,aAAAJ,MAAA,CAAaC,OAAO,CAAC,CAAC,CAAC,iCAA8B;IACtE,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,OAAO,CAACE,MAAM,EAAEJ,CAAC,EAAE,EAAE;MACvC,MAAMM,KAAK,GAAGJ,OAAO,CAACF,CAAC,GAAG,CAAC,CAAC;MAC5BK,QAAQ,CAACE,IAAI,CACT,iBAAAN,MAAA,CAAiBC,OAAO,CAACF,CAAC,CAAC,2BAAAC,MAAA,CACVD,CAAC,cAAAC,MAAA,CAAWK,KAAK,QAAK,CAAC;;IAE9C,MAAME,SAAS,GAAGN,OAAO,CAACE,MAAM;IAChC,MAAMK,SAAS,GAAGP,OAAO,CAACA,OAAO,CAACE,MAAM,GAAG,CAAC,CAAC;IAC7CC,QAAQ,CAACE,IAAI,uBAAAN,MAAA,CAAuBO,SAAS,cAAAP,MAAA,CAAWQ,SAAS,QAAK,CAAC;IAEvE,IAAI,CAACC,QAAQ,0IAAAT,MAAA,CAMPI,QAAQ,CAACM,IAAI,CAAC,YAAY,CAAC,oBAEhC;EACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}