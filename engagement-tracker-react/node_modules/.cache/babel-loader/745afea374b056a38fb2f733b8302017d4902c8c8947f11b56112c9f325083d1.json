{"ast":null,"code":"import * as tf from \"@tensorflow/tfjs\";\nexport const detect = async (net, webcamRef, canvasRef, updateEngagementLevel) => {\n  if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n    const video = webcamRef.current.video;\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n    webcamRef.current.video.width = videoWidth;\n    webcamRef.current.video.height = videoHeight;\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n    const img = tf.browser.fromPixels(video);\n    const resized = tf.image.resizeBilinear(img, [640, 640]);\n    const normalized = resized.div(tf.scalar(255.0));\n    const casted = normalized.cast('float32');\n    const expanded = casted.expandDims(0);\n    const obj = await net.predict(expanded);\n    console.log(obj);\n\n    // const isFace = await obj[0].array()\n    // const isEngaged = await obj[1].array()\n    // const boxes = await obj[2].array()\n\n    // const ctx = canvasRef.current.getContext(\"2d\");\n\n    // requestAnimationFrame(\n    //     () => {\n    //         drawRect(boxes[0], isFace[0], isEngaged[0], videoWidth, videoHeight, ctx, updateEngagementLevel)\n    //     }); \n\n    tf.dispose(img);\n    tf.dispose(resized);\n    tf.dispose(normalized);\n    tf.dispose(casted);\n    tf.dispose(expanded);\n    tf.dispose(obj);\n  }\n};\nexport const drawRect = (boxes, isFace, isEngaged, imgWidth, imgHeight, ctx, updateEngagementLevel, increment) => {\n  boxes[0] = boxes[0] * imgWidth;\n  boxes[1] = boxes[1] * imgHeight;\n  boxes[2] = boxes[2] * imgWidth;\n  boxes[3] = boxes[3] * imgHeight;\n  if (isFace[0] > 0.7) {\n    const [x1, y1, x2, y2] = boxes;\n    if (isEngaged[0] > 0.9) {\n      updateEngagementLevel(1);\n      ctx.strokeStyle = '#32cd80';\n      ctx.lineWidth = 10;\n      ctx.fillStyle = '#f5f5f5';\n      ctx.font = '1.2em Staatliches';\n      ctx.beginPath();\n      ctx.fillText('Engaged: ' + Math.round(isEngaged[0] * 100) / 100, x1, y1 - 10);\n      ctx.rect(x1, y1, x2 - x1, y2 - y1);\n      ctx.stroke();\n    } else {\n      updateEngagementLevel(-1);\n      ctx.strokeStyle = '#ff4d4d';\n      ctx.lineWidth = 10;\n      ctx.fillStyle = '#f5f5f5';\n      ctx.font = '1.2em Staatliches';\n      ctx.beginPath();\n      ctx.fillText('Not Engaged: ' + Math.round((1 - isEngaged[0]) * 100) / 100, x1, y1 - 10);\n      ctx.rect(x1, y1, x2 - x1, y2 - y1);\n      ctx.stroke();\n    }\n  } else {\n    updateEngagementLevel(-1);\n  }\n};","map":{"version":3,"names":["tf","detect","net","webcamRef","canvasRef","updateEngagementLevel","current","video","readyState","videoWidth","videoHeight","width","height","img","browser","fromPixels","resized","image","resizeBilinear","normalized","div","scalar","casted","cast","expanded","expandDims","obj","predict","console","log","dispose","drawRect","boxes","isFace","isEngaged","imgWidth","imgHeight","ctx","increment","x1","y1","x2","y2","strokeStyle","lineWidth","fillStyle","font","beginPath","fillText","Math","round","rect","stroke"],"sources":["C:/Users/reddy/Documents/Projects/Engagement Tracker/engagement-tracker-react/src/util/utilities.js"],"sourcesContent":["import * as tf from \"@tensorflow/tfjs\";\r\n\r\nexport const detect = async (net, webcamRef, canvasRef, updateEngagementLevel) => {\r\n    if (\r\n        typeof webcamRef.current !== \"undefined\" &&\r\n        webcamRef.current !== null &&\r\n        webcamRef.current.video.readyState === 4\r\n    ) {\r\n        const video = webcamRef.current.video;\r\n        const videoWidth = webcamRef.current.video.videoWidth;\r\n        const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n        webcamRef.current.video.width = videoWidth;\r\n        webcamRef.current.video.height = videoHeight;\r\n\r\n        canvasRef.current.width = videoWidth;\r\n        canvasRef.current.height = videoHeight;\r\n\r\n        const img = tf.browser.fromPixels(video)\r\n        const resized = tf.image.resizeBilinear(img, [640,640])\r\n        const normalized = resized.div(tf.scalar(255.0))\r\n        \r\n        const casted = normalized.cast('float32')\r\n        const expanded = casted.expandDims(0)\r\n\r\n        const obj = await net.predict(expanded)\r\n        \r\n        console.log(obj)\r\n\r\n        // const isFace = await obj[0].array()\r\n        // const isEngaged = await obj[1].array()\r\n        // const boxes = await obj[2].array()\r\n        \r\n        // const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n        // requestAnimationFrame(\r\n        //     () => {\r\n        //         drawRect(boxes[0], isFace[0], isEngaged[0], videoWidth, videoHeight, ctx, updateEngagementLevel)\r\n        //     }); \r\n\r\n        tf.dispose(img)\r\n        tf.dispose(resized)\r\n        tf.dispose(normalized)\r\n        tf.dispose(casted)\r\n        tf.dispose(expanded)\r\n        tf.dispose(obj)\r\n    }\r\n}\r\n\r\nexport const drawRect = (boxes, isFace, isEngaged, imgWidth, imgHeight, ctx, updateEngagementLevel, increment) => {\r\n    boxes[0] = boxes[0] * imgWidth\r\n    boxes[1] = boxes[1] * imgHeight\r\n    boxes[2] = boxes[2] * imgWidth\r\n    boxes[3] = boxes[3] * imgHeight\r\n\r\n    if(isFace[0] > 0.7){\r\n        const [x1, y1, x2, y2] = boxes\r\n        \r\n        if (isEngaged[0] > 0.9) {\r\n            updateEngagementLevel(1)\r\n\r\n            ctx.strokeStyle = '#32cd80'\r\n            ctx.lineWidth = 10\r\n            ctx.fillStyle = '#f5f5f5'\r\n            ctx.font = '1.2em Staatliches'         \r\n            \r\n            ctx.beginPath()\r\n            ctx.fillText('Engaged: ' + Math.round(isEngaged[0] * 100) / 100, x1, y1 - 10)\r\n            ctx.rect(x1, y1, (x2 - x1), (y2 - y1));\r\n            ctx.stroke()\r\n        } else {\r\n            updateEngagementLevel(-1)\r\n\r\n            ctx.strokeStyle = '#ff4d4d'\r\n            ctx.lineWidth = 10\r\n            ctx.fillStyle = '#f5f5f5'\r\n            ctx.font = '1.2em Staatliches'         \r\n            \r\n            ctx.beginPath()\r\n            ctx.fillText('Not Engaged: ' + Math.round((1 - isEngaged[0]) * 100) / 100, x1, y1 - 10)\r\n            ctx.rect(x1, y1, (x2 - x1), (y2 - y1));\r\n            ctx.stroke()\r\n        }\r\n    } else {\r\n        updateEngagementLevel(-1)\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}