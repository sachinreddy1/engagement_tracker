{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { customGrad } from '../../gradients';\nimport { FusedConv2D } from '../../kernel_names';\nimport { makeTypesMatch } from '../../tensor_util';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { add } from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport { conv2d as unfusedConv2d } from '../conv2d';\nimport { conv2DBackpropFilter } from '../conv2d_backprop_filter';\nimport { conv2DBackpropInput } from '../conv2d_backprop_input';\nimport * as conv_util from '../conv_util';\nimport { applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse } from '../fused_util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * Computes a 2D convolution over the input x, optionally fused with adding a\n * bias and applying an activation.\n *\n * ```js\n * const inputDepth = 2;\n * const inShape = [2, 2, 2, inputDepth];\n * const outputDepth = 2;\n * const fSize = 1;\n * const pad = 0;\n * const strides = 1;\n *\n * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n * 16], inShape);\n * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,\n * outputDepth]);\n *\n * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',\n * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();\n * ```\n *\n * @param obj An object with the following properties:\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid` output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param bias Tensor to be added to the result.\n * @param activation Name of activation kernel (defaults to `linear`) to be\n *     applied\n *      after biasAdd.\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\n *     of a `prelu` activation, typically the same shape as `x`.\n * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`\n *     activation.\n */\nfunction fusedConv2d_(_ref) {\n  let {\n    x,\n    filter,\n    strides,\n    pad,\n    dataFormat = 'NHWC',\n    dilations = [1, 1],\n    dimRoundingMode,\n    bias,\n    activation = 'linear',\n    preluActivationWeights,\n    leakyreluAlpha\n  } = _ref;\n  activation = activation || 'linear';\n  if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n    let result = unfusedConv2d(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n    if (bias != null) {\n      result = add(result, bias);\n    }\n    return applyActivation(result, activation, preluActivationWeights, leakyreluAlpha);\n  }\n  const $x = convertToTensor(x, 'x', 'conv2d');\n  const $filter = convertToTensor(filter, 'filter', 'conv2d');\n  let x4D = $x;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  util.assert(x4D.rank === 4, () => \"Error in fused conv2d: input must be rank 4, but got rank \" + \"\".concat(x4D.rank, \".\"));\n  util.assert($filter.rank === 4, () => \"Error in fused conv2d: filter must be rank 4, but got rank \" + \"\".concat($filter.rank, \".\"));\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), () => \"Error in fused conv2d: pad must be an integer when using, \" + \"dimRoundingMode \".concat(dimRoundingMode, \" but got pad \").concat(pad, \".\"));\n  }\n  util.assert(x4D.shape[3] === $filter.shape[2], () => \"Error in conv2d: depth of input (\".concat(x4D.shape[3], \") must match \") + \"input depth for filter \".concat($filter.shape[2], \".\"));\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv2D: Either strides or dilations must be 1. ' + \"Got strides \".concat(strides, \" and dilations '\").concat(dilations, \"'\"));\n  util.assert(dataFormat === 'NHWC', () => \"Error in conv2d: got dataFormat of \".concat(dataFormat, \" but only NHWC is currently supported.\"));\n  const convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);\n  let $bias;\n  if (bias != null) {\n    $bias = convertToTensor(bias, 'bias', 'fused conv2d');\n    [$bias] = makeTypesMatch($bias, $x);\n    broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n  }\n  let $preluActivationWeights;\n  if (preluActivationWeights != null) {\n    $preluActivationWeights = convertToTensor(preluActivationWeights, 'prelu weights', 'fused conv2d');\n  }\n  const grad = (dy, saved) => {\n    const [$filter, x4D, y, $bias] = saved;\n    const dyActivation = getFusedDyActivation(dy, y, activation);\n    util.assert(conv_util.tupleValuesAreOne(dilations), () => 'Error in gradient of fused conv2D: ' + \"dilation rates greater than 1 \" + \"are not yet supported in gradients. Got dilations '\".concat(dilations, \"'\"));\n    const xDer = conv2DBackpropInput(x4D.shape, dyActivation, $filter, strides, pad);\n    const filterDer = conv2DBackpropFilter(x4D, dyActivation, $filter.shape, strides, pad);\n    const der = [xDer, filterDer];\n    if ($bias != null) {\n      const biasDer = getFusedBiasGradient($bias, dyActivation);\n      der.push(biasDer);\n    }\n    return der;\n  };\n  const inputs = {\n    x: x4D,\n    filter: $filter,\n    bias: $bias,\n    preluActivationWeights: $preluActivationWeights\n  };\n  const attrs = {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  };\n  // Depending on the the params passed in we will have different number of\n  // inputs and thus a a different number of elements in the gradient.\n  if (bias == null) {\n    const customOp = customGrad((x4D, filter, save) => {\n      let res =\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      ENGINE.runKernel(FusedConv2D, inputs, attrs);\n      save([filter, x4D, res]);\n      if (reshapedTo4D) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n      }\n      return {\n        value: res,\n        gradFunc: grad\n      };\n    });\n    return customOp(x4D, $filter);\n  } else {\n    const customOpWithBias = customGrad((x4D, filter, bias, save) => {\n      let res = ENGINE.runKernel(FusedConv2D, inputs, attrs);\n      save([filter, x4D, res, bias]);\n      if (reshapedTo4D) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n      }\n      return {\n        value: res,\n        gradFunc: grad\n      };\n    });\n    return customOpWithBias(x4D, $filter, $bias);\n  }\n}\nexport const conv2d = op({\n  fusedConv2d_\n});","map":{"version":3,"names":["ENGINE","customGrad","FusedConv2D","makeTypesMatch","convertToTensor","util","add","broadcast_util","conv2d","unfusedConv2d","conv2DBackpropFilter","conv2DBackpropInput","conv_util","applyActivation","getFusedBiasGradient","getFusedDyActivation","shouldFuse","op","reshape","fusedConv2d_","_ref","x","filter","strides","pad","dataFormat","dilations","dimRoundingMode","bias","activation","preluActivationWeights","leakyreluAlpha","state","gradientDepth","result","$x","$filter","x4D","reshapedTo4D","rank","shape","assert","concat","isInt","eitherStridesOrDilationsAreOne","convInfo","computeConv2DInfo","$bias","assertAndGetBroadcastShape","outShape","$preluActivationWeights","grad","dy","saved","y","dyActivation","tupleValuesAreOne","xDer","filterDer","der","biasDer","push","inputs","attrs","customOp","save","res","runKernel","value","gradFunc","customOpWithBias"],"sources":["C:\\Users\\reddy\\Documents\\Projects\\Engagement Tracker\\engagement-tracker-react\\node_modules\\@tensorflow\\tfjs-core\\src\\ops\\fused\\conv2d.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {customGrad} from '../../gradients';\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor, Tensor3D, Tensor4D} from '../../tensor';\nimport {GradSaveFunc, NamedTensorMap} from '../../tensor_types';\nimport {makeTypesMatch} from '../../tensor_util';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\nimport {add} from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport {conv2d as unfusedConv2d} from '../conv2d';\nimport {conv2DBackpropFilter} from '../conv2d_backprop_filter';\nimport {conv2DBackpropInput} from '../conv2d_backprop_input';\nimport * as conv_util from '../conv_util';\nimport {Activation} from '../fused_types';\nimport {applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse} from '../fused_util';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\n\n/**\n * Computes a 2D convolution over the input x, optionally fused with adding a\n * bias and applying an activation.\n *\n * ```js\n * const inputDepth = 2;\n * const inShape = [2, 2, 2, inputDepth];\n * const outputDepth = 2;\n * const fSize = 1;\n * const pad = 0;\n * const strides = 1;\n *\n * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n * 16], inShape);\n * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,\n * outputDepth]);\n *\n * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',\n * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();\n * ```\n *\n * @param obj An object with the following properties:\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid` output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param bias Tensor to be added to the result.\n * @param activation Name of activation kernel (defaults to `linear`) to be\n *     applied\n *      after biasAdd.\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\n *     of a `prelu` activation, typically the same shape as `x`.\n * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`\n *     activation.\n */\nfunction fusedConv2d_<T extends Tensor3D|Tensor4D>({\n  x,\n  filter,\n  strides,\n  pad,\n  dataFormat = 'NHWC',\n  dilations = [1, 1],\n  dimRoundingMode,\n  bias,\n  activation = 'linear',\n  preluActivationWeights,\n  leakyreluAlpha\n}: {\n  x: T|TensorLike,\n  filter: Tensor4D|TensorLike,\n  strides: [number, number]|number,\n  pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n  dataFormat?: 'NHWC'|'NCHW',\n  dilations?: [number, number]|number,\n  dimRoundingMode?: 'floor'|'round'|'ceil',\n  bias?: Tensor|TensorLike,\n  activation?: Activation,\n  preluActivationWeights?: Tensor,\n  leakyreluAlpha?: number\n}): T {\n  activation = activation || 'linear';\n\n  if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n    let result = unfusedConv2d(\n        x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n    if (bias != null) {\n      result = add(result, bias);\n    }\n\n    return applyActivation(\n               result, activation, preluActivationWeights, leakyreluAlpha) as T;\n  }\n\n  const $x = convertToTensor(x, 'x', 'conv2d');\n  const $filter = convertToTensor(filter, 'filter', 'conv2d');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in fused conv2d: input must be rank 4, but got rank ` +\n          `${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in fused conv2d: filter must be rank 4, but got rank ` +\n          `${$filter.rank}.`);\n  if (dimRoundingMode != null) {\n    util.assert(\n        util.isInt(pad as number),\n        () => `Error in fused conv2d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  util.assert(\n      x4D.shape[3] === $filter.shape[2],\n      () => `Error in conv2d: depth of input (${x4D.shape[3]}) must match ` +\n          `input depth for filter ${$filter.shape[2]}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in conv2D: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Error in conv2d: got dataFormat of ${\n          dataFormat} but only NHWC is currently supported.`);\n\n  const convInfo = conv_util.computeConv2DInfo(\n      x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);\n\n  let $bias: Tensor;\n  if (bias != null) {\n    $bias = convertToTensor(bias, 'bias', 'fused conv2d');\n    [$bias] = makeTypesMatch($bias, $x);\n\n    broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n  }\n\n  let $preluActivationWeights: Tensor;\n  if (preluActivationWeights != null) {\n    $preluActivationWeights = convertToTensor(\n        preluActivationWeights, 'prelu weights', 'fused conv2d');\n  }\n\n  const grad = (dy: Tensor4D, saved: Tensor[]) => {\n    const [$filter, x4D, y, $bias] =\n        saved as [Tensor4D, Tensor4D, Tensor4D, Tensor];\n\n    const dyActivation = getFusedDyActivation(dy, y, activation) as Tensor4D;\n\n    util.assert(\n        conv_util.tupleValuesAreOne(dilations),\n        () => 'Error in gradient of fused conv2D: ' +\n            `dilation rates greater than 1 ` +\n            `are not yet supported in gradients. Got dilations '${dilations}'`);\n\n    const xDer =\n        conv2DBackpropInput(x4D.shape, dyActivation, $filter, strides, pad);\n    const filterDer =\n        conv2DBackpropFilter(x4D, dyActivation, $filter.shape, strides, pad);\n    const der: Tensor[] = [xDer, filterDer];\n\n    if ($bias != null) {\n      const biasDer = getFusedBiasGradient($bias, dyActivation);\n      der.push(biasDer);\n    }\n    return der;\n  };\n\n  const inputs: FusedConv2DInputs = {\n    x: x4D,\n    filter: $filter,\n    bias: $bias,\n    preluActivationWeights: $preluActivationWeights\n  };\n\n  const attrs: FusedConv2DAttrs = {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  };\n\n  // Depending on the the params passed in we will have different number of\n  // inputs and thus a a different number of elements in the gradient.\n  if (bias == null) {\n    const customOp =\n        customGrad((x4D: Tensor4D, filter: Tensor4D, save: GradSaveFunc) => {\n          let res: Tensor4D|Tensor3D =\n              // tslint:disable-next-line: no-unnecessary-type-assertion\n              ENGINE.runKernel(\n                  FusedConv2D, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap);\n\n          save([filter, x4D, res]);\n\n          if (reshapedTo4D) {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as\n                Tensor3D;\n          }\n\n          return {value: res, gradFunc: grad};\n        });\n    return customOp(x4D, $filter) as T;\n  } else {\n    const customOpWithBias = customGrad(\n        (x4D: Tensor4D, filter: Tensor4D, bias: Tensor, save: GradSaveFunc) => {\n          let res: Tensor4D|Tensor3D = ENGINE.runKernel(\n              FusedConv2D, inputs as {} as NamedTensorMap,\n              attrs as {} as NamedAttrMap);\n\n          save([filter, x4D, res, bias]);\n\n          if (reshapedTo4D) {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as\n                Tensor3D;\n          }\n\n          return {value: res, gradFunc: grad};\n        });\n\n    return customOpWithBias(x4D, $filter, $bias) as T;\n  }\n}\nexport const conv2d = op({fusedConv2d_});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}